<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rti.ConnextDds</name>
    </assembly>
    <members>
        <member name="T:Omg.Dds.Core.LengthUnlimited">
            <summary>
            A special value indicating an unlimited quantity.
            </summary>
        </member>
        <member name="F:Omg.Dds.Core.LengthUnlimited.Value">
            <summary>
            The constant value
            </summary>
        </member>
        <member name="T:Omg.Dds.Core.Duration">
            <summary>
            Represents a time duration.
            </summary>
        </member>
        <member name="F:Omg.Dds.Core.Duration.NanosecondsPerSecond">
            <summary>
            Constant defining how many nanoseconds are in a second
            </summary>
        </member>
        <member name="F:Omg.Dds.Core.Duration.NanosecondsPerMillisecond">
            <summary>
            Constant defining how many nanoseconds are in a millisecond
            </summary>
        </member>
        <member name="F:Omg.Dds.Core.Duration.MillisecondsPerSecond">
            <summary>
            Constant defining how many milliseconds are in a second
            </summary>
        </member>
        <member name="P:Omg.Dds.Core.Duration.Zero">
            <summary>
            Object representing a zero duration.
            </summary>
        </member>
        <member name="P:Omg.Dds.Core.Duration.Infinite">
            <summary>
            Object representing an Infinite duration
            </summary>
        </member>
        <member name="P:Omg.Dds.Core.Duration.Auto">
            <summary>
            Object indicating that the duration should be automatically determined.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Duration.#ctor(System.Int32,System.UInt32)">
            <summary>
            Creates a new object with the specified absolute number of seconds
            and nanoseconds.
            </summary>
        </member>
        <member name="P:Omg.Dds.Core.Duration.Seconds">
            <summary>
            Gets the second component of this object.
            </summary>
        </member>
        <member name="P:Omg.Dds.Core.Duration.Nanoseconds">
            <summary>
            Gets the nanosecond component of this object.
            </summary>
        </member>
        <member name="P:Omg.Dds.Core.Duration.TotalMilliseconds">
            <summary>
            Gets the total number of milliseconds
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Duration.FromSeconds(System.UInt32)">
            <summary>
            Creates a duration from the specified total number of seconds.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Duration.FromSeconds(System.Double)">
            <summary>
            Creates a duration from the specified total number of seconds.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Duration.FromMilliseconds(System.UInt64)">
            <summary>
            Creates a duration from the specified total number of milliseconds.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Duration.CompareTo(Omg.Dds.Core.Duration)">
            <summary>
            Compares two durations.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Duration.Equals(Omg.Dds.Core.Duration)">
            <summary>
            Compares two durations for equality.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Duration.Equals(System.Object)">
            <summary>
            Compares two objects for equality.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Duration.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Duration.ToString">
            <summary>
            Converts this object to a string.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Duration.op_Equality(Omg.Dds.Core.Duration@,Omg.Dds.Core.Duration@)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Duration.op_Inequality(Omg.Dds.Core.Duration@,Omg.Dds.Core.Duration@)">
            <summary>
            Compares for inequality.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Duration.op_LessThan(Omg.Dds.Core.Duration@,Omg.Dds.Core.Duration@)">
            <summary>
            Determines if one duration is smaller than another duration.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Duration.op_GreaterThan(Omg.Dds.Core.Duration@,Omg.Dds.Core.Duration@)">
            <summary>
            Determines if one duration is greater than another duration.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Duration.op_LessThanOrEqual(Omg.Dds.Core.Duration@,Omg.Dds.Core.Duration@)">
            <summary>
            Determines if one duration is smaller or equal than another duration.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Duration.op_GreaterThanOrEqual(Omg.Dds.Core.Duration@,Omg.Dds.Core.Duration@)">
            <summary>
            Determines if one duration is larger or equal than another duration.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Duration.op_Explicit(Omg.Dds.Core.Duration)~System.TimeSpan">
            <summary>
            Explicit conversion from Duration to TimeSpan. Loss of precision
            is possible, since a TimeSpan has a smaller resolution.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Duration.op_Explicit(System.TimeSpan)~Omg.Dds.Core.Duration">
            <summary>
            Explicit conversion from TimeSpan to Duration.
            </summary>
        </member>
        <member name="T:Omg.Dds.Core.DdsException">
            <summary>
            Indicates a generic DDS error.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.DdsException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Omg.Dds.Core.NotEnabledException">
            <summary>
            Exception thrown when an operation is invoked on an <see cref="T:Rti.Dds.Core.Entity"/>
            that is not enabled.
            </summary>
        </member>
        <member name="T:Omg.Dds.Core.PreconditionNotMetException">
            <summary>
            Exception thrown when a precondition for an operation is not met.
            </summary>
        </member>
        <member name="T:Omg.Dds.Core.ImmutablePolicyException">
            <summary>
            Indicates that the application attempted to modify an immutable QoS policy.
            </summary>
        </member>
        <member name="T:Omg.Dds.Core.InconsistentPolicyException">
            <summary>
            Indicates that the application specified a set of QoS policies that are
            not consistent with each other
            </summary>
        </member>
        <member name="T:Omg.Dds.Core.OutOfResourcesException">
            <summary>
            Indicates that a DDS operation ran out of the resources needed to complete
            </summary>
        </member>
        <member name="T:Omg.Dds.Core.NotAllowedBySecurityException">
            <summary>
            Indicates that a DDS operation failed because the security plugins do
            not allow it.
            </summary>
        </member>
        <member name="T:Omg.Dds.Core.Policy.ChangeableAttribute">
            <summary>
            Attribute that indicates that a Qos policy type can be changed after
            its <see cref="T:Rti.Dds.Core.Entity"/> has been created.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Policy.ChangeableAttribute.#ctor(Omg.Dds.Core.Policy.ChangeableWhen)">
            <summary>
            Creates the attribute
            </summary>
            <param name="changeableWhen">When it can be changed</param>
        </member>
        <member name="P:Omg.Dds.Core.Policy.ChangeableAttribute.ChangeableWhen">
            <summary>
            Indicates when the policy can be changed
            </summary>
        </member>
        <member name="T:Omg.Dds.Core.Policy.ChangeableWhen">
            <summary>
            Indicates when the policy can be changed
            </summary>
        </member>
        <member name="F:Omg.Dds.Core.Policy.ChangeableWhen.AnyTime">
            <summary>
            Indicates that the Qos policy can be changed any time after creation
            </summary>
        </member>
        <member name="F:Omg.Dds.Core.Policy.ChangeableWhen.UntilEnable">
            <summary>
            Indicates that the Qos policy can only be changed while the entity
             hasn't been enabled yet.
            </summary>
        </member>
        <member name="T:Omg.Dds.Core.Policy.DurabilityKind">
            <summary>
            Kinds of durability
            </summary>
            <remarks>@dref_details_DurabilityQosPolicyKind</remarks>
        </member>
        <member name="F:Omg.Dds.Core.Policy.DurabilityKind.Volatile">
            <summary>
            DDS does not need to keep any samples of data instances on behalf
            of any <see cref="T:Rti.Dds.Subscription.DataReader`1"/> that is
            unknown by the <see cref="T:Rti.Dds.Publication.DataWriter`1"/> at
            the time the instance is written.
            </summary>
            <remarks>@dref_details_DurabilityQosPolicyKind_VOLATILE_DURABILITY_QOS</remarks>
        </member>
        <member name="F:Omg.Dds.Core.Policy.DurabilityKind.TransientLocal">
            <summary>
            DDS will attempt to keep some samples so that they can be delivered
            to any potential late-joining <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <remarks>@dref_details_DurabilityQosPolicyKind_TRANSIENT_LOCAL_DURABILITY_QOS</remarks>
        </member>
        <member name="F:Omg.Dds.Core.Policy.DurabilityKind.Transient">
            <summary>
            DDS will attempt to keep some samples so that they can be delivered
            to any potential late-joining <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <remarks>@dref_details_DurabilityQosPolicyKind_TRANSIENT_DURABILITY_QOS</remarks>
        </member>
        <member name="F:Omg.Dds.Core.Policy.DurabilityKind.Persistent">
            <summary>
            Data is kept on permanent storage, so that they can outlive a system session.
            </summary>
            <remarks>@dref_details_DurabilityQosPolicyKind_PERSISTENT_DURABILITY_QOS</remarks>
        </member>
        <member name="T:Omg.Dds.Core.ServiceEnvironment">
            <summary>
            Contains global objects used by DDS.
            </summary>
        </member>
        <member name="P:Omg.Dds.Core.ServiceEnvironment.TypeFactory">
            <summary>
            A factory for creating <see cref="T:Rti.Types.Dynamic.DynamicType"/>.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.ServiceEnvironment.CreateInstance(System.String)">
            <summary>
            Creates a <see cref="T:Omg.Dds.Core.ServiceEnvironment"/> instance from a given
            class name.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.ServiceEnvironment.CreateInstance(System.String,System.Reflection.Assembly)">
            <summary>
            Creates a <see cref="T:Omg.Dds.Core.ServiceEnvironment"/> instance from a given
            class name and <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.ServiceEnvironment.CreateInstance(System.String,System.AppDomain)">
            <summary>
            Creates a <see cref="T:Omg.Dds.Core.ServiceEnvironment"/> instance from a given
            class name and <see cref="T:System.AppDomain"/>.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.ServiceEnvironment.Dispose">
            <summary>
            Cleans up all the memory used by global objects
            </summary>
        </member>
        <member name="T:Omg.Dds.Core.Status.EventCount`1">
            <summary>
            An event count has a value and a change from the last time the value
            was looked up
            </summary>
        </member>
        <member name="P:Omg.Dds.Core.Status.EventCount`1.Value">
            <summary>
            The total value for this counter.
            </summary>
        </member>
        <member name="P:Omg.Dds.Core.Status.EventCount`1.Change">
            <summary>
            The change (positive or negative) of <see cref="P:Omg.Dds.Core.Status.EventCount`1.Value"/> since this
            counter was last looked up.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Status.EventCount`1.#ctor(`0,`0)">
            <summary>
            Creates an instance with a value and a change count
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Status.EventCount`1.Deconstruct(`0@,`0@)">
            <summary>
            Deconstructs the EventCount object.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Status.EventCount`1.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Status.EventCount`1.ToString">
            <summary>
            Returns a readable representation
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Status.EventCount`1.Equals(Omg.Dds.Core.Status.EventCount{`0})">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Status.EventCount`1.op_Implicit(System.ValueTuple{`0,`0})~Omg.Dds.Core.Status.EventCount{`0}">
            <summary>
            Implicit conversion from a tuple with (Value, Change)
            </summary>
        </member>
        <member name="T:Omg.Dds.Core.Time">
            <summary>
            Represents a moment in time.
            </summary>
        </member>
        <member name="F:Omg.Dds.Core.Time.NanosecondsPerSecond">
            <summary>
            Number of nanoseconds in a second
            </summary>
        </member>
        <member name="F:Omg.Dds.Core.Time.NanosecondsPerMillisecond">
            <summary>
            Number of nanoseconds in a millisecond
            </summary>
        </member>
        <member name="F:Omg.Dds.Core.Time.MillisecondsPerSecond">
            <summary>
            Number of milliseconds in a second
            </summary>
        </member>
        <member name="P:Omg.Dds.Core.Time.Zero">
            <summary>
            The default instant in time: zero seconds and zero nanoseconds
            </summary>
            <remarks>@dref_details_Time_t_ZERO</remarks>
        </member>
        <member name="P:Omg.Dds.Core.Time.MaxValue">
            <summary>
            The maximum valid value of Time
            </summary>
        </member>
        <member name="P:Omg.Dds.Core.Time.Invalid">
            <summary>
            A special sentinel that indicates an invalid or unknown time.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Time.#ctor(System.Int32,System.UInt32)">
            <summary>
            Creates a new object with the specified absolute number of seconds
            and nanoseconds.
            </summary>
        </member>
        <member name="P:Omg.Dds.Core.Time.Seconds">
            <summary>
            Gets the second component of this object.
            </summary>
        </member>
        <member name="P:Omg.Dds.Core.Time.Nanoseconds">
            <summary>
            Gets the nanosecond component of this object.
            </summary>
        </member>
        <member name="P:Omg.Dds.Core.Time.TotalMilliseconds">
            <summary>
            Gets the total number of milliseconds
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Time.FromSeconds(System.UInt32)">
            <summary>
            Creates a time from the specified total number of seconds.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Time.FromSeconds(System.Double)">
            <summary>
            Creates a time from the specified total number of seconds.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Time.FromMilliseconds(System.UInt64)">
            <summary>
            Creates a time from the specified total number of milliseconds.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Time.CompareTo(Omg.Dds.Core.Time)">
            <summary>
            Compares two times.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Time.Equals(Omg.Dds.Core.Time)">
            <summary>
            Compares two times for equality.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Time.Equals(System.Object)">
            <summary>
            Compares two objects for equality.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Time.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Time.ToString">
            <summary>
            Converts this object to a string.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Time.op_Equality(Omg.Dds.Core.Time@,Omg.Dds.Core.Time@)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Time.op_Inequality(Omg.Dds.Core.Time@,Omg.Dds.Core.Time@)">
            <summary>
            Compares for inequality.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Time.op_LessThan(Omg.Dds.Core.Time@,Omg.Dds.Core.Time@)">
            <summary>
            Determines if one time value is smaller than another one.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Time.op_GreaterThan(Omg.Dds.Core.Time@,Omg.Dds.Core.Time@)">
            <summary>
            Determines if one time value is greater than another one.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Time.op_LessThanOrEqual(Omg.Dds.Core.Time@,Omg.Dds.Core.Time@)">
            <summary>
            Determines if one time value is smaller or equal than another one.
            </summary>
        </member>
        <member name="M:Omg.Dds.Core.Time.op_GreaterThanOrEqual(Omg.Dds.Core.Time@,Omg.Dds.Core.Time@)">
            <summary>
            Determines if one time value is greater or equal than another one.
            </summary>
        </member>
        <member name="T:Omg.Dds.Subscription.SampleState">
            <summary>
            Indicates whether or not a sample has ever been read.
            </summary>
            <remarks>@dref_details_SampleStateKind</remarks>
        </member>
        <member name="F:Omg.Dds.Subscription.SampleState.None">
            <summary>
            Mask where no flag is selected.
            </summary>
        </member>
        <member name="F:Omg.Dds.Subscription.SampleState.Read">
            <summary>
            Indicates that the application has already accessed that
            sample by means of a read or take operation.
            </summary>
        </member>
        <member name="F:Omg.Dds.Subscription.SampleState.NotRead">
            <summary>
            Indicates that the application has not accessed that sample before.
            </summary>
        </member>
        <member name="F:Omg.Dds.Subscription.SampleState.Any">
            <summary>
            A mask containing all flags.
            </summary>
        </member>
        <member name="T:Omg.Dds.Subscription.ViewState">
            <summary>
            Indicates whether or not an instance is new.
            </summary>
            <remarks>@dref_details_ViewStateKind</remarks>
        </member>
        <member name="F:Omg.Dds.Subscription.ViewState.None">
            <summary>
            Mask where no flag is selected
            </summary>
        </member>
        <member name="F:Omg.Dds.Subscription.ViewState.New">
            <summary>
            Indicates that the latest generation of an instance has not previously
            been accessed.
            </summary>
        </member>
        <member name="F:Omg.Dds.Subscription.ViewState.NotNew">
            <summary>
            Indicates that the latest generation of an instance has previously
            been accessed.
            </summary>
        </member>
        <member name="F:Omg.Dds.Subscription.ViewState.Any">
            <summary>
            Mask containing all flags
            </summary>
        </member>
        <member name="T:Omg.Dds.Subscription.InstanceState">
            <summary>
            Indicates if the samples are from a live DataWriter or not.
            </summary>
            <remarks>@dref_details_InstanceStateKind</remarks>
        </member>
        <member name="F:Omg.Dds.Subscription.InstanceState.None">
            <summary>
            Mask where no flag is selected
            </summary>
        </member>
        <member name="F:Omg.Dds.Subscription.InstanceState.Alive">
            <summary>
            Indicates that the instance is currently in existence.
            </summary>
        </member>
        <member name="F:Omg.Dds.Subscription.InstanceState.NotAliveDisposed">
            <summary>
            Indicates that the instance has been disposed by a DataWriter.
            </summary>
        </member>
        <member name="F:Omg.Dds.Subscription.InstanceState.NotAliveNoWriters">
            <summary>
            Indicates that none of the DataWriters that are currently alive
            (according to the Liveliness QoS policy) are writing this instance.
            </summary>
        </member>
        <member name="F:Omg.Dds.Subscription.InstanceState.NotAlive">
            <summary>
            Mask containing the <see cref="F:Omg.Dds.Subscription.InstanceState.NotAliveDisposed"/> and
            <see cref="F:Omg.Dds.Subscription.InstanceState.NotAliveNoWriters"/> flags.
            </summary>
        </member>
        <member name="F:Omg.Dds.Subscription.InstanceState.Any">
            <summary>
            Mask containing all flags.
            </summary>
        </member>
        <member name="T:Omg.Dds.Subscription.DataState">
            <summary>
            Information about a sample's <see cref="T:Omg.Dds.Subscription.SampleState"/>,
            <see cref="T:Omg.Dds.Subscription.ViewState"/>, and <see cref="T:Omg.Dds.Subscription.InstanceState"/>.
            </summary>
        </member>
        <member name="P:Omg.Dds.Subscription.DataState.Sample">
            <summary>
            Gets the SampleState
            </summary>
        </member>
        <member name="P:Omg.Dds.Subscription.DataState.View">
            <summary>
            Gets the ViewState.
            </summary>
        </member>
        <member name="P:Omg.Dds.Subscription.DataState.Instance">
            <summary>
            Gets the InstanceState.
            </summary>
        </member>
        <member name="P:Omg.Dds.Subscription.DataState.Any">
            <summary>
            A constant representing any sample, view or instance states.
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.DataState.With(Omg.Dds.Subscription.SampleState)">
            <summary>
            Creates a DataState with a specific SampleState.
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.DataState.With(Omg.Dds.Subscription.ViewState)">
            <summary>
            Creates a DataState with a specific ViewState
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.DataState.With(Omg.Dds.Subscription.InstanceState)">
            <summary>
            Creates a DataState with a specific InstanceState.
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.DataState.With(Omg.Dds.Subscription.SampleState,Omg.Dds.Subscription.ViewState,Omg.Dds.Subscription.InstanceState)">
            <summary>
            Creates a DataState with specific SampleState, ViewState,
            and InstanceState.
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.DataState.And(Omg.Dds.Subscription.SampleState)">
            <summary>
            Creates a copy of this DataState with a new SampleState.
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.DataState.And(Omg.Dds.Subscription.ViewState)">
            <summary>
            Creates a copy of this DataState with a new ViewState.
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.DataState.And(Omg.Dds.Subscription.InstanceState)">
            <summary>
            Creates a copy of this DataState with a new InstanceState.
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.DataState.op_Implicit(Omg.Dds.Subscription.SampleState)~Omg.Dds.Subscription.DataState">
            <summary>
            Implicit conversion from SampleState to DataState.
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.DataState.op_Implicit(Omg.Dds.Subscription.ViewState)~Omg.Dds.Subscription.DataState">
            <summary>
            Implicit conversion from ViewState to DataState.
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.DataState.op_Implicit(Omg.Dds.Subscription.InstanceState)~Omg.Dds.Subscription.DataState">
            <summary>
            Implicit conversion from InstanceState to DataState.
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.DataState.op_Implicit(System.ValueTuple{Omg.Dds.Subscription.SampleState,Omg.Dds.Subscription.ViewState,Omg.Dds.Subscription.InstanceState})~Omg.Dds.Subscription.DataState">
            <summary>
            Implicit conversion from a tuple with the three states.
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.DataState.Deconstruct(Omg.Dds.Subscription.SampleState@,Omg.Dds.Subscription.ViewState@,Omg.Dds.Subscription.InstanceState@)">
            <summary>
            Deconstruct operation that allows unpacking a DataState into its
            three values: SampleState, ViewState and InstanceState.
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.DataState.Equals(Omg.Dds.Subscription.DataState)">
            <summary>
            Equality comparison
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.DataState.Equals(System.Object)">
            <summary>
            Equality comparison
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.DataState.GetHashCode">
            <summary>
            Get the hash code
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.DataState.ToString">
            <summary>
            Print the three states
            </summary>
        </member>
        <member name="T:Omg.Dds.Subscription.DataStateOperations">
            <summary>
            Extensions for <see cref="T:Omg.Dds.Subscription.SampleState"/>, <see cref="T:Omg.Dds.Subscription.ViewState"/>
            and <see cref="T:Omg.Dds.Subscription.InstanceState"/> that allow combining them to form
            a <see cref="T:Omg.Dds.Subscription.DataState"/>
            </summary>
            <example>
            <code>
            DataState ds = SampleState.Read.And(InstanceState.NotAlive).And(ViewState.NotNew);
            </code>
            </example>
        </member>
        <member name="M:Omg.Dds.Subscription.DataStateOperations.And(Omg.Dds.Subscription.SampleState,Omg.Dds.Subscription.ViewState)">
            <summary>
            Creates a DataState from a SampleState and a ViewState
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.DataStateOperations.And(Omg.Dds.Subscription.SampleState,Omg.Dds.Subscription.InstanceState)">
            <summary>
            Creates a DataState from a SampleState and an InstanceState
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.DataStateOperations.And(Omg.Dds.Subscription.ViewState,Omg.Dds.Subscription.SampleState)">
            <summary>
            Creates a DataState from a ViewState and a SampleState
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.DataStateOperations.And(Omg.Dds.Subscription.ViewState,Omg.Dds.Subscription.InstanceState)">
            <summary>
            Creates a DataState from a ViewState and an InstanceState
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.DataStateOperations.And(Omg.Dds.Subscription.InstanceState,Omg.Dds.Subscription.SampleState)">
            <summary>
            Creates a DataState from an InstanceState and a SampleState
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.DataStateOperations.And(Omg.Dds.Subscription.InstanceState,Omg.Dds.Subscription.ViewState)">
            <summary>
            Creates a DataState from an InstanceState and a ViewState
            </summary>
        </member>
        <member name="T:Omg.Dds.Subscription.GenerationCount">
            <summary>
            Keeps track of changes in <see cref="T:Omg.Dds.Subscription.InstanceState"/>.
            </summary>
        </member>
        <member name="P:Omg.Dds.Subscription.GenerationCount.Disposed">
            <summary>
            The number of times an instance has transitioned from
            <see cref="F:Omg.Dds.Subscription.InstanceState.NotAliveDisposed"/> to <see cref="F:Omg.Dds.Subscription.InstanceState.Alive"/>
            </summary>
            <remarks>@dref_details_SampleInfo_disposed_generation_count</remarks>
        </member>
        <member name="P:Omg.Dds.Subscription.GenerationCount.NoWriters">
            <summary>
            The number of times an instance has transitioned from
            <see cref="F:Omg.Dds.Subscription.InstanceState.NotAliveNoWriters"/> to <see cref="F:Omg.Dds.Subscription.InstanceState.Alive"/>
            </summary>
            <remarks>@dref_details_SampleInfo_no_writers_generation_count</remarks>
        </member>
        <member name="M:Omg.Dds.Subscription.GenerationCount.Equals(Omg.Dds.Subscription.GenerationCount)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.GenerationCount.Equals(System.Object)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.GenerationCount.GetHashCode">
            <summary>
            Calculates the hash code.
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.GenerationCount.ToString">
            <summary>
            Returns a readable representation of this object
            </summary>
        </member>
        <member name="T:Omg.Dds.Subscription.Rank">
            <summary>
            Keeps track of the number of samples related to the same instance
            that follow in a sample collection.
            </summary>
        </member>
        <member name="P:Omg.Dds.Subscription.Rank.SampleRank">
            <summary>
            The sample rank of the sample.
            </summary>
            <remarks>@dref_details_SampleInfo_sample_rank</remarks>
        </member>
        <member name="P:Omg.Dds.Subscription.Rank.GenerationRank">
            <summary>
            The generation rank of the sample.
            </summary>
            <remarks>@dref_details_SampleInfo_generation_rank</remarks>
        </member>
        <member name="P:Omg.Dds.Subscription.Rank.AbsoluteGenerationRank">
            <summary>
            The absolute generation rank of the sample.
            </summary>
            <remarks>@dref_details_SampleInfo_absolute_generation_rank</remarks>
        </member>
        <member name="M:Omg.Dds.Subscription.Rank.Equals(Omg.Dds.Subscription.Rank)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.Rank.Equals(System.Object)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.Rank.GetHashCode">
            <summary>
            Calculates the hash code.
            </summary>
        </member>
        <member name="M:Omg.Dds.Subscription.Rank.ToString">
            <summary>
            Returns a readable representation of this object
            </summary>
        </member>
        <member name="T:Omg.Types.Dynamic.ICollectionType">
            <summary>
            Defines an <see cref="T:Omg.Types.Dynamic.IDynamicType"/> collection.
            </summary>
            <remarks>
            <see cref="T:Omg.Types.Dynamic.ISequenceType"/>, <see cref="T:Omg.Types.Dynamic.IStringType"/> and
            <see cref="T:Omg.Types.Dynamic.IArrayType"/> are considered to be
            <see cref="T:Omg.Types.Dynamic.ICollectionType"/>.
            </remarks>
        </member>
        <member name="P:Omg.Types.Dynamic.ICollectionType.ContentType">
            <summary>
            The <see cref="T:Omg.Types.Dynamic.IDynamicType"/> of the elements contained the
            <see cref="T:Omg.Types.Dynamic.ICollectionType"/>.
            </summary>
        </member>
        <member name="T:Omg.Types.Dynamic.IUnidimensionalCollectionType">
            <summary>
            Defines a single-dimension <see cref="T:Omg.Types.Dynamic.ICollectionType"/>.
            </summary>
        </member>
        <member name="P:Omg.Types.Dynamic.IUnidimensionalCollectionType.Bounds">
            <summary>
            The bounds of the collection's single dimension.
            </summary>
        </member>
        <member name="T:Omg.Types.Dynamic.ISequenceType">
            <summary>
            Defines an <see cref="T:Omg.Types.Dynamic.ISequenceType"/>.
            </summary>
        </member>
        <member name="T:Omg.Types.Dynamic.IStringType">
            <summary>
            Defines an <see cref="T:Omg.Types.Dynamic.IStringType"/>.
            </summary>
        </member>
        <member name="T:Omg.Types.Dynamic.IArrayType">
            <summary>
            Defines an <see cref="T:Omg.Types.Dynamic.IArrayType"/>.
            </summary>
        </member>
        <member name="P:Omg.Types.Dynamic.IArrayType.DimensionCount">
            <summary>
            The number of dimensions.
            </summary>
        </member>
        <member name="M:Omg.Types.Dynamic.IArrayType.GetDimension(System.UInt32)">
            <summary>
            Returns the i-th dimension.
            </summary>
        </member>
        <member name="P:Omg.Types.Dynamic.IArrayType.TotalElementCount">
            <summary>
            The sum of all the dimensions.
            </summary>
        </member>
        <member name="T:Omg.Types.Dynamic.IDynamicType">
            <summary>
            Interface of <see cref="T:Rti.Types.Dynamic.DynamicType"/>.
            </summary>
        </member>
        <member name="P:Omg.Types.Dynamic.IDynamicType.Name">
            <summary>
            The name of the <see cref="T:Omg.Types.Dynamic.IDynamicType"/>.
            </summary>
        </member>
        <member name="P:Omg.Types.Dynamic.IDynamicType.Kind">
            <summary>
            The kind of <see cref="T:Omg.Types.Dynamic.IDynamicType"/>.
            </summary>
        </member>
        <member name="T:Omg.Types.Dynamic.IConstructedType">
            <summary>
            Common interface for constructed types.
            </summary>
            <remarks>
            <see cref="T:Omg.Types.Dynamic.IStructType"/>, <see cref="T:Omg.Types.Dynamic.IUnionType"/> and
            <see cref="T:Omg.Types.Dynamic.IEnumType"/> are considered to be
            <see cref="T:Omg.Types.Dynamic.IConstructedType"/>.
            </remarks>
        </member>
        <member name="P:Omg.Types.Dynamic.IConstructedType.ExtensibilityKind">
            <summary>
            The <see cref="P:Omg.Types.Dynamic.IConstructedType.ExtensibilityKind"/> of the <see cref="T:Omg.Types.Dynamic.IConstructedType"/>.
            </summary>
        </member>
        <member name="P:Omg.Types.Dynamic.IConstructedType.Members">
            <summary>
            The <see cref="T:Omg.Types.Dynamic.IConstructedType"/> members.
            </summary>
        </member>
        <member name="M:Omg.Types.Dynamic.IConstructedType.GetMember(System.UInt32)">
            <summary>
            Returns the i-th member of the <see cref="T:Omg.Types.Dynamic.IConstructedType"/>.
            </summary>
        </member>
        <member name="M:Omg.Types.Dynamic.IConstructedType.GetMember(System.String)">
            <summary>
            Returns a member of the <see cref="T:Omg.Types.Dynamic.IConstructedType"/> by its name.
            </summary>
        </member>
        <member name="T:Omg.Types.Dynamic.IEnumType">
            <summary>
            Represents an IDL enum.
            </summary>
        </member>
        <member name="P:Omg.Types.Dynamic.IEnumType.Members">
            <summary>
            The <see cref="T:Omg.Types.Dynamic.IEnumType"/> members.
            </summary>
        </member>
        <member name="T:Omg.Types.Dynamic.IMember">
            <summary>
            Common interface for all members of an <see cref="T:Omg.Types.Dynamic.IDynamicType"/>.
            </summary>
        </member>
        <member name="P:Omg.Types.Dynamic.IMember.Name">
            <summary>
            The name of the member.
            </summary>
        </member>
        <member name="T:Omg.Types.Dynamic.IAggregationMember">
            <summary>
            Common interface for the members of an aggregation type.
            </summary>
            <remarks>
            <see cref="T:Omg.Types.Dynamic.IStructMember"/> and <see cref="T:Omg.Types.Dynamic.IUnionMember"/> are considered
            to be <see cref="T:Omg.Types.Dynamic.IAggregationMember"/>.
            </remarks>
        </member>
        <member name="P:Omg.Types.Dynamic.IAggregationMember.Type">
            <summary>
            The <see cref="T:Omg.Types.Dynamic.IDynamicType"/> of the <see cref="T:Omg.Types.Dynamic.IAggregationMember"/>.
            </summary>
        </member>
        <member name="P:Omg.Types.Dynamic.IAggregationMember.Id">
            <summary>
            The id of the <see cref="T:Omg.Types.Dynamic.IAggregationMember"/>.
            </summary>
        </member>
        <member name="P:Omg.Types.Dynamic.IAggregationMember.IsExternal">
            <summary>
            Indicates whether or not the <see cref="T:Omg.Types.Dynamic.IAggregationMember"/>
            is annotated as external.
            </summary>
        </member>
        <member name="T:Omg.Types.Dynamic.IStructMember">
            <summary>
            Defines a member of an <see cref="T:Omg.Types.Dynamic.IStructType"/>.
            </summary>
        </member>
        <member name="P:Omg.Types.Dynamic.IStructMember.IsKey">
            <summary>
            Whether this member is annotated as a key.
            </summary>
        </member>
        <member name="P:Omg.Types.Dynamic.IStructMember.IsOptional">
            <summary>
            Whether this member is annotated as optional.
            </summary>
        </member>
        <member name="T:Omg.Types.Dynamic.IUnionMember">
            <summary>
            Defines a member of an <see cref="T:Omg.Types.Dynamic.IUnionType"/>.
            </summary>
        </member>
        <member name="P:Omg.Types.Dynamic.IUnionMember.Labels">
            <summary>
            The labels that select this <see cref="T:Omg.Types.Dynamic.IUnionMember"/>.
            </summary>
        </member>
        <member name="T:Omg.Types.Dynamic.IEnumMember">
            <summary>
            Defines a member of an <see cref="T:Omg.Types.Dynamic.IEnumType"/>.
            </summary>
        </member>
        <member name="P:Omg.Types.Dynamic.IEnumMember.Ordinal">
            <summary>
            The value for this <see cref="T:Omg.Types.Dynamic.IEnumMember"/> in the enumeration.
            </summary>
        </member>
        <member name="T:Omg.Types.Dynamic.IPrimitiveType`1">
            <summary>
            Represents an IDL primitive type.
            </summary>
        </member>
        <member name="T:Omg.Types.Dynamic.IStructType">
            <summary>
            Represents an IDL struct.
            </summary>
        </member>
        <member name="P:Omg.Types.Dynamic.IStructType.Parent">
            <summary>
            The parent <see cref="T:Omg.Types.Dynamic.IStructType"/> of this <see cref="T:Omg.Types.Dynamic.IStructType"/>.
            </summary>
        </member>
        <member name="P:Omg.Types.Dynamic.IStructType.Members">
            <summary>
            The <see cref="T:Omg.Types.Dynamic.IStructType"/> members.
            </summary>
        </member>
        <member name="T:Omg.Types.Dynamic.IUnionType">
            <summary>
            Represents an IDL union.
            </summary>
        </member>
        <member name="P:Omg.Types.Dynamic.IUnionType.Discriminator">
            <summary>
            The <see cref="T:Omg.Types.Dynamic.IUnionType"/> discriminator.
            </summary>
        </member>
        <member name="P:Omg.Types.Dynamic.IUnionType.Members">
            <summary>
            The <see cref="T:Omg.Types.Dynamic.IUnionType"/> members.
            </summary>
        </member>
        <member name="T:Omg.Types.Dynamic.TypeKind">
            <summary>
            The different kinds of <see cref="T:Rti.Types.Dynamic.DynamicType"/>.
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.Annotation">
            <summary>
            Flag indicating the definition of an annotation.
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.Aggregation">
            <summary>
            Flag indicating an aggregation type (Structure, Union)
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.Collection">
            <summary>
            Flag indicating a collection type
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.Primitive">
            <summary>
            Flag indicating a primitive type (<see cref="T:Rti.Types.Dynamic.PrimitiveType`1"/>).
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.Boolean">
            <summary>
            Flag indicating a <see cref="T:System.Boolean"/> (`PrimitiveType&lt;bool&gt;)
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.Uint8">
            <summary>
            Flag indicating a <see cref="T:System.Byte"/> (`PrimitiveType&lt;byte&gt;`)
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.Int16">
            <summary>
            Flag indicating a <see cref="T:System.Int16"/> (`PrimitiveType&lt;short&gt;`)
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.Uint16">
            <summary>
            Flag indicating a <see cref="T:System.UInt16"/> (`PrimitiveType&lt;ushort&gt;`)
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.Int32">
            <summary>
            Flag indicating an <see cref="T:System.Int32"/> (`PrimitiveType&lt;int&gt;`)
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.UInt32">
            <summary>
            Flag indicating a <see cref="T:System.UInt32"/> (`PrimitiveType&lt;uint&gt;`)
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.Int64">
            <summary>
            Flag indicating a <see cref="T:System.Int64"/> (`PrimitiveType&lt;long&gt;`)
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.UInt64">
            <summary>
            Flag indicating a <see cref="T:System.UInt64"/> (`PrimitiveType&lt;ulong&gt;`)
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.Float32">
            <summary>
            Flag indicating a <see cref="T:System.Single"/> (`PrimitiveType&lt;float&gt;`)
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.Float64">
            <summary>
            Flag indicating a <see cref="T:System.Double"/> (`PrimitiveType&lt;double&gt;`)
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.Float128">
            <summary>
            Flag indicating a long double (`PrimitiveType&lt;decimal&gt;`)
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.Char8">
            <summary>
            Flag indicating a UTF-8 character (`PrimitiveType&lt;char&gt;`)
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.Char16">
            <summary>
            Flag indicating a UTF-16 character.
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.Constructed">
            <summary>
            Flag indicating a constructed type (Enumeration, Alias, Collection, Aggregation)
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.Enumeration">
            <summary>
            Flag indicating an <see cref="T:Rti.Types.Dynamic.EnumType"/>.
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.Bitset">
            <summary>
            Flag indicating a bitset type.
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.Alias">
            <summary>
            Flag indicating an <see cref="T:Rti.Types.Dynamic.AliasType"/>.
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.Union">
            <summary>
            Flag indicating a <see cref="T:Rti.Types.Dynamic.UnionType"/>.
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.Structure">
            <summary>
            Flag indicating a <see cref="T:Rti.Types.Dynamic.StructType"/>.
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.UnionFwdDecl">
            <summary>
            Flag indicating a union forward declaration.
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.StructureFwdDecl">
            <summary>
            Flag indicating a structure forward declaration.
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.Array">
            <summary>
            Flag indicating an <see cref="T:Rti.Types.Dynamic.ArrayType"/>.
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.Sequence">
            <summary>
            Flag indicating a <see cref="T:Rti.Types.Dynamic.SequenceType"/>.
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.String">
            <summary>
            Flag indicating a UTF-8 <see cref="T:Rti.Types.Dynamic.StringType"/>.
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.MapType">
            <summary>
            Flag indicating a map type.
            </summary>
        </member>
        <member name="F:Omg.Types.Dynamic.TypeKind.WideString">
            <summary>
            Flag indicating a UTF-16 <see cref="T:Rti.Types.Dynamic.WideStringType"/>.
            </summary>
        </member>
        <member name="T:Omg.Types.ExtensibilityKind">
            <summary>
            Represents the values of the IDL annotation `@extensibility`
            </summary>
        </member>
        <member name="F:Omg.Types.ExtensibilityKind.Final">
            <summary>
            Final extensibility (`@final`).
            </summary>
        </member>
        <member name="F:Omg.Types.ExtensibilityKind.Extensible">
            <summary>
            Extensible/appendable extensibility (`@appendable`).
            </summary>
        </member>
        <member name="F:Omg.Types.ExtensibilityKind.Mutable">
            <summary>
            Mutable extensibility (`@mutable`)
            </summary>
        </member>
        <member name="T:Omg.Types.KeyAttribute">
            <summary>
            Indicates that a field in a topic-type is a key (IDL \@key annotation)
            </summary>
        </member>
        <member name="T:Omg.Types.OptionalAttribute">
            <summary>
            Indicates that a field in a topic-type is optional (IDL \@optional annotation)
            annotation)
            </summary>
        </member>
        <member name="T:Omg.Types.BoundAttribute">
            <summary>
            Specifies the maximum length for a bounded IDL sequence or string
            </summary>
        </member>
        <member name="M:Omg.Types.BoundAttribute.#ctor(System.Int32)">
            <summary>
            Specifies the maximum length
            </summary>
        </member>
        <member name="M:Omg.Types.BoundAttribute.#ctor(System.UInt32)">
            <summary>
            Specifies the maximum length
            </summary>
        </member>
        <member name="M:Omg.Types.BoundAttribute.#ctor(System.Int16)">
            <summary>
            Specifies the maximum length
            </summary>
        </member>
        <member name="M:Omg.Types.BoundAttribute.#ctor(System.UInt16)">
            <summary>
            Specifies the maximum length
            </summary>
        </member>
        <member name="M:Omg.Types.BoundAttribute.#ctor(System.Int64)">
            <summary>
            Specifies the maximum length
            </summary>
        </member>
        <member name="M:Omg.Types.BoundAttribute.#ctor(System.UInt64)">
            <summary>
            Specifies the maximum length
            </summary>
        </member>
        <member name="P:Omg.Types.BoundAttribute.Value">
            <summary>
            The maximum length
            </summary>
        </member>
        <member name="T:Omg.Types.ISequence`1">
            <summary>
            IDL sequences map to this type.
            </summary>
            <remarks>
            This class provides the same methods and properties as
            `System.Collections.Generic.List`
            (https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=netcore-3.1).
            </remarks>
        </member>
        <member name="T:Rti.Config.Logger">
            <summary>
            The singleton used to configure RTI Connext logging
            </summary>
            <remarks>
            <para>For code examples see \ref DDSConfigurationExampleModule_logging.</para>
            <para>@dref_details_Logger</para>
            </remarks>
        </member>
        <member name="P:Rti.Config.Logger.Instance">
            <summary>
            Get the singleton Logger instance
            </summary>
            <remarks>@dref_details_Logger_get_instance</remarks>
        </member>
        <member name="E:Rti.Config.Logger.MessageLogged">
            <summary>
            Event triggered whenever RTI Connext logs a message.
            </summary>
            <remarks>
            <para>
            This event allows a custom redirection or processing of RTI Connext
            log messages.
            </para>
            <para>
            If this event is handled, log messages will no longer be
            directed to the Console. After all handlers are removed, log
            messages will be directed to the Console again.
            </para>
            <para>
            For a code example, see \ref DDSConfigurationExampleModule_logging.
            </para>
            </remarks>
        </member>
        <member name="M:Rti.Config.Logger.SetVerbosity(Rti.Config.Verbosity)">
            <summary>
            Set the verbosity at which \ndds will log diagnostic information.
            </summary>
            <remarks>@dref_details_Logger_set_verbosity</remarks>
        </member>
        <member name="M:Rti.Config.Logger.SetVerbosity(Rti.Config.Verbosity,Rti.Config.LogCategory)">
            <summary>
            Set the verbosity at which \ndds will log diagnostic information in the given category.
            </summary>
            <remarks>@dref_details_Logger_set_verbosity_by_category</remarks>
        </member>
        <member name="M:Rti.Config.Logger.GetVerbosity">
            <summary>
            Get the verbosity at which \ndds is currently logging diagnostic information.
            </summary>
            <remarks>@dref_details_Logger_get_verbosity</remarks>
        </member>
        <member name="M:Rti.Config.Logger.GetVerbosity(Rti.Config.LogCategory)">
            <summary>
            Get the verbosity at which \ndds is currently logging diagnostic information in the given category.
            </summary>
            <remarks>@dref_details_Logger_get_verbosity_by_category</remarks>
        </member>
        <member name="M:Rti.Config.Logger.SetPrintFormat(Rti.Config.LogPrintFormat)">
            <summary>
            Set the message format that \ndds will use to log diagnostic information for all the log levels, except for \idref_LogLevel_NDDS_CONFIG_LOG_LEVEL_FATAL_ERROR.
            </summary>
            <remarks>@dref_details_Logger_set_print_format</remarks>
        </member>
        <member name="M:Rti.Config.Logger.SetPrintFormat(Rti.Config.LogPrintFormat,Rti.Config.LogLevel)">
            <summary>
            Set the message format, by log level, that \ndds will use to log diagnostic information.
            </summary>
            <remarks>@dref_details_Logger_set_print_format_by_log_level</remarks>
        </member>
        <member name="M:Rti.Config.Logger.GetPrintFormat">
            <summary>
            Get the current message format for the log level \idref_LogLevel_NDDS_CONFIG_LOG_LEVEL_ERROR.
            </summary>
            <remarks>@dref_details_Logger_get_print_format</remarks>
        </member>
        <member name="M:Rti.Config.Logger.GetPrintFormat(Rti.Config.LogLevel)">
            <summary>
            Get the current message format, by log level, that \ndds is using to log diagnostic information.
            </summary>
            <remarks>@dref_details_Logger_get_print_format_by_log_level</remarks>
        </member>
        <member name="M:Rti.Config.Logger.SetOutputFile(System.String)">
            <summary>
            Set the file to which the logged output is redirected.
            </summary>
            <remarks>@dref_details_Logger_set_output_file</remarks>
        </member>
        <member name="M:Rti.Config.Logger.SetOutputFileSet(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Configure a set of files to redirect the logged output
            </summary>
            <remarks>@dref_details_Logger_set_output_file_set</remarks>
        </member>
        <member name="T:Rti.Config.LogMessage">
            <summary>
            A log message provided by the <see cref="E:Rti.Config.Logger.MessageLogged"/> event.
            </summary>
            <remarks>@dref_details_LogMessage</remarks>
        </member>
        <member name="M:Rti.Config.LogMessage.#ctor(System.String,Rti.Config.LogLevel,System.Boolean)">
            <summary>
            Creates a LogMessage
            </summary>
        </member>
        <member name="P:Rti.Config.LogMessage.Message">
            <summary>
            Message text.
            </summary>
            <remarks>@dref_details_LogMessage_text</remarks>
        </member>
        <member name="P:Rti.Config.LogMessage.LogLevel">
            <summary>
            Message level.
            </summary>
            <remarks>@dref_details_LogMessage_level</remarks>
        </member>
        <member name="P:Rti.Config.LogMessage.IsSecurityMessage">
            <summary>
            Indicates if the message is a security-related message.
            </summary>
            <remarks>@dref_details_LogMessage_is_security_message</remarks>
        </member>
        <member name="M:Rti.Config.LogMessage.ToString">
            <summary>
            Returns <see cref="P:Rti.Config.LogMessage.Message"/>.
            </summary>
        </member>
        <member name="T:Rti.Config.LogLevel">
            <summary>
            The level at which diagnostic information is logged.
            </summary>
            <remarks>@dref_details_LogLevel</remarks>
        </member>
        <member name="F:Rti.Config.LogLevel.FatalError">
            <summary>
            The message describes a fatal error.
            </summary>
            <remarks>@dref_details_LogLevel_NDDS_CONFIG_LOG_LEVEL_FATAL_ERROR</remarks>
        </member>
        <member name="F:Rti.Config.LogLevel.Error">
            <summary>
            The message describes an error.
            </summary>
            <remarks>@dref_details_LogLevel_NDDS_CONFIG_LOG_LEVEL_ERROR</remarks>
        </member>
        <member name="F:Rti.Config.LogLevel.Warning">
            <summary>
            The message describes a warning.
            </summary>
            <remarks>@dref_details_LogLevel_NDDS_CONFIG_LOG_LEVEL_WARNING</remarks>
        </member>
        <member name="F:Rti.Config.LogLevel.StatusLocal">
            <summary>
            The message contains information about the lifecycles of local \ndds objects will be logged.
            </summary>
            <remarks>@dref_details_LogLevel_NDDS_CONFIG_LOG_LEVEL_STATUS_LOCAL</remarks>
        </member>
        <member name="F:Rti.Config.LogLevel.StatusRemote">
            <summary>
            The message contains information about the lifecycles of remote \ndds objects will be logged.
            </summary>
            <remarks>@dref_details_LogLevel_NDDS_CONFIG_LOG_LEVEL_STATUS_REMOTE</remarks>
        </member>
        <member name="F:Rti.Config.LogLevel.Debug">
            <summary>
            The message contains debug information that might be relevant to your application.
            </summary>
            <remarks>@dref_details_LogLevel_NDDS_CONFIG_LOG_LEVEL_DEBUG</remarks>
        </member>
        <member name="T:Rti.Config.Verbosity">
            <summary>
            The verbosity levels at which diagnostic information is logged
            </summary>
            <remarks>@dref_details_LogVerbosity</remarks>
        </member>
        <member name="F:Rti.Config.Verbosity.Silent">
            <summary>
            No output will be logged.
            </summary>
            <remarks>@dref_details_LogVerbosity_NDDS_CONFIG_LOG_VERBOSITY_SILENT</remarks>
        </member>
        <member name="F:Rti.Config.Verbosity.Error">
            <summary>
            Only error and fatal error messages will be logged.
            </summary>
            <remarks>@dref_details_LogVerbosity_NDDS_CONFIG_LOG_VERBOSITY_ERROR</remarks>
        </member>
        <member name="F:Rti.Config.Verbosity.Warning">
            <summary>
            Both error and warning messages will be logged.
            </summary>
            <remarks>@dref_details_LogVerbosity_NDDS_CONFIG_LOG_VERBOSITY_WARNING</remarks>
            <summary>
            Both error and warning messages will be logged.
            </summary>
            <remarks>@dref_details_LogVerbosity_NDDS_CONFIG_LOG_VERBOSITY_WARNING</remarks>
        </member>
        <member name="F:Rti.Config.Verbosity.StatusLocal">
            <summary>
            Errors, warnings, and verbose information about the lifecycles of local \ndds objects will be logged.
            </summary>
            <remarks>@dref_details_LogVerbosity_NDDS_CONFIG_LOG_VERBOSITY_STATUS_LOCAL</remarks>
        </member>
        <member name="F:Rti.Config.Verbosity.StatusRemote">
            <summary>
            Errors, warnings, and verbose information about the lifecycles of remote \ndds objects will be logged.
            </summary>
            <remarks>@dref_details_LogVerbosity_NDDS_CONFIG_LOG_VERBOSITY_STATUS_REMOTE</remarks>
        </member>
        <member name="F:Rti.Config.Verbosity.StatusAll">
            <summary>
            Errors, warnings, verbose information about the lifecycles of local and remote \ndds objects, and periodic information about \ndds threads will be logged.
            </summary>
            <remarks>@dref_details_LogVerbosity_NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL</remarks>
        </member>
        <member name="T:Rti.Config.LogCategory">
            <summary>
            Categories of log messages
            </summary>
            <remarks>@dref_details_LogCategory</remarks>
        </member>
        <member name="F:Rti.Config.LogCategory.Platform">
            <summary>
            Log messages pertaining to the underlying platform (hardware and OS) on which \ndds is running are in this category.
            </summary>
            <remarks>@dref_details_LogCategory_NDDS_CONFIG_LOG_CATEGORY_PLATFORM</remarks>
        </member>
        <member name="F:Rti.Config.LogCategory.Communication">
            <summary>
            Log messages pertaining to data serialization and deserialization and network traffic are in this category.
            </summary>
            <remarks>@dref_details_LogCategory_NDDS_CONFIG_LOG_CATEGORY_COMMUNICATION</remarks>
        </member>
        <member name="F:Rti.Config.LogCategory.Database">
            <summary>
            Log messages pertaining to the internal database in which \ndds objects are stored are in this category.
            </summary>
            <remarks>@dref_details_LogCategory_NDDS_CONFIG_LOG_CATEGORY_DATABASE</remarks>
        </member>
        <member name="F:Rti.Config.LogCategory.Entities">
            <summary>
            Log messages pertaining to local and remote entities and to the discovery process are in this category.
            </summary>
            <remarks>@dref_details_LogCategory_NDDS_CONFIG_LOG_CATEGORY_ENTITIES</remarks>
        </member>
        <member name="F:Rti.Config.LogCategory.Api">
            <summary>
            Log messages pertaining to the API layer of \ndds (such as argument validation) are in this category.
            </summary>
            <remarks>@dref_details_LogCategory_NDDS_CONFIG_LOG_CATEGORY_API</remarks>
        </member>
        <member name="F:Rti.Config.LogCategory.All">
            <summary>
            Log messages pertaining to all category of \ndds
            </summary>
            <remarks>@dref_details_LogCategory_NDDS_CONFIG_LOG_CATEGORY_ALL</remarks>
        </member>
        <member name="T:Rti.Config.LogPrintFormat">
            <summary>
            Configures the format to print diagnostic information
            </summary>
        </member>
        <member name="F:Rti.Config.LogPrintFormat.Default">
            <summary>
            Print message, method name, and activity context (what was happening when the event occurred).
            </summary>
            <remarks>@dref_details_LogPrintFormat_NDDS_CONFIG_LOG_PRINT_FORMAT_DEFAULT</remarks>
        </member>
        <member name="F:Rti.Config.LogPrintFormat.Timestamped">
            <summary>
            Print message, method name, activity context, and timestamp.
            </summary>
            <remarks>@dref_details_LogPrintFormat_NDDS_CONFIG_LOG_PRINT_FORMAT_TIMESTAMPED</remarks>
        </member>
        <member name="F:Rti.Config.LogPrintFormat.Verbose">
            <summary>
            Print message with all available context information
            </summary>
            <remarks>@dref_details_LogPrintFormat_NDDS_CONFIG_LOG_PRINT_FORMAT_VERBOSE</remarks>
        </member>
        <member name="F:Rti.Config.LogPrintFormat.VerboseTimestamped">
            <summary>
            Print message with all available context information, and timestamp.
            </summary>
            <remarks>@dref_details_LogPrintFormat_NDDS_CONFIG_LOG_PRINT_FORMAT_VERBOSE_TIMESTAMPED</remarks>
        </member>
        <member name="F:Rti.Config.LogPrintFormat.Debug">
            <summary>
            Print a set of fields (including the activity context and backtrace information) that may be useful for internal debugging.
            </summary>
            <remarks>@dref_details_LogPrintFormat_NDDS_CONFIG_LOG_PRINT_FORMAT_DEBUG</remarks>
        </member>
        <member name="F:Rti.Config.LogPrintFormat.Minimal">
            <summary>
            Print only message number and method name.
            </summary>
            <remarks>@dref_details_LogPrintFormat_NDDS_CONFIG_LOG_PRINT_FORMAT_MINIMAL</remarks>
        </member>
        <member name="F:Rti.Config.LogPrintFormat.Maximal">
            <summary>
            Print all available fields (including backtrace information).
            </summary>
            <remarks>@dref_details_LogPrintFormat_NDDS_CONFIG_LOG_PRINT_FORMAT_MAXIMAL</remarks>
        </member>
        <member name="T:Rti.Config.MessageLoggedEventHandler">
            <summary>
            Event handler for <see cref="E:Rti.Config.Logger.MessageLogged"/>.
            </summary>
        </member>
        <member name="T:Rti.Config.ProductVersion">
            <summary>
            Contains the version of the RTI Connext DDS and its different libraries.
            </summary>
            <remarks>
            In most cases, use <see cref="M:Rti.Config.ProductVersion.ToString"/> to display all the information.
            </remarks>
        </member>
        <member name="P:Rti.Config.ProductVersion.DotnetApiVersion">
            <summary>
            The version of the RTI Connext DDS .NET managed assembly
            </summary>
        </member>
        <member name="P:Rti.Config.ProductVersion.DotnetApiBuildId">
            <summary>
            A full identifier of the Rti.ConnextDds assembly
            </summary>
        </member>
        <member name="P:Rti.Config.ProductVersion.NativeBuildId">
            <summary>
            A full identifier of the native libraries.
            </summary>
        </member>
        <member name="P:Rti.Config.ProductVersion.NativeVersion">
            <summary>
            The version of the native RTI Connext DDS product
            </summary>
        </member>
        <member name="P:Rti.Config.ProductVersion.NativeCApiVersion">
            <summary>
            The version of the nddsc native assembly
            </summary>
        </member>
        <member name="P:Rti.Config.ProductVersion.NativeCoreVersion">
            <summary>
            The version of the nddscore native assembly
            </summary>
        </member>
        <member name="M:Rti.Config.ProductVersion.ToString">
            <summary>
            Combines the DotnetApiVersion and NativeBuildId into a single string
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.AsyncWaitSetProperty">
            <summary>
            Configures an AsyncWaitSet, which is also the object that manages a
            <see cref="T:Rti.Dds.Subscription.SampleProcessor"/>.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.AsyncWaitSetProperty.WaitsetProperty">
            <summary>
            Specifies the behavior of the asynchronous wait, which is equivalent to the wait mechanism of a <see cref="T:Rti.Dds.Core.WaitSet"/>.
            </summary>
            <remarks>@dref_details_AsyncWaitSetProperty_t_waitset_property</remarks>
        </member>
        <member name="P:Rti.Dds.Core.AsyncWaitSetProperty.ThreadPoolSize">
            <summary>
            Number of threads that conform the thread pool of the AsyncWaitSet.
            </summary>
            <remarks>@dref_details_AsyncWaitSetProperty_t_thread_pool_size</remarks>
        </member>
        <member name="P:Rti.Dds.Core.AsyncWaitSetProperty.ThreadSettings">
            <summary>
            Configures each thread in the thread pool
            </summary>
            <remarks>@dref_details_AsyncWaitSetProperty_t_thread_settings</remarks>
        </member>
        <member name="P:Rti.Dds.Core.AsyncWaitSetProperty.ThreadNamePrefix">
            <summary>
            Prefix used to composed the name of each thread.
            </summary>
            <remarks>@dref_details_AsyncWaitSetProperty_t_thread_name_prefix</remarks>
        </member>
        <member name="P:Rti.Dds.Core.AsyncWaitSetProperty.WaitTimeout">
            <summary>
            Asynchronous wait timeout.
            </summary>
            <remarks>@dref_details_AsyncWaitSetProperty_t_wait_timeout</remarks>
        </member>
        <member name="P:Rti.Dds.Core.AsyncWaitSetProperty.Level">
            <summary>
            Specifies the level of an AsyncWaitSet.
            </summary>
            <remarks>@dref_details_AsyncWaitSetProperty_t_level</remarks>
        </member>
        <member name="P:Rti.Dds.Core.AsyncWaitSetProperty.Default">
            <summary>Singleton containing the default value of a AsyncWaitSetProperty</summary>
        </member>
        <member name="M:Rti.Dds.Core.AsyncWaitSetProperty.With(System.Action{Rti.Dds.Core.AsyncWaitSetPropertyBuilder})">
            <summary>
            Creates a new AsyncWaitSetProperty with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this AsyncWaitSetProperty.
            </param>
            <returns>A new AsyncWaitSetProperty with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.AsyncWaitSetProperty.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.AsyncWaitSetProperty.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.AsyncWaitSetProperty.Equals(Rti.Dds.Core.AsyncWaitSetProperty)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.AsyncWaitSetPropertyBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.AsyncWaitSetProperty"/>
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.AsyncWaitSetPropertyBuilder.WaitsetProperty">
            <summary>
            Specifies the behavior of the asynchronous wait behavior, which is equivalent to the wait mechanism of a <see cref="T:Rti.Dds.Core.WaitSet"/>.
            </summary>
            <remarks>@dref_details_AsyncWaitSetProperty_t_waitset_property</remarks>
        </member>
        <member name="P:Rti.Dds.Core.AsyncWaitSetPropertyBuilder.ThreadPoolSize">
            <summary>
            Number of threads that conform the thread pool of the AsyncWaitSet.
            </summary>
            <remarks>@dref_details_AsyncWaitSetProperty_t_thread_pool_size</remarks>
        </member>
        <member name="P:Rti.Dds.Core.AsyncWaitSetPropertyBuilder.ThreadSettings">
            <summary>
            Configures each thread in the thread pool.
            </summary>
            <remarks>@dref_details_AsyncWaitSetProperty_t_thread_settings</remarks>
        </member>
        <member name="P:Rti.Dds.Core.AsyncWaitSetPropertyBuilder.ThreadNamePrefix">
            <summary>
            Prefix used to name the threads in the thread pool.
            </summary>
            <remarks>@dref_details_AsyncWaitSetProperty_t_thread_name_prefix</remarks>
        </member>
        <member name="P:Rti.Dds.Core.AsyncWaitSetPropertyBuilder.WaitTimeout">
            <summary>
            Asynchronous wait timeout.
            </summary>
            <remarks>@dref_details_AsyncWaitSetProperty_t_wait_timeout</remarks>
        </member>
        <member name="P:Rti.Dds.Core.AsyncWaitSetPropertyBuilder.Level">
            <summary>
            Specifies the level of an AsyncWaitSet.
            </summary>
            <remarks>@dref_details_AsyncWaitSetProperty_t_level</remarks>
        </member>
        <member name="M:Rti.Dds.Core.AsyncWaitSetPropertyBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.AsyncWaitSetProperty"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.CoherentSetInfo">
            <summary>
            Information about the coherent set a sample belongs to. Coherent sets
            are started with <see cref="M:Rti.Dds.Publication.Publisher.BeginCoherentChanges"/>.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.CoherentSetInfo.GroupGuid">
            <summary>
            The coherent set group GUID.
            </summary>
            <remarks>@dref_details_CoherentSetInfo_group_guid</remarks>
        </member>
        <member name="P:Rti.Dds.Core.CoherentSetInfo.CoherentSetSequenceNumber">
            <summary>
            Sequence number that identifies a sample as part of a writer coherent set.
            </summary>
            <remarks>@dref_details_CoherentSetInfo_coherent_set_sequence_number</remarks>
        </member>
        <member name="P:Rti.Dds.Core.CoherentSetInfo.GroupCoherentSetSequenceNumber">
            <summary>
            Sequence number that identifies a sample as part of a group coherent set.
            </summary>
            <remarks>@dref_details_CoherentSetInfo_group_coherent_set_sequence_number</remarks>
        </member>
        <member name="P:Rti.Dds.Core.CoherentSetInfo.IncompleteCoherentSet">
            <summary>
            Indicates if a sample is part of an incomplete coherent set.
            </summary>
            <remarks>@dref_details_CoherentSetInfo_incomplete_coherent_set</remarks>
        </member>
        <member name="M:Rti.Dds.Core.CoherentSetInfo.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.CoherentSetInfo.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.CoherentSetInfo.Equals(Rti.Dds.Core.CoherentSetInfo)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Condition">
            <summary>
            Base class for all the conditions that may be attached to a <see cref="T:Rti.Dds.Core.WaitSet"/>.
            </summary>
            <remarks>@dref_details_Condition</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Condition.TriggerValue">
            <summary>
            Retrieves the trigger value (whether this condition is active)
            </summary>
            <remarks>@dref_details_Condition_get_trigger_value</remarks>
        </member>
        <member name="T:Rti.Dds.Core.Condition.TriggeredEventHandler">
            <summary>
            The delegate type of the <see cref="E:Rti.Dds.Core.Condition.Triggered"/> event.
            </summary>
            <param name="condition">The triggered condition</param>
        </member>
        <member name="E:Rti.Dds.Core.Condition.Triggered">
            <summary>
            Event triggered in the context of <see cref="M:Rti.Dds.Core.WaitSet.Dispatch"/>
            when <see cref="P:Rti.Dds.Core.Condition.TriggerValue"/> becomes true.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Condition.ResetEvents">
            <summary>
            Removes all handlers for the <see cref="E:Rti.Dds.Core.Condition.Triggered"/> event.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.ContentFilterProperty">
            <summary>
            Type used to provide all the required information to enable content filtering.
            </summary>
            <remarks>@dref_details_ContentFilterProperty_t</remarks>
        </member>
        <member name="P:Rti.Dds.Core.ContentFilterProperty.ContentFilterTopicName">
            <summary>
            Name of the Content-filtered Topic associated with the Reader.
            </summary>
            <remarks>@dref_details_ContentFilterProperty_t_content_filter_topic_name</remarks>
        </member>
        <member name="P:Rti.Dds.Core.ContentFilterProperty.RelatedTopicName">
            <summary>
            Name of the Topic related to the Content-filtered Topic.
            </summary>
            <remarks>@dref_details_ContentFilterProperty_t_related_topic_name</remarks>
        </member>
        <member name="P:Rti.Dds.Core.ContentFilterProperty.FilterClassName">
            <summary>
            Identifies the filter class this filter belongs to. RTPS can support multiple filter classes (SQL, regular expressions, custom filters, etc).
            </summary>
            <remarks>@dref_details_ContentFilterProperty_t_filter_class_name</remarks>
        </member>
        <member name="P:Rti.Dds.Core.ContentFilterProperty.FilterExpression">
            <summary>
            The actual filter expression. Must be a valid expression for the filter class specified using filterClassName.
            </summary>
            <remarks>@dref_details_ContentFilterProperty_t_filter_expression</remarks>
        </member>
        <member name="P:Rti.Dds.Core.ContentFilterProperty.ExpressionParameters">
            <summary>
            Defines the value for each parameter in the filter expression.
            </summary>
            <remarks>@dref_details_ContentFilterProperty_t_expression_parameters</remarks>
        </member>
        <member name="M:Rti.Dds.Core.ContentFilterProperty.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.ContentFilterProperty.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.ContentFilterProperty.Equals(Rti.Dds.Core.ContentFilterProperty)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Cookie">
            <summary>
            Unique identifier for a written data sample in the form of a sequence of
            bytes.
            </summary>
            <remarks>@dref_details_Cookie_t</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Cookie.Value">
            <summary>
            A sequence of bytes.
            </summary>
            <remarks>@dref_details_Cookie_t_value</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Cookie.Empty">
            <summary>
            Creates a new empty Cookie instance.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Cookie.#ctor(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Creates a new Cookie instance with the bytes inside a container.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Cookie.#ctor(System.Collections.Immutable.ImmutableList{System.Byte})">
            <summary>
            Creates a Cookie with from a list of bytes.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Cookie.With(System.Action{System.Collections.Immutable.ImmutableList{System.Byte}.Builder})">
            <summary>
            Creates a new Cokie with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            list with the current values of this object's <see cref="P:Rti.Dds.Core.Cookie.Value"/>.
            </param>
            <returns>A new Cookie with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Cookie.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Cookie.Equals(System.Object)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Cookie.Equals(Rti.Dds.Core.Cookie)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Entity">
            <summary>
            Abstract base class for all the DDS objects that support QoS policies,
            status events, and a status condition.
            </summary>
            <remarks>@dref_details_Entity</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Entity.Enable">
            <summary>
            Enables this Entity (by default entities are automatically enabled
            after creation)
            </summary>
            <remarks>@dref_details_Entity_enable</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Entity.ResetEvents(Rti.Dds.Core.Status.StatusMask)">
            <summary>
            Stop notifying of events not selected in the newMask and remove
            their event handlers. The actual events are defined in each derived
            entity class.
            </summary>
            <param name="newMask">
            Selects which events will continue to receive notifications.
            Events not included in the status mask will no longer be notified.
            Use StatusMask.None to remove all event handlers.
            </param>
        </member>
        <member name="P:Rti.Dds.Core.Entity.InstanceHandle">
            <summary>
            Gets the <see cref="P:Rti.Dds.Core.Entity.InstanceHandle"/> that identifies this Entity
            </summary>
            <remarks>@dref_details_Entity_get_instance_handle</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Entity.StatusChanges">
            <summary>
            Retrieves the list of communication statuses in this Entity that are
            triggered.
            </summary>
            <remarks>@dref_details_Entity_get_status_changes</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Entity.StatusCondition">
            <summary>
            Gets the <see cref="P:Rti.Dds.Core.Entity.StatusCondition"/> associated with this Entity.
            </summary>
            <remarks>@dref_details_Entity_get_statuscondition</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Entity.Enabled">
            <summary>
            Indicates whether this Entity is enabled.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Entity.Lock">
            <summary>
            Locks the Entity using its internal lock.
            </summary>
            <remarks>@dref_details_Entity_lock</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Entity.Dispose">
            <summary>
            Releases the resources used by this Entity and disposes its contained
            entities as well (if any).
            </summary>
            <exception cref="T:Omg.Dds.Core.PreconditionNotMetException">
            When the entity cannot be disposed. For example, a topic cannot
            be disposed if a DataReader or a DataWriter is using it; a DataReader
            can't be disposed when a LoanedSamples returned by the DataReader is
            still in use.
            </exception>
        </member>
        <member name="P:Rti.Dds.Core.Entity.Disposed">
            <summary>
            Indicates whether this Entity has already been disposed.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.EntityLock">
            <summary>
            The lock used by an Entity to protect its operations. Obtained via
            <see cref="M:Rti.Dds.Core.Entity.Lock"/>.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.EntityLock.Dispose">
            <summary>
            Releases the lock.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.GuardCondition">
            <summary>
            A <see cref="T:Rti.Dds.Core.Condition"/> whose <see cref="P:Rti.Dds.Core.Condition.TriggerValue"/>
            is completely under the control of the application.
            </summary>
            <remarks>@dref_details_GuardCondition</remarks>
        </member>
        <member name="M:Rti.Dds.Core.GuardCondition.#ctor">
            <summary>
            Creates a new GuardCondition.
            </summary>
            <remarks>@dref_details_GuardCondition_new</remarks>
        </member>
        <member name="P:Rti.Dds.Core.GuardCondition.TriggerValue">
            <summary>
            Gets and sets the trigger value
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.GuardCondition.Dispose">
            <summary>
            Releases the native resources used by this object
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.GuardCondition.Disposed">
            <summary>
            Indicates whether this object has been disposed.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Guid">
            <summary>
            A global unique identifier.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Guid.#ctor(System.Byte[])">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Guid"/> from an array of 16 bytes.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Guid.Unknown">
            <summary>
            Special object representing an unknown <see cref="T:Rti.Dds.Core.Guid"/>.
            </summary>
            <remarks>@dref_details_GUID_t_UNKNOWN</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Guid.Auto">
            <summary>
            Special object that indicates certain methods that the actual <see cref="T:Rti.Dds.Core.Guid"/>.
            should be automatically determined.
            </summary>
            <remarks>@dref_details_GUID_t_AUTO</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Guid.CompareTo(Rti.Dds.Core.Guid)">
            <summary>
            Compares two objects.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Guid.Equals(Rti.Dds.Core.Guid)">
            <summary>
            Compares two objects for equality.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Guid.Equals(System.Object)">
            <summary>
            Compares two objects for equality.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Guid.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Guid.ToString">
            <summary>
            Converts to string.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Guid.ToInstanceHandle">
            <summary>
            Converts to <see cref="T:Rti.Dds.Core.InstanceHandle"/>.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Guid.ToArray">
            <summary>
            Converts this GUID to a byte array.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Guid.FromArray(System.Byte[])">
            <summary>
            Creates a Guid from the bytes in a 16-byte array
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Guid.FromInstanceHandle(Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Guid"/> from an <see cref="T:Rti.Dds.Core.InstanceHandle"/>.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.InstanceHandle">
            <summary>
            Handle to identity different instances of the same <see cref="T:Rti.Dds.Topics.Topic`1"/>
            of a certain type.
            </summary>
            <remarks>@dref_details_InstanceHandle_t</remarks>
        </member>
        <member name="P:Rti.Dds.Core.InstanceHandle.Nil">
            <summary>
            The NIL instance handle.
            </summary>
            <remarks>@dref_details_InstanceHandle_t_NIL</remarks>
        </member>
        <member name="M:Rti.Dds.Core.InstanceHandle.IsNil">
            <summary>
            Compare this handle to <see cref="P:Rti.Dds.Core.InstanceHandle.Nil"/>
            </summary>
            <remarks>@dref_details_InstanceHandle_t_is_nil</remarks>
        </member>
        <member name="M:Rti.Dds.Core.InstanceHandle.Equals(Rti.Dds.Core.InstanceHandle)">
            <summary>
            Compares this instance handle with another handle for equality.
            </summary>
            <remarks>@dref_details_InstanceHandle_t_equals</remarks>
        </member>
        <member name="M:Rti.Dds.Core.InstanceHandle.CompareTo(Rti.Dds.Core.InstanceHandle)">
            <summary>
            Compares this instance handle with another handle.
            </summary>
            <remarks>@dref_details_InstanceHandle_t_compare</remarks>
        </member>
        <member name="M:Rti.Dds.Core.InstanceHandle.Equals(System.Object)">
            <summary>
            Compares this instance handle with another handle for equality.
            </summary>
            <remarks>@dref_details_InstanceHandle_t_equals</remarks>
        </member>
        <member name="M:Rti.Dds.Core.InstanceHandle.GetHashCode">
            <summary>
            Generates a hash code from this InstanceHandle.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.InstanceHandle.ToString">
            <summary>
            Returns a string representation of this InstanceHandle
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.InstanceHandle.ToArray">
            <summary>
            Converts this instance handle to a byte array.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.InstanceHandle.FromArray(System.Byte[])">
            <summary>
            Creates a non-Nil InstanceHandle from the bytes in a 16-byte array
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Locator">
            <summary>
            Type used to represent the addressing information needed to send a
            message to an RTPS Endpoint using one of the supported transports.
            </summary>
            <remarks>@dref_details_Locator_t</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Locator.LocatorInvalid">
            <summary>
            An invalid locator.
            </summary>
            <remarks>@dref_details_Locator_t_INVALID</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Locator.InvalidKind">
            <summary>
            Locator of this kind is invalid.
            </summary>
            <remarks>@dref_details_Locator_t_KIND_INVALID</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Locator.InvalidPort">
            <summary>
            An invalid port.
            </summary>
            <remarks>@dref_details_Locator_t_PORT_INVALID</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Locator.InvalidAddress">
            <summary>
            An invalid address.
            </summary>
            <remarks>@dref_details_Locator_t_ADDRESS_INVALID</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Locator.UdPv4Kind">
            <summary>
            A locator for a UDPv4 address.
            </summary>
            <remarks>@dref_details_Locator_t_KIND_UDPv4</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Locator.UdPv4WanKind">
            <summary>
            A locator for a UDPv4 WAN address.
            </summary>
            <remarks>@dref_details_Locator_t_KIND_UDPv4_WAN</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Locator.ShmemKind">
            <summary>
            A locator for an address accessed via shared memory.
            </summary>
            <remarks>@dref_details_Locator_t_KIND_SHMEM</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Locator.Shmem510Kind">
            <summary>
            A locator for an address accessed via shared memory for RTI Connext 5.1.0 and earlier.
            </summary>
            <remarks>@dref_details_Locator_t_KIND_SHMEM_510</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Locator.UdPv6Kind">
            <summary>
            A locator for a UDPv6 address.
            </summary>
            <remarks>@dref_details_Locator_t_KIND_UDPv6</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Locator.UdPv6510Kind">
            <summary>
            A locator for a UDPv6 address for RTI Connext 5.1.0 and earlier.
            </summary>
            <remarks>@dref_details_Locator_t_KIND_UDPv6_510</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Locator.ReservedKind">
            <summary>
            Locator of this kind is reserved.
            </summary>
            <remarks>@dref_details_Locator_t_KIND_RESERVED</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Locator.Kind">
            <summary>
            The kind of locator.
            </summary>
            <remarks>@dref_details_Locator_t_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Locator.Port">
            <summary>
            The port number.
            </summary>
            <remarks>@dref_details_Locator_t_port</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Locator.Address">
            <summary>
            The IP address.
            </summary>
            <remarks>@dref_details_Locator_t_address</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Locator.Encapsulations">
            <summary>
            Supported encapsulation formats
            </summary>
            <remarks>@dref_details_Locator_t_encapsulations</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Locator.Default">
            <summary>Singleton containing the default value of a Locator</summary>
        </member>
        <member name="M:Rti.Dds.Core.Locator.With(System.Action{Rti.Dds.Core.LocatorBuilder})">
            <summary>
            Creates a new Locator with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this Locator.
            </param>
            <returns>A new Locator with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Locator.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Locator.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Locator.Equals(Rti.Dds.Core.Locator)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.LocatorBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Locator"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.LocatorBuilder.#ctor(Rti.Dds.Core.Locator)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.LocatorBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.LocatorBuilder.Kind">
            <summary>
            The kind of locator.
            </summary>
            <remarks>@dref_details_Locator_t_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.LocatorBuilder.Port">
            <summary>
            the port number
            </summary>
            <remarks>@dref_details_Locator_t_port</remarks>
        </member>
        <member name="P:Rti.Dds.Core.LocatorBuilder.Address">
            <summary>
            The IP address.
            </summary>
            <remarks>@dref_details_Locator_t_address</remarks>
        </member>
        <member name="P:Rti.Dds.Core.LocatorBuilder.Encapsulations">
            <summary>
            Supported encapsulation formats
            </summary>
            <remarks>@dref_details_Locator_t_encapsulations</remarks>
        </member>
        <member name="M:Rti.Dds.Core.LocatorBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Locator"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.AllocationSettings">
            <summary>
            Configures the allocation policy of a resource.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.AllocationSettings.Unlimited">
            <summary>
            Special value for <see cref="P:Rti.Dds.Core.Policy.AllocationSettings.MaxCount"/> indicating no upper limit.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.AllocationSettings.Automatic">
            <summary>
            Special value for <see cref="P:Rti.Dds.Core.Policy.AllocationSettings.InitialCount"/>, <see cref="P:Rti.Dds.Core.Policy.AllocationSettings.MaxCount"/>,
            or <see cref="P:Rti.Dds.Core.Policy.AllocationSettings.IncrementalCount"/> indicating that the actual value
            will be automatically determined.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.AllocationSettings.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.AllocationSettings"/>
            </summary>
            <param name="initial">The value for <see cref="P:Rti.Dds.Core.Policy.AllocationSettings.InitialCount"/></param>
            <param name="max">The value for <see cref="P:Rti.Dds.Core.Policy.AllocationSettings.MaxCount"/></param>
            <param name="incremental">The value for <see cref="P:Rti.Dds.Core.Policy.AllocationSettings.IncrementalCount"/></param>
        </member>
        <member name="P:Rti.Dds.Core.Policy.AllocationSettings.InitialCount">
            <summary>
            The initial count of resources.
            </summary>
            <remarks>@dref_details_AllocationSettings_t_initial_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.AllocationSettings.MaxCount">
            <summary>
            The maximum count of resources.
            </summary>
            <remarks>@dref_details_AllocationSettings_t_max_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.AllocationSettings.IncrementalCount">
            <summary>
            The incremental count of resources.
            </summary>
            <remarks>@dref_details_AllocationSettings_t_incremental_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.AllocationSettings.Default">
            <summary>Singleton containing the default value of a AllocationSettings</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.AllocationSettings.With(System.Action{Rti.Dds.Core.Policy.AllocationSettingsBuilder})">
            <summary>
            Creates a new AllocationSettings with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the values of this AllocationSettings.
            </param>
            <returns>A new AllocationSettings with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.AllocationSettings.Equals(System.Object)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.AllocationSettings.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.AllocationSettings.Equals(Rti.Dds.Core.Policy.AllocationSettings)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.AllocationSettingsBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.AllocationSettings"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.AllocationSettingsBuilder.#ctor(Rti.Dds.Core.Policy.AllocationSettings)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.AllocationSettingsBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.AllocationSettingsBuilder.InitialCount">
            <summary>
            Gets the value of InitialCount
            </summary>
            <remarks>@dref_details_AllocationSettings_t_initial_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.AllocationSettingsBuilder.MaxCount">
            <summary>
            Gets the value of MaxCount
            </summary>
            <remarks>@dref_details_AllocationSettings_t_max_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.AllocationSettingsBuilder.IncrementalCount">
            <summary>
            Gets the value of IncrementalCount
            </summary>
            <remarks>@dref_details_AllocationSettings_t_incremental_count</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.AllocationSettingsBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.AllocationSettings"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.AsynchronousPublisher">
            <summary>
            Configures the mechanism that sends user data in an external middleware thread.
            </summary>
            <remarks>@dref_details_AsynchronousPublisherQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.AsynchronousPublisher.DisableAsynchronousWrite">
            <summary>
            Disable asynchronous publishing.
            </summary>
            <remarks>@dref_details_AsynchronousPublisherQosPolicy_disable_asynchronous_write</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.AsynchronousPublisher.Thread">
            <summary>
            Settings of the publishing thread.
            </summary>
            <remarks>@dref_details_AsynchronousPublisherQosPolicy_thread</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.AsynchronousPublisher.DisableAsynchronousBatch">
            <summary>
            Disable asynchronous batch flushing.
            </summary>
            <remarks>@dref_details_AsynchronousPublisherQosPolicy_disable_asynchronous_batch</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.AsynchronousPublisher.AsynchronousBatchThread">
            <summary>
            Settings of the batch flushing thread.
            </summary>
            <remarks>@dref_details_AsynchronousPublisherQosPolicy_asynchronous_batch_thread</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.AsynchronousPublisher.DisableTopicQueryPublication">
            <summary>
            Disable topic query publication.
            </summary>
            <remarks>@dref_details_AsynchronousPublisherQosPolicy_disable_topic_query_publication</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.AsynchronousPublisher.TopicQueryPublicationThread">
            <summary>
            Settings of the <see cref="T:Rti.Dds.Subscription.TopicQuery"/> publication thread.
            </summary>
            <remarks>@dref_details_AsynchronousPublisherQosPolicy_topic_query_publication_thread</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.AsynchronousPublisher.Default">
            <summary>Singleton containing the default value of a AsynchronousPublisher</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.AsynchronousPublisher.With(System.Action{Rti.Dds.Core.Policy.AsynchronousPublisherBuilder})">
            <summary>
            Creates a new AsynchronousPublisher with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this AsynchronousPublisher.
            </param>
            <returns>A new AsynchronousPublisher with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.AsynchronousPublisher.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.AsynchronousPublisher.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.AsynchronousPublisher.Equals(Rti.Dds.Core.Policy.AsynchronousPublisher)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.AsynchronousPublisherBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.AsynchronousPublisher"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.AsynchronousPublisherBuilder.#ctor(Rti.Dds.Core.Policy.AsynchronousPublisher)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.AsynchronousPublisherBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.AsynchronousPublisherBuilder.DisableAsynchronousWrite">
            <summary>
            Disable asynchronous publishing.
            </summary>
            <remarks>@dref_details_AsynchronousPublisherQosPolicy_disable_asynchronous_write</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.AsynchronousPublisherBuilder.Thread">
            <summary>
            Settings of the publishing thread.
            </summary>
            <remarks>@dref_details_AsynchronousPublisherQosPolicy_thread</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.AsynchronousPublisherBuilder.DisableAsynchronousBatch">
            <summary>
            Disable asynchronous batch flushing.
            </summary>
            <remarks>@dref_details_AsynchronousPublisherQosPolicy_disable_asynchronous_batch</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.AsynchronousPublisherBuilder.AsynchronousBatchThread">
            <summary>
            Settings of the batch flushing thread.
            </summary>
            <remarks>@dref_details_AsynchronousPublisherQosPolicy_asynchronous_batch_thread</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.AsynchronousPublisherBuilder.DisableTopicQueryPublication">
            <summary>
            Disable topic query publication.
            </summary>
            <remarks>@dref_details_AsynchronousPublisherQosPolicy_disable_topic_query_publication</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.AsynchronousPublisherBuilder.TopicQueryPublicationThread">
            <summary>
            Settings of the <see cref="T:Rti.Dds.Subscription.TopicQuery"/> publication thread.
            </summary>
            <remarks>@dref_details_AsynchronousPublisherQosPolicy_topic_query_publication_thread</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.AsynchronousPublisherBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.AsynchronousPublisher"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.Availability">
            <summary>
            configures the availability of data.
            </summary>
            <remarks>@dref_details_AvailabilityQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Availability.EnableRequiredSubscriptions">
            <summary>
            Enables support for required subscriptions in a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>
            </summary>
            <remarks>@dref_details_AvailabilityQosPolicy_enable_required_subscriptions</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Availability.MaxDataAvailabilityWaitingTime">
            <summary>
            Defines how much time to wait before delivering a sample to the application without having received some of the previous samples.
            </summary>
            <remarks>@dref_details_AvailabilityQosPolicy_max_data_availability_waiting_time</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Availability.MaxEndpointAvailabilityWaitingTime">
            <summary>
            Defines how much time to wait to discover DataWriters providing samples for the same data source (virtual GUID).
            </summary>
            <remarks>@dref_details_AvailabilityQosPolicy_max_endpoint_availability_waiting_time</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Availability.RequiredMatchedEndpointGroups">
            <summary>
            A sequence of endpoint groups.
            </summary>
            <remarks>@dref_details_AvailabilityQosPolicy_required_matched_endpoint_groups</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Availability.Default">
            <summary>Singleton containing the default value of a Availability</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Availability.With(System.Action{Rti.Dds.Core.Policy.AvailabilityBuilder})">
            <summary>
            Creates a new Availability with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this Availability.
            </param>
            <returns>A new Availability with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Availability.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Availability.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Availability.Equals(Rti.Dds.Core.Policy.Availability)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.AvailabilityBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.Availability"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.AvailabilityBuilder.#ctor(Rti.Dds.Core.Policy.Availability)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.AvailabilityBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.AvailabilityBuilder.EnableRequiredSubscriptions">
            <summary>
            Enables support for required subscriptions in a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>
            </summary>
            <remarks>@dref_details_AvailabilityQosPolicy_enable_required_subscriptions</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.AvailabilityBuilder.MaxDataAvailabilityWaitingTime">
            <summary>
            Defines how much time to wait before delivering a sample to the application without having received some of the previous samples.
            </summary>
            <remarks>@dref_details_AvailabilityQosPolicy_max_data_availability_waiting_time</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.AvailabilityBuilder.MaxEndpointAvailabilityWaitingTime">
            <summary>
            Defines how much time to wait to discover DataWriters providing samples for the same data source (virtual GUID).
            </summary>
            <remarks>@dref_details_AvailabilityQosPolicy_max_endpoint_availability_waiting_time</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.AvailabilityBuilder.RequiredMatchedEndpointGroups">
            <summary>
            A sequence of endpoint groups.
            </summary>
            <remarks>@dref_details_AvailabilityQosPolicy_required_matched_endpoint_groups</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.AvailabilityBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.Availability"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.Batch">
            <summary>
            Configures mechanism for collecting multiple data samples to be sent in a single network packet.
            </summary>
            <remarks>@dref_details_BatchQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Batch.Enable">
            <summary>
            Specifies whether or not batching is enabled.
            </summary>
            <remarks>@dref_details_BatchQosPolicy_enable</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Batch.MaxDataBytes">
            <summary>
            The maximum cumulative length of all serialized samples in a batch.
            </summary>
            <remarks>@dref_details_BatchQosPolicy_max_data_bytes</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Batch.MaxMetaDataBytes">
            <summary>
            The maximum cumulative length of all serialized samples in a batch.
            </summary>
            <remarks>@dref_details_BatchQosPolicy_max_data_bytes</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Batch.MaxSamples">
            <summary>
            The maximum number of samples in a batch.
            </summary>
            <remarks>@dref_details_BatchQosPolicy_max_samples</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Batch.MaxFlushDelay">
            <summary>
            The maximum flush delay.
            </summary>
            <remarks>@dref_details_BatchQosPolicy_max_flush_delay</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Batch.SourceTimestampResolution">
            <summary>
            Batch source timestamp resolution.
            </summary>
            <remarks>@dref_details_BatchQosPolicy_source_timestamp_resolution</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Batch.ThreadSafeWrite">
            <summary>
            Determines whether or not the write operation is thread safe.
            </summary>
            <remarks>@dref_details_BatchQosPolicy_thread_safe_write</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Batch.Default">
            <summary>Singleton containing the default value of a Batch</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Batch.With(System.Action{Rti.Dds.Core.Policy.BatchBuilder})">
            <summary>
            Creates a new Batch with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this Batch.
            </param>
            <returns>A new Batch with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Batch.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Batch.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Batch.Equals(Rti.Dds.Core.Policy.Batch)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.BatchBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.Batch"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.BatchBuilder.#ctor(Rti.Dds.Core.Policy.Batch)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.BatchBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BatchBuilder.Enable">
            <summary>
            Specifies whether or not batching is enabled.
            </summary>
            <remarks>@dref_details_BatchQosPolicy_enable</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BatchBuilder.MaxDataBytes">
            <summary>
            The maximum cumulative length of all serialized samples in a batch.
            </summary>
            <remarks>@dref_details_BatchQosPolicy_max_data_bytes</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BatchBuilder.MaxMetaDataBytes">
            <summary>
            The maximum cumulative length of all serialized samples in a batch.
            </summary>
            <remarks>@dref_details_BatchQosPolicy_max_data_bytes</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BatchBuilder.MaxSamples">
            <summary>
            The maximum number of samples in a batch.
            </summary>
            <remarks>@dref_details_BatchQosPolicy_max_samples</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BatchBuilder.MaxFlushDelay">
            <summary>
            The maximum flush delay.
            </summary>
            <remarks>@dref_details_BatchQosPolicy_max_flush_delay</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BatchBuilder.SourceTimestampResolution">
            <summary>
            Batch source timestamp resolution.
            </summary>
            <remarks>@dref_details_BatchQosPolicy_source_timestamp_resolution</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BatchBuilder.ThreadSafeWrite">
            <summary>
            Determines whether or not the write operation is thread safe.
            </summary>
            <remarks>@dref_details_BatchQosPolicy_thread_safe_write</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.BatchBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.Batch"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimits">
            <summary>
            Built-in topic reader's resource limits.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimits.InitialSamples">
            <summary>
            Initial number of samples.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_initial_samples</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimits.MaxSamples">
            <summary>
            Maximum number of samples.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_max_samples</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimits.InitialInfos">
            <summary>
            Initial number of sample infos.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_initial_infos</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimits.MaxInfos">
            <summary>
            Maximum number of sample infos.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_max_infos</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimits.InitialOutstandingReads">
            <summary>
            The initial number of outstanding reads that have not call finish yet on the same built-in topic <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_initial_outstanding_reads</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimits.MaxOutstandingReads">
            <summary>
            The maximum number of outstanding reads that have not called finish yet on the same built-in topic <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_max_outstanding_reads</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimits.MaxSamplesPerRead">
            <summary>
            Maximum number of samples that can be read/taken on a same built-in topic <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_max_samples_per_read</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimits.DisableFragmentationSupport">
            <summary>
            Determines whether the built-in topic <see cref="T:Rti.Dds.Subscription.DataReader`1"/> can receive fragmented samples.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_disable_fragmentation_support</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimits.MaxFragmentedSamples">
            <summary>
            The maximum number of samples for which the built-in topic <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may store fragments at a given point in time.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_max_fragmented_samples</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimits.InitialFragmentedSamples">
            <summary>
            The initial number of samples for which a built-in topic <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may store fragments.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_initial_fragmented_samples</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimits.MaxFragmentedSamplesPerRemoteWriter">
            <summary>
            The maximum number of samples per remote writer for which a built-in topic <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may store fragments.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_max_fragmented_samples_per_remote_writer</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimits.MaxFragmentsPerSample">
            <summary>
            Maximum number of fragments for a single sample.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_max_fragments_per_sample</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimits.DynamicallyAllocateFragmentedSamples">
            <summary>
            Determines whether the built-in topic <see cref="T:Rti.Dds.Subscription.DataReader`1"/> pre-allocates storage for storing fragmented samples.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_dynamically_allocate_fragmented_samples</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimits.Default">
            <summary>Singleton containing the default value of a BuiltinTopicReaderResourceLimits</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimits.With(System.Action{Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimitsBuilder})">
            <summary>
            Creates a new BuiltinTopicReaderResourceLimits with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this BuiltinTopicReaderResourceLimits.
            </param>
            <returns>A new BuiltinTopicReaderResourceLimits with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimits.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimits.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimits.Equals(Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimits)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimitsBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimits"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimitsBuilder.#ctor(Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimits)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimitsBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimitsBuilder.InitialSamples">
            <summary>
            Initial number of samples.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_initial_samples</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimitsBuilder.MaxSamples">
            <summary>
            Maximum number of samples.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_max_samples</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimitsBuilder.InitialInfos">
            <summary>
            Initial number of sample infos.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_initial_infos</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimitsBuilder.MaxInfos">
            <summary>
            Maximum number of sample infos.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_max_infos</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimitsBuilder.InitialOutstandingReads">
            <summary>
            The initial number of outstanding reads that have not call finish yet on the same built-in topic <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_initial_outstanding_reads</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimitsBuilder.MaxOutstandingReads">
            <summary>
            The maximum number of outstanding reads that have not called finish yet on the same built-in topic <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_max_outstanding_reads</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimitsBuilder.MaxSamplesPerRead">
            <summary>
            Maximum number of samples that can be read/taken on a same built-in topic <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_max_samples_per_read</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimitsBuilder.DisableFragmentationSupport">
            <summary>
            Determines whether the built-in topic <see cref="T:Rti.Dds.Subscription.DataReader`1"/> can receive fragmented samples.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_disable_fragmentation_support</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimitsBuilder.MaxFragmentedSamples">
            <summary>
            The maximum number of samples for which the built-in topic <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may store fragments at a given point in time.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_max_fragmented_samples</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimitsBuilder.InitialFragmentedSamples">
            <summary>
            The initial number of samples for which a built-in topic <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may store fragments.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_initial_fragmented_samples</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimitsBuilder.MaxFragmentedSamplesPerRemoteWriter">
            <summary>
            The maximum number of samples per remote writer for which a built-in topic <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may store fragments.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_max_fragmented_samples_per_remote_writer</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimitsBuilder.MaxFragmentsPerSample">
            <summary>
            Maximum number of fragments for a single sample.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_max_fragments_per_sample</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimitsBuilder.DynamicallyAllocateFragmentedSamples">
            <summary>
            Determines whether the built-in topic <see cref="T:Rti.Dds.Subscription.DataReader`1"/> pre-allocates storage for storing fragmented samples.
            </summary>
            <remarks>@dref_details_BuiltinTopicReaderResourceLimits_t_dynamically_allocate_fragmented_samples</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimitsBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.BuiltinTopicReaderResourceLimits"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.ChannelSettings">
            <summary>
            Configures the properties of a channel in <see cref="T:Rti.Dds.Core.Policy.MultiChannel"/>.
            </summary>
            <remarks>@dref_details_ChannelSettings_t</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ChannelSettings.MulticastSettings">
            <summary>
            A sequence of <see cref="T:Rti.Dds.Core.Policy.TransportMulticastSettings"/> used to configure the multicast addresses associated with a channel.
            </summary>
            <remarks>@dref_details_ChannelSettings_t_multicast_settings</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ChannelSettings.FilterExpression">
            <summary>
            A logical expression used to determine the data that will be published in the channel.
            </summary>
            <remarks>@dref_details_ChannelSettings_t_filter_expression</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ChannelSettings.Priority">
            <summary>
            Publication priority
            </summary>
            <remarks>
            <para>
            @see <see cref="T:Rti.Dds.Core.Priority"/> for special values
            </para>
            <para>
            @dref_details_ChannelSettings_t_priority
            </para>
            </remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ChannelSettings.Default">
            <summary>Singleton containing the default value of a ChannelSettings</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ChannelSettings.With(System.Action{Rti.Dds.Core.Policy.ChannelSettingsBuilder})">
            <summary>
            Creates a new ChannelSettings with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this ChannelSettings.
            </param>
            <returns>A new ChannelSettings with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ChannelSettings.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ChannelSettings.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ChannelSettings.Equals(Rti.Dds.Core.Policy.ChannelSettings)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.ChannelSettingsBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.ChannelSettings"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ChannelSettingsBuilder.#ctor(Rti.Dds.Core.Policy.ChannelSettings)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ChannelSettingsBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ChannelSettingsBuilder.MulticastSettings">
            <summary>
            A sequence of <see cref="T:Rti.Dds.Core.Policy.TransportMulticastSettings"/> used to configure the multicast addresses associated with a channel.
            </summary>
            <remarks>@dref_details_ChannelSettings_t_multicast_settings</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ChannelSettingsBuilder.FilterExpression">
            <summary>
            A logical expression used to determine the data that will be published in the channel.
            </summary>
            <remarks>@dref_details_ChannelSettings_t_filter_expression</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ChannelSettingsBuilder.Priority">
            <summary>
            Publication priority
            </summary>
            <remarks>
            <para>
            @see <see cref="T:Rti.Dds.Core.Priority"/> for special values
            </para>
            <para>
            @dref_details_ChannelSettings_t_priority
            </para>
            </remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ChannelSettingsBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.ChannelSettings"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.CompressionSettings">
            <summary>
            @extension Configures data compression
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.CompressionSettings.BestCompressionLevel">
            <summary>
            Specifies the <see cref="P:Rti.Dds.Core.Policy.CompressionSettings.WriterCompressionLevel"/> with the best
            compression possible for a compression algorithm.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.CompressionSettings.BestSpeedCompressionLevel">
            <summary>
            Specifies the <see cref="P:Rti.Dds.Core.Policy.CompressionSettings.WriterCompressionLevel"/> with the best
            speed possible for a compression algorithm.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.CompressionSettings.DefaultCompressionLevel">
            <summary>
            The default <see cref="P:Rti.Dds.Core.Policy.CompressionSettings.WriterCompressionLevel"/>.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.CompressionSettings.DefaultCompressionThreshold">
            <summary>
            The default <see cref="P:Rti.Dds.Core.Policy.CompressionSettings.WriterCompressionThreshold"/>.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.CompressionSettings.CompressionIds">
            <summary>
            @extension Mask that represents the compression algorithms enabled.
            </summary>
            <remarks>@dref_details_CompressionSettings_t_compression_ids</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.CompressionSettings.WriterCompressionLevel">
            <summary>
            @extension The level of compression to use when compressing data.
            </summary>
            <remarks>@dref_details_CompressionSettings_t_writer_compression_level</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.CompressionSettings.WriterCompressionThreshold">
            <summary>
            @extension The threshold, in bytes, above which a serialized sample will be eligible to be compressed.
            </summary>
            <remarks>@dref_details_CompressionSettings_t_writer_compression_threshold</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.CompressionSettings.Default">
            <summary>Singleton containing the default value of a CompressionSettings</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.CompressionSettings.With(System.Action{Rti.Dds.Core.Policy.CompressionSettingsBuilder})">
            <summary>
            Creates a new CompressionSettings with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this CompressionSettings.
            </param>
            <returns>A new CompressionSettings with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.CompressionSettings.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.CompressionSettings.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.CompressionSettings.Equals(Rti.Dds.Core.Policy.CompressionSettings)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.CompressionSettingsBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.CompressionSettings"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.CompressionSettingsBuilder.#ctor(Rti.Dds.Core.Policy.CompressionSettings)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.CompressionSettingsBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.CompressionSettingsBuilder.CompressionIds">
            <summary>
            @extension Mask that represents the compression algorithms enabled.
            </summary>
            <remarks>@dref_details_CompressionSettings_t_compression_ids</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.CompressionSettingsBuilder.WriterCompressionLevel">
            <summary>
            @extension The level of compression to use when compressing data.
            </summary>
            <remarks>@dref_details_CompressionSettings_t_writer_compression_level</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.CompressionSettingsBuilder.WriterCompressionThreshold">
            <summary>
            @extension The threshold, in bytes, above which a serialized sample will be eligible to be compressed.
            </summary>
            <remarks>@dref_details_CompressionSettings_t_writer_compression_threshold</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.CompressionSettingsBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.CompressionSettings"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.CompressionId">
            <summary>
            A mask identifying compression algorithms to enable.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.CompressionId.None">
            <summary>
            Disables user-data compression
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.CompressionId.PublicationDefault">
            <summary>
            Mask that contains the default compression algorithms enabled for
            a publication
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.CompressionId.Zlib">
            <summary>
            Selects the ZLIB compression algorithm
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.CompressionId.Bzip2">
            <summary>
            Selects the BZIP2 compression algorithm
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.CompressionId.Lz4">
            <summary>
            Selects the LZ4 compression algorithm
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.CompressionId.SubscriptionDefault">
            <summary>
            Mask that contains the default compression algorithms enabled for
            a subscription
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.CompressionId.All">
            <summary>
            Mask that enables all the supported built-in compression algorithms
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.Database">
            <summary>
            Configures various threads and resource limits used to control the internal database.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.Database.Thread">
            <summary>
            Database thread settings.
            </summary>
            <remarks>@dref_details_DatabaseQosPolicy_thread</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.Database.ShutdownTimeout">
            <summary>
            The maximum wait time during a shutdown.
            </summary>
            <remarks>@dref_details_DatabaseQosPolicy_shutdown_timeout</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.Database.CleanupPeriod">
            <summary>
            The database thread will wake up at this rate to clean up the database.
            </summary>
            <remarks>@dref_details_DatabaseQosPolicy_cleanup_period</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.Database.ShutdownCleanupPeriod">
            <summary>
            The clean-up period used during database shut-down.
            </summary>
            <remarks>@dref_details_DatabaseQosPolicy_shutdown_cleanup_period</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.Database.InitialRecords">
            <summary>
            The initial number of total records.
            </summary>
            <remarks>@dref_details_DatabaseQosPolicy_initial_records</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.Database.MaxSkiplistLevel">
            <summary>
            The maximum level of the skiplist.
            </summary>
            <remarks>@dref_details_DatabaseQosPolicy_max_skiplist_level</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.Database.TableAllocationBlockSize">
            <summary>
            Initial size of the "table of tables" of the \ndds database.
            </summary>
            <remarks>@dref_details_DatabaseQosPolicy_table_allocation_block_size</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.Database.MaxWeakReferences">
            <summary>
            The maximum number of weak references.
            </summary>
            <remarks>@dref_details_DatabaseQosPolicy_max_weak_references</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.Database.InitialWeakReferences">
            <summary>
            The initial number of weak references.
            </summary>
            <remarks>@dref_details_DatabaseQosPolicy_initial_weak_references</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Database.Default">
            <summary>Singleton containing the default value of a Database</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Database.With(System.Action{Rti.Dds.Core.Policy.DatabaseBuilder})">
            <summary>
            Creates a new Database with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this Database.
            </param>
            <returns>A new Database with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Database.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Database.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Database.Equals(Rti.Dds.Core.Policy.Database)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.DatabaseBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.Database"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DatabaseBuilder.#ctor(Rti.Dds.Core.Policy.Database)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DatabaseBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DatabaseBuilder.Thread">
            <summary>
            Database thread settings.
            </summary>
            <remarks>@dref_details_DatabaseQosPolicy_thread</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DatabaseBuilder.ShutdownTimeout">
            <summary>
            The maximum wait time during a shutdown.
            </summary>
            <remarks>@dref_details_DatabaseQosPolicy_shutdown_timeout</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DatabaseBuilder.CleanupPeriod">
            <summary>
            The database thread will wake up at this rate to clean up the database.
            </summary>
            <remarks>@dref_details_DatabaseQosPolicy_cleanup_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DatabaseBuilder.ShutdownCleanupPeriod">
            <summary>
            The clean-up period used during database shut-down.
            </summary>
            <remarks>@dref_details_DatabaseQosPolicy_shutdown_cleanup_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DatabaseBuilder.InitialRecords">
            <summary>
            The initial number of total records.
            </summary>
            <remarks>@dref_details_DatabaseQosPolicy_initial_records</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DatabaseBuilder.MaxSkiplistLevel">
            <summary>
            The maximum level of the skiplist.
            </summary>
            <remarks>@dref_details_DatabaseQosPolicy_max_skiplist_level</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DatabaseBuilder.TableAllocationBlockSize">
            <summary>
            Initial size of the "table of tables" of the \ndds database.
            </summary>
            <remarks>@dref_details_DatabaseQosPolicy_table_allocation_block_size</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DatabaseBuilder.MaxWeakReferences">
            <summary>
            The maximum number of weak references.
            </summary>
            <remarks>@dref_details_DatabaseQosPolicy_max_weak_references</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DatabaseBuilder.InitialWeakReferences">
            <summary>
            The initial number of weak references.
            </summary>
            <remarks>@dref_details_DatabaseQosPolicy_initial_weak_references</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DatabaseBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.Database"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.DataReaderProtocol">
            <summary>
            Configures <see cref="T:Rti.Dds.Subscription.DataReader`1"/>-specific aspects of the RTPS protocol.
            </summary>
            <remarks>@dref_details_DataReaderProtocolQosPolicy_virtual_guid</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderProtocol.VirtualGuid">
            <summary>
            The virtual GUID (Global Unique Identifier).
            </summary>
            <remarks>@dref_details_DataReaderProtocolQosPolicy_virtual_guid</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderProtocol.RtpsObjectId">
            <summary>
            The RTPS Object ID.
            </summary>
            <remarks>@dref_details_DataReaderProtocolQosPolicy_rtps_object_id</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderProtocol.ExpectsInlineQos">
            <summary>
            Specifies whether this DataReader expects inline QoS with every sample.
            </summary>
            <remarks>@dref_details_DataReaderProtocolQosPolicy_expects_inline_qos</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderProtocol.DisablePositiveAcks">
            <summary>
            Whether the reader sends positive acknowledgements to writers.
            </summary>
            <remarks>@dref_details_DataReaderProtocolQosPolicy_disable_positive_acks</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderProtocol.PropagateDisposeOfUnregisteredInstances">
            <summary>
            Indicates whether or not an instance can move to the <see cref="F:Omg.Dds.Subscription.InstanceState.NotAliveDisposed"/> state without being in the <see cref="F:Omg.Dds.Subscription.InstanceState.Alive"/> state.
            </summary>
            <remarks>@dref_details_DataReaderProtocolQosPolicy_propagate_dispose_of_unregistered_instances</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderProtocol.PropagateUnregisterOfDisposedInstances">
            <summary>
            Indicates whether or not an instance can move to the <see cref="F:Omg.Dds.Subscription.InstanceState.NotAliveNoWriters"/> state without being in the <see cref="F:Omg.Dds.Subscription.InstanceState.Alive"/> state.
            </summary>
            <remarks>@dref_details_DataReaderProtocolQosPolicy_propagate_unregister_of_disposed_instances</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderProtocol.RtpsReliableReader">
            <summary>
            RTPS protocol-related configuration settings for the RTPS reliable reader associated with a <see cref="T:Rti.Dds.Subscription.DataReader`1"/>. This parameter only has effect if the reader is configured with <see cref="F:Rti.Dds.Core.Policy.ReliabilityKind.Reliable"/> <see cref="T:Rti.Dds.Core.Policy.Reliability"/>.
            </summary>
            <remarks>@dref_details_DataReaderProtocolQosPolicy_rtps_reliable_reader</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderProtocol.Default">
            <summary>Singleton containing the default value of a DataReaderProtocol</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataReaderProtocol.With(System.Action{Rti.Dds.Core.Policy.DataReaderProtocolBuilder})">
            <summary>
            Creates a new DataReaderProtocol with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this DataReaderProtocol.
            </param>
            <returns>A new DataReaderProtocol with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataReaderProtocol.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataReaderProtocol.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataReaderProtocol.Equals(Rti.Dds.Core.Policy.DataReaderProtocol)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.DataReaderProtocolBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.DataReaderProtocol"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataReaderProtocolBuilder.#ctor(Rti.Dds.Core.Policy.DataReaderProtocol)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataReaderProtocolBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderProtocolBuilder.VirtualGuid">
            <summary>
            The virtual GUID (Global Unique Identifier).
            </summary>
            <remarks>@dref_details_DataReaderProtocolQosPolicy_virtual_guid</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderProtocolBuilder.RtpsObjectId">
            <summary>
            The RTPS Object ID.
            </summary>
            <remarks>@dref_details_DataReaderProtocolQosPolicy_rtps_object_id</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderProtocolBuilder.ExpectsInlineQos">
            <summary>
            Specifies whether this DataReader expects inline QoS with every sample.
            </summary>
            <remarks>@dref_details_DataReaderProtocolQosPolicy_expects_inline_qos</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderProtocolBuilder.DisablePositiveAcks">
            <summary>
            Whether the reader sends positive acknowledgements to writers.
            </summary>
            <remarks>@dref_details_DataReaderProtocolQosPolicy_disable_positive_acks</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderProtocolBuilder.PropagateDisposeOfUnregisteredInstances">
            <summary>
            Indicates whether or not an instance can move to the <see cref="F:Omg.Dds.Subscription.InstanceState.NotAliveDisposed"/> state without being in the <see cref="F:Omg.Dds.Subscription.InstanceState.Alive"/> state.
            </summary>
            <remarks>@dref_details_DataReaderProtocolQosPolicy_propagate_dispose_of_unregistered_instances</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderProtocolBuilder.PropagateUnregisterOfDisposedInstances">
            <summary>
            Indicates whether or not an instance can move to the <see cref="F:Omg.Dds.Subscription.InstanceState.NotAliveNoWriters"/> state without being in the <see cref="F:Omg.Dds.Subscription.InstanceState.Alive"/> state.
            </summary>
            <remarks>@dref_details_DataReaderProtocolQosPolicy_propagate_unregister_of_disposed_instances</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderProtocolBuilder.RtpsReliableReader">
            <summary>
            RTPS protocol-related configuration settings for the RTPS reliable reader associated with a <see cref="T:Rti.Dds.Subscription.DataReader`1"/>. This parameter only has effect if the reader is configured with <see cref="F:Rti.Dds.Core.Policy.ReliabilityKind.Reliable"/> <see cref="T:Rti.Dds.Core.Policy.Reliability"/>.
            </summary>
            <remarks>@dref_details_DataReaderProtocolQosPolicy_rtps_reliable_reader</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataReaderProtocolBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.DataReaderProtocol"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.DataReaderResourceLimits">
            <summary>
            Various settings that configure how a <see cref="T:Rti.Dds.Subscription.DataReader`1"/>
            allocates and uses physical memory for internal resources.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.DataReaderResourceLimits.AutoMaxTotalInstances">
            <summary>
            This value is used to set <see cref="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.MaxTotalInstances"/> to
            <see cref="P:Rti.Dds.Core.Policy.ResourceLimits.MaxInstances"/>.
            </summary>
            <remarks>@dref_details_AUTO_MAX_TOTAL_INSTANCES</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.MaxRemoteWriters">
            <summary>
            The maximum number of remote writers from which a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may read, including all instances.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_remote_writers</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.MaxRemoteWritersPerInstance">
            <summary>
            The maximum number of remote writers from which a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may read a single instance.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_remote_writers_per_instance</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.MaxSamplesPerRemoteWriter">
            <summary>
            The maximum number of out-of-order samples from a given remote <see cref="T:Rti.Dds.Publication.DataWriter`1"/> that a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may store when maintaining a reliable connection to the <see cref="T:Rti.Dds.Publication.DataWriter`1"/>.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_samples_per_remote_writer</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.MaxInfos">
            <summary>
            The maximum number of info units that a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> can use to store <see cref="T:Rti.Dds.Subscription.SampleInfo"/>.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_infos</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.InitialRemoteWriters">
            <summary>
            The initial number of remote writers from which a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may read, including all instances.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_initial_remote_writers</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.InitialRemoteWritersPerInstance">
            <summary>
            The initial number of remote writers from which a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may read a single instance.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_initial_remote_writers_per_instance</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.InitialInfos">
            <summary>
            The initial number of info units that a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> can have, which are used to store <see cref="T:Rti.Dds.Subscription.SampleInfo"/>.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_initial_infos</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.InitialOutstandingReads">
            <summary>
            The initial number of outstanding calls to read/take (or one of their variants) on the same <see cref="T:Rti.Dds.Subscription.DataReader`1"/>
            for which one or more <see cref="T:Rti.Dds.Subscription.LoanedSamples`1"/> objects have not been disposed.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_initial_outstanding_reads</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.MaxOutstandingReads">
            <summary>
            The maximum number of outstanding read/take calls (or one of their variants) on the same <see cref="T:Rti.Dds.Subscription.DataReader`1"/>
            for which one or more <see cref="T:Rti.Dds.Subscription.LoanedSamples`1"/> objects have not been disposed.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_outstanding_reads</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.MaxSamplesPerRead">
            <summary>
            The maximum number of data samples that the application can receive from the middleware in a single call to <see cref="M:Rti.Dds.Subscription.DataReader`1.Read"/> or <see cref="M:Rti.Dds.Subscription.DataReader`1.Take"/>. If more data exists in the middleware, the application will need to issue multiple read/take calls.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_samples_per_read</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.DisableFragmentationSupport">
            <summary>
            Determines whether the <see cref="T:Rti.Dds.Subscription.DataReader`1"/> can receive fragmented samples.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_disable_fragmentation_support</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.MaxFragmentedSamples">
            <summary>
            The maximum number of samples for which the <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may store fragments at a given point in time.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_fragmented_samples</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.InitialFragmentedSamples">
            <summary>
            The initial number of samples for which a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may store fragments.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_initial_fragmented_samples</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.MaxFragmentedSamplesPerRemoteWriter">
            <summary>
            The maximum number of samples per remote writer for which a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may store fragments.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_fragmented_samples_per_remote_writer</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.MaxFragmentsPerSample">
            <summary>
            Maximum number of fragments for a single sample.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_fragments_per_sample</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.DynamicallyAllocateFragmentedSamples">
            <summary>
            Determines whether the <see cref="T:Rti.Dds.Subscription.DataReader`1"/> pre-allocates storage for storing fragmented samples.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_dynamically_allocate_fragmented_samples</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.MaxTotalInstances">
            <summary>
            Maximum number of instances for which a DataReader will keep state.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_total_instances</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.MaxRemoteVirtualWriters">
            <summary>
            The maximum number of remote virtual writers from which a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may read, including all instances.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_remote_virtual_writers</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.InitialRemoteVirtualWriters">
            <summary>
            The initial number of remote virtual writers from which a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may read, including all instances.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_initial_remote_virtual_writers</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.MaxRemoteVirtualWritersPerInstance">
            <summary>
            The maximum number of virtual remote writers that can be associated with an instance.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_remote_virtual_writers_per_instance</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.InitialRemoteVirtualWritersPerInstance">
            <summary>
            The initial number of virtual remote writers per instance.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_initial_remote_virtual_writers_per_instance</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.MaxRemoteWritersPerSample">
            <summary>
            The maximum number of remote writers allowed to write the same sample.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_remote_writers_per_sample</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.MaxQueryConditionFilters">
            <summary>
            The maximum number of query condition filters a reader is allowed.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_query_condition_filters</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.MaxAppAckResponseLength">
            <summary>
            Maximum length of application-level acknowledgment response data
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_app_ack_response_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.KeepMinimumStateForInstances">
            <summary>
            Whether or not keep a minimum instance state for up to <see cref="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.MaxTotalInstances"/>.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_keep_minimum_state_for_instances</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.InitialTopicQueries">
            <summary>
            The initial number of TopicQueries allocated by a <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_initial_topic_queries</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.MaxTopicQueries">
            <summary>
            The maximum number of active TopicQueries that a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> can create.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_topic_queries</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.ShmemRefTransferModeAttachedSegmentAllocation">
            <summary>
            Allocation resource for the shared memory segments attached by the <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_shmem_ref_transfer_mode_attached_segment_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.InstanceReplacement">
            <summary>
            Sets the kind of instances allowed to be replaced for each instance state (<see cref="T:Omg.Dds.Subscription.InstanceState"/>) when a DataReader reaches <see cref="P:Rti.Dds.Core.Policy.ResourceLimits.MaxInstances"/>.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_instance_replacement</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.Default">
            <summary>Singleton containing the default value of a DataReaderResourceLimits</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataReaderResourceLimits.With(System.Action{Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder})">
            <summary>
            Creates a new DataReaderResourceLimits with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this DataReaderResourceLimits.
            </param>
            <returns>A new DataReaderResourceLimits with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataReaderResourceLimits.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataReaderResourceLimits.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataReaderResourceLimits.Equals(Rti.Dds.Core.Policy.DataReaderResourceLimits)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.DataReaderResourceLimits"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.#ctor(Rti.Dds.Core.Policy.DataReaderResourceLimits)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.MaxRemoteWriters">
            <summary>
            The maximum number of remote writers from which a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may read, including all instances.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_remote_writers</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.MaxRemoteWritersPerInstance">
            <summary>
            The maximum number of remote writers from which a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may read a single instance.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_remote_writers_per_instance</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.MaxSamplesPerRemoteWriter">
            <summary>
            The maximum number of out-of-order samples from a given remote <see cref="T:Rti.Dds.Publication.DataWriter`1"/> that a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may store when maintaining a reliable connection to the <see cref="T:Rti.Dds.Publication.DataWriter`1"/>.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_samples_per_remote_writer</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.MaxInfos">
            <summary>
            The maximum number of info units that a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> can use to store <see cref="T:Rti.Dds.Subscription.SampleInfo"/>.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_infos</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.InitialRemoteWriters">
            <summary>
            The initial number of remote writers from which a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may read, including all instances.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_initial_remote_writers</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.InitialRemoteWritersPerInstance">
            <summary>
            The initial number of remote writers from which a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may read a single instance.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_initial_remote_writers_per_instance</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.InitialInfos">
            <summary>
            The initial number of info units that a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> can have, which are used to store <see cref="T:Rti.Dds.Subscription.SampleInfo"/>.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_initial_infos</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.InitialOutstandingReads">
            <summary>
            The initial number of outstanding calls to read/take (or one of their variants) on the same <see cref="T:Rti.Dds.Subscription.DataReader`1"/>
            for which one or more <see cref="T:Rti.Dds.Subscription.LoanedSamples`1"/> objects have not been disposed.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_initial_outstanding_reads</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.MaxOutstandingReads">
            <summary>
            The maximum number of outstanding read/take calls (or one of their variants) on the same <see cref="T:Rti.Dds.Subscription.DataReader`1"/>
            for which one or more <see cref="T:Rti.Dds.Subscription.LoanedSamples`1"/> objects have not been disposed.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_outstanding_reads</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.MaxSamplesPerRead">
            <summary>
            The maximum number of data samples that the application can receive from the middleware in a single call to <see cref="M:Rti.Dds.Subscription.DataReader`1.Read"/> or <see cref="M:Rti.Dds.Subscription.DataReader`1.Take"/>. If more data exists in the middleware, the application will need to issue multiple read/take calls.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_samples_per_read</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.DisableFragmentationSupport">
            <summary>
            Determines whether the <see cref="T:Rti.Dds.Subscription.DataReader`1"/> can receive fragmented samples.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_disable_fragmentation_support</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.MaxFragmentedSamples">
            <summary>
            The maximum number of samples for which the <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may store fragments at a given point in time.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_fragmented_samples</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.InitialFragmentedSamples">
            <summary>
            The initial number of samples for which a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may store fragments.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_initial_fragmented_samples</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.MaxFragmentedSamplesPerRemoteWriter">
            <summary>
            The maximum number of samples per remote writer for which a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may store fragments.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_fragmented_samples_per_remote_writer</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.MaxFragmentsPerSample">
            <summary>
            Maximum number of fragments for a single sample.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_fragments_per_sample</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.DynamicallyAllocateFragmentedSamples">
            <summary>
            Determines whether the <see cref="T:Rti.Dds.Subscription.DataReader`1"/> pre-allocates storage for storing fragmented samples.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_dynamically_allocate_fragmented_samples</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.MaxTotalInstances">
            <summary>
            Maximum number of instances for which a DataReader will keep state.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_total_instances</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.MaxRemoteVirtualWriters">
            <summary>
            The maximum number of remote virtual writers from which a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may read, including all instances.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_remote_virtual_writers</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.InitialRemoteVirtualWriters">
            <summary>
            The initial number of remote virtual writers from which a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may read, including all instances.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_initial_remote_virtual_writers</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.MaxRemoteVirtualWritersPerInstance">
            <summary>
            The maximum number of virtual remote writers that can be associated with an instance.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_remote_virtual_writers_per_instance</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.InitialRemoteVirtualWritersPerInstance">
            <summary>
            The initial number of virtual remote writers per instance.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_initial_remote_virtual_writers_per_instance</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.MaxRemoteWritersPerSample">
            <summary>
            The maximum number of remote writers allowed to write the same sample.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_remote_writers_per_sample</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.MaxQueryConditionFilters">
            <summary>
            The maximum number of query condition filters a reader is allowed.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_query_condition_filters</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.MaxAppAckResponseLength">
            <summary>
            Maximum length of application-level acknowledgment response data
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_app_ack_response_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.KeepMinimumStateForInstances">
            <summary>
            Whether or not keep a minimum instance state for up to <see cref="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.MaxTotalInstances"/>.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_keep_minimum_state_for_instances</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.InitialTopicQueries">
            <summary>
            The initial number of TopicQueries allocated by a <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_initial_topic_queries</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.MaxTopicQueries">
            <summary>
            The maximum number of active TopicQueries that a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> can create.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_max_topic_queries</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.ShmemRefTransferModeAttachedSegmentAllocation">
            <summary>
            Allocation resource for the shared memory segments attached by the <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_shmem_ref_transfer_mode_attached_segment_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.InstanceReplacement">
            <summary>
            Sets the kind of instances allowed to be replaced for each instance state (<see cref="T:Omg.Dds.Subscription.InstanceState"/>) when a DataReader reaches <see cref="P:Rti.Dds.Core.Policy.ResourceLimits.MaxInstances"/>.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsQosPolicy_instance_replacement</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.DataReaderResourceLimits"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.DataRepresentation">
            <summary>
            Specifies a list of representation identifiers and compression settings
            used by <see cref="T:Rti.Dds.Publication.DataWriter`1"/> and
            <see cref="T:Rti.Dds.Subscription.DataReader`1"/> entities to negotiate which
            data representation and compression settings to use.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.DataRepresentation.Xcdr">
            <summary>
            Corresponds to the Extended Common Data Representation encoding version 1.
            </summary>
            <remarks>@dref_details_XCDR_DATA_REPRESENTATION</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.DataRepresentation.Xml">
            <summary>
            Corresponds to XML Data Representation (unsupported).
            </summary>
            <remarks>@dref_details_XML_DATA_REPRESENTATION</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.DataRepresentation.Xcdr2">
            <summary>
            Corresponds to the Extended Common Data Representation encoding version 2.
            </summary>
            <remarks>@dref_details_XCDR2_DATA_REPRESENTATION</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.DataRepresentation.Auto">
            <summary>
            Representation is automatically chosen based on the type.
            </summary>
            <remarks>@dref_details_AUTO_DATA_REPRESENTATION</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataRepresentation.Value">
            <summary>
            Sequence of representation identifiers.
            </summary>
            <remarks>@dref_details_DataRepresentationQosPolicy_value</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataRepresentation.CompressionSettings">
            <summary>
            @extension Structure that contains the compression settings.
            </summary>
            <remarks>@dref_details_DataRepresentationQosPolicy_compression_settings</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataRepresentation.Default">
            <summary>Singleton containing the default value of a DataRepresentation</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataRepresentation.With(System.Action{Rti.Dds.Core.Policy.DataRepresentationBuilder})">
            <summary>
            Creates a new DataRepresentation with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this DataRepresentation.
            </param>
            <returns>A new DataRepresentation with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataRepresentation.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataRepresentation.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataRepresentation.Equals(Rti.Dds.Core.Policy.DataRepresentation)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.DataRepresentationBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.DataRepresentation"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataRepresentationBuilder.#ctor(Rti.Dds.Core.Policy.DataRepresentation)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataRepresentationBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataRepresentationBuilder.Value">
            <summary>
            Sequence of representation identifiers.
            </summary>
            <remarks>@dref_details_DataRepresentationQosPolicy_value</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataRepresentationBuilder.CompressionSettings">
            <summary>
            @extension Structure that contains the compression settings.
            </summary>
            <remarks>@dref_details_DataRepresentationQosPolicy_compression_settings</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataRepresentationBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.DataRepresentation"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.DataTags">
            <summary>
            Stores name-value (string) pairs that can be used to determine access permissions.
            </summary>
            <remarks>@dref_details_DataTags</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataTags.Value">
            <summary>
            Gets the dictionary containing the properties
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataTags.Default">
            <summary>Singleton containing the default value, an empty dictionary</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataTags.FromDictionary(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a DataTags object with the keys and entries in a Dictionary
            </summary>
            <param name="value">The key-entry pairs</param>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataTags.FromDictionary(System.Collections.Immutable.ImmutableDictionary{System.String,System.String})">
            <summary>
            Creates a DataTags object with the key-value pairs in a Dictionary
            </summary>
            <param name="value">The key-value pairs</param>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataTags.With(System.Action{System.Collections.Immutable.ImmutableDictionary{System.String,System.String}.Builder})">
            <summary>
            Creates a new DataTags with a set of changes specified in an Action
            </summary>
            <param name="build">
            An action (typically a lambda function) that receives a dictionary
            builder containing the current properties and allows
            adding, removing, or replacing.
            </param>
            <returns>A new DataTags with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataTags.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataTags.GetHashCode">
            <summary>
            Gets the hash code of <see cref="P:Rti.Dds.Core.Policy.DataTags.Value"/>.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataTags.Equals(Rti.Dds.Core.Policy.DataTags)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.DataWriterProtocol">
            <summary>
            Configures DDS on-the-wire protocol (RTPS).
            </summary>
            <remarks>@dref_details_DataWriterProtocolQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterProtocol.VirtualGuid">
            <summary>
            The virtual GUID (Global Unique Identifier).
            </summary>
            <remarks>@dref_details_DataWriterProtocolQosPolicy_virtual_guid</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterProtocol.RtpsObjectId">
            <summary>
            The RTPS Object ID.
            </summary>
            <remarks>@dref_details_DataWriterProtocolQosPolicy_rtps_object_id</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterProtocol.PushOnWrite">
            <summary>
            Whether to push sample out when write is called.
            </summary>
            <remarks>@dref_details_DataWriterProtocolQosPolicy_push_on_write</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterProtocol.DisablePositiveAcks">
            <summary>
            Controls whether or not the writer expects positive acknowledgements from matching readers.
            </summary>
            <remarks>@dref_details_DataWriterProtocolQosPolicy_disable_positive_acks</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterProtocol.DisableInlineKeyhash">
            <summary>
            Controls whether or not a keyhash is propagated on the wire with each sample.
            </summary>
            <remarks>@dref_details_DataWriterProtocolQosPolicy_disable_inline_keyhash</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterProtocol.SerializeKeyWithDispose">
            <summary>
            Controls whether or not the serialized key is propagated on the wire with dispose samples.
            </summary>
            <remarks>@dref_details_DataWriterProtocolQosPolicy_serialize_key_with_dispose</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterProtocol.PropagateAppAckWithNoResponse">
            <summary>
            Controls whether or not a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> receives <see cref="E:Rti.Dds.Publication.AnyDataWriter.ApplicationAcknowledgementReceived"/> notifications with an empty or invalid response.
            </summary>
            <remarks>@dref_details_DataWriterProtocolQosPolicy_propagate_app_ack_with_no_response</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterProtocol.RtpsReliableWriter">
            <summary>
            RTPS protocol-related configuration settings for the RTPS reliable writer associated with a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> . This parameter only has effect if both the writer and the matching reader are configured with <see cref="T:Rti.Dds.Core.Policy.Reliability"/> <see cref="P:Rti.Dds.Core.Policy.Reliability.Kind"/>.
            </summary>
            <remarks>@dref_details_DataWriterProtocolQosPolicy_rtps_reliable_writer</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterProtocol.InitialVirtualSequenceNumber">
            <summary>
            Determines, the initial virtual sequence number for this DataWriter.
            </summary>
            <remarks>@dref_details_DataWriterProtocolQosPolicy_initial_virtual_sequence_number</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterProtocol.Default">
            <summary>Singleton containing the default value of a DataWriterProtocol</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataWriterProtocol.With(System.Action{Rti.Dds.Core.Policy.DataWriterProtocolBuilder})">
            <summary>
            Creates a new DataWriterProtocol with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this DataWriterProtocol.
            </param>
            <returns>A new DataWriterProtocol with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataWriterProtocol.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataWriterProtocol.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataWriterProtocol.Equals(Rti.Dds.Core.Policy.DataWriterProtocol)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.DataWriterProtocolBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.DataWriterProtocol"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataWriterProtocolBuilder.#ctor(Rti.Dds.Core.Policy.DataWriterProtocol)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataWriterProtocolBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterProtocolBuilder.VirtualGuid">
            <summary>
            The virtual GUID (Global Unique Identifier).
            </summary>
            <remarks>@dref_details_DataWriterProtocolQosPolicy_virtual_guid</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterProtocolBuilder.RtpsObjectId">
            <summary>
            The RTPS Object ID.
            </summary>
            <remarks>@dref_details_DataWriterProtocolQosPolicy_rtps_object_id</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterProtocolBuilder.PushOnWrite">
            <summary>
            Whether to push sample out when write is called.
            </summary>
            <remarks>@dref_details_DataWriterProtocolQosPolicy_push_on_write</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterProtocolBuilder.DisablePositiveAcks">
            <summary>
            Controls whether or not the writer expects positive acknowledgements from matching readers.
            </summary>
            <remarks>@dref_details_DataWriterProtocolQosPolicy_disable_positive_acks</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterProtocolBuilder.DisableInlineKeyhash">
            <summary>
            Controls whether or not a keyhash is propagated on the wire with each sample.
            </summary>
            <remarks>@dref_details_DataWriterProtocolQosPolicy_disable_inline_keyhash</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterProtocolBuilder.SerializeKeyWithDispose">
            <summary>
            Controls whether or not the serialized key is propagated on the wire with dispose samples.
            </summary>
            <remarks>@dref_details_DataWriterProtocolQosPolicy_serialize_key_with_dispose</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterProtocolBuilder.PropagateAppAckWithNoResponse">
            <summary>
            Controls whether or not a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>  receives <see cref="E:Rti.Dds.Publication.AnyDataWriter.ApplicationAcknowledgementReceived"/> notifications with an empty or invalid response.
            </summary>
            <remarks>@dref_details_DataWriterProtocolQosPolicy_propagate_app_ack_with_no_response</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterProtocolBuilder.RtpsReliableWriter">
            <summary>
            RTPS protocol-related configuration settings for the RTPS reliable writer associated with a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> . This parameter only has effect if both the writer and the matching reader are configured with <see cref="T:Rti.Dds.Core.Policy.Reliability"/> <see cref="P:Rti.Dds.Core.Policy.Reliability.Kind"/>.
            </summary>
            <remarks>@dref_details_DataWriterProtocolQosPolicy_rtps_reliable_writer</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterProtocolBuilder.InitialVirtualSequenceNumber">
            <summary>
            Determines, the initial virtual sequence number for this DataWriter.
            </summary>
            <remarks>@dref_details_DataWriterProtocolQosPolicy_initial_virtual_sequence_number</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataWriterProtocolBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.DataWriterProtocol"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.DataWriterResourceLimits">
            <summary>
            Configures how <see cref="T:Rti.Dds.Publication.DataWriter`1"/>'s allocate and
            use physical memory for internal resources.
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimits.InitialConcurrentBlockingThreads">
            <summary>
            The initial number of threads that are allowed to concurrently block on write call on the same <see cref="T:Rti.Dds.Publication.DataWriter`1"/> .
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_initial_concurrent_blocking_threads</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimits.MaxConcurrentBlockingThreads">
            <summary>
            The maximum number of threads that are allowed to concurrently block on write call on the same <see cref="T:Rti.Dds.Publication.DataWriter`1"/> .
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_max_concurrent_blocking_threads</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimits.MaxRemoteReaderFilters">
            <summary>
            The maximum number of remote DataReaders for which the <see cref="T:Rti.Dds.Publication.DataWriter`1"/>  will perform content-based filtering.
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_max_remote_reader_filters</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimits.InitialBatches">
            <summary>
            Represents the initial number of batches a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>  will manage.
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_initial_batches</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimits.MaxBatches">
            <summary>
            Represents the maximum number of batches a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>  will manage.
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_max_batches</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimits.CookieMaxLength">
            <summary>
            Represents the maximum length in bytes of a <see cref="T:Rti.Dds.Core.Cookie"/>
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_cookie_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimits.InstanceReplacement">
            <summary>
            Sets the kinds of instances allowed to be replaced when instance resource limits are reached.
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_instance_replacement</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimits.ReplaceEmptyInstances">
            <summary>
            Whether or not to replace empty instances during instance replacement
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_replace_empty_instances</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimits.AutoregisterInstances">
            <summary>
            Whether or not to automatically register new instances
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_autoregister_instances</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimits.InitialVirtualWriters">
            <summary>
            The initial number of virtual writers supported by a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_initial_virtual_writers</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimits.MaxVirtualWriters">
            <summary>
            The maximum number of virtual writers supported by a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_max_virtual_writers</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimits.MaxRemoteReaders">
            <summary>
            The maximum number of remote readers supported by a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_max_remote_readers</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimits.MaxAppAckRemoteReaders">
            <summary>
            The maximum number of application-level acknowledging remote readers supported by a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_max_app_ack_remote_readers</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimits.InitialActiveTopicQueries">
            <summary>
            Represents the initial number of active topic queries a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>  will manage.
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_initial_active_topic_queries</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimits.MaxActiveTopicQueries">
            <summary>
            Represents the maximum number of active topic queries a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>  will manage.
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_max_active_topic_queries</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimits.WriterLoanedSampleAllocation">
            <summary>
            Represents the allocation settings of loaned samples managed by a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> .
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_writer_loaned_sample_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimits.InitializeWriterLoanedSample">
            <summary>
            Whether or not to initialize loaned samples returned by a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_initialize_writer_loaned_sample</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimits.Default">
            <summary>Singleton containing the default value of a DataWriterResourceLimits</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataWriterResourceLimits.With(System.Action{Rti.Dds.Core.Policy.DataWriterResourceLimitsBuilder})">
            <summary>
            Creates a new DataWriterResourceLimits with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this DataWriterResourceLimits.
            </param>
            <returns>A new DataWriterResourceLimits with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataWriterResourceLimits.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataWriterResourceLimits.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataWriterResourceLimits.Equals(Rti.Dds.Core.Policy.DataWriterResourceLimits)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.DataWriterResourceLimitsBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.DataWriterResourceLimits"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataWriterResourceLimitsBuilder.#ctor(Rti.Dds.Core.Policy.DataWriterResourceLimits)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataWriterResourceLimitsBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimitsBuilder.InitialConcurrentBlockingThreads">
            <summary>
            The initial number of threads that are allowed to concurrently block on write call on the same <see cref="T:Rti.Dds.Publication.DataWriter`1"/> .
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_initial_concurrent_blocking_threads</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimitsBuilder.MaxConcurrentBlockingThreads">
            <summary>
            The maximum number of threads that are allowed to concurrently block on write call on the same <see cref="T:Rti.Dds.Publication.DataWriter`1"/> .
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_max_concurrent_blocking_threads</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimitsBuilder.MaxRemoteReaderFilters">
            <summary>
            The maximum number of remote DataReaders for which the <see cref="T:Rti.Dds.Publication.DataWriter`1"/>  will perform content-based filtering.
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_max_remote_reader_filters</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimitsBuilder.InitialBatches">
            <summary>
            Represents the initial number of batches a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>  will manage.
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_initial_batches</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimitsBuilder.MaxBatches">
            <summary>
            Represents the maximum number of batches a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>  will manage.
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_max_batches</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimitsBuilder.CookieMaxLength">
            <summary>
            Represents the maximum length in bytes of a <see cref="T:Rti.Dds.Core.Cookie"/>
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_cookie_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimitsBuilder.InstanceReplacement">
            <summary>
            Sets the kinds of instances allowed to be replaced when instance resource limits are reached.
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_instance_replacement</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimitsBuilder.ReplaceEmptyInstances">
            <summary>
            Whether or not to replace empty instances during instance replacement
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_replace_empty_instances</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimitsBuilder.AutoregisterInstances">
            <summary>
            Whether or not to automatically register new instances
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_autoregister_instances</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimitsBuilder.InitialVirtualWriters">
            <summary>
            The initial number of virtual writers supported by a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_initial_virtual_writers</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimitsBuilder.MaxVirtualWriters">
            <summary>
            The maximum number of virtual writers supported by a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_max_virtual_writers</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimitsBuilder.MaxRemoteReaders">
            <summary>
            The maximum number of remote readers supported by a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_max_remote_readers</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimitsBuilder.MaxAppAckRemoteReaders">
            <summary>
            The maximum number of application-level acknowledging remote readers supported by a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_max_app_ack_remote_readers</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimitsBuilder.InitialActiveTopicQueries">
            <summary>
            Represents the initial number of active topic queries a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>  will manage.
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_initial_active_topic_queries</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimitsBuilder.MaxActiveTopicQueries">
            <summary>
            Represents the maximum number of active topic queries a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>  will manage.
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_max_active_topic_queries</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimitsBuilder.WriterLoanedSampleAllocation">
            <summary>
            Represents the allocation settings of loaned samples managed by a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> .
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_writer_loaned_sample_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DataWriterResourceLimitsBuilder.InitializeWriterLoanedSample">
            <summary>
            Whether or not to initialize loaned samples returned by a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsQosPolicy_initialize_writer_loaned_sample</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DataWriterResourceLimitsBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.DataWriterResourceLimits"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.InstanceReplacementKind">
            <summary>
            Kinds of instance replacements for <see cref="T:Rti.Dds.Publication.DataWriter`1"/>'s.
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsInstanceReplacementKind</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.InstanceReplacementKind.Unregistered">
            <summary>
            Allows a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> to reclaim
            unregistered acknowledged instances.
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsInstanceReplacementKind_UNREGISTERED_INSTANCE_REPLACEMENT</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.InstanceReplacementKind.Alive">
            <summary>
            Allows a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> to reclaim
            alive, acknowledged instances.
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsInstanceReplacementKind_ALIVE_INSTANCE_REPLACEMENT</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.InstanceReplacementKind.Disposed">
            <summary>
            Allows a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> to reclaim
            disposed acknowledged instances.
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsInstanceReplacementKind_DISPOSED_INSTANCE_REPLACEMENT</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.InstanceReplacementKind.AliveThenDisposed">
            <summary>
            Allows a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> first to
            reclaim an alive, acknowledged instance, and then, if necessary, a
            disposed, acknowledged instance.
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsInstanceReplacementKind_ALIVE_THEN_DISPOSED_INSTANCE_REPLACEMENT</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.InstanceReplacementKind.DisposedThenAlive">
            <summary>
            Allows a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> first to
            reclaim a disposed, acknowledged instance, and then, if necessary,
            an alive, acknowledged instance.
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsInstanceReplacementKind_DISPOSED_THEN_ALIVE_INSTANCE_REPLACEMENT</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.InstanceReplacementKind.AliveOrDisposed">
            <summary>
            Allows a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> to reclaim
            either an alive acknowledged instance or a disposed acknowledged instance.
            </summary>
            <remarks>@dref_details_DataWriterResourceLimitsInstanceReplacementKind_ALIVE_OR_DISPOSED_INSTANCE_REPLACEMENT</remarks>
        </member>
        <member name="T:Rti.Dds.Core.Policy.Deadline">
            <summary>
            Expresses the maximum duration (deadline) within which an
            instance is expected to be updated.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Deadline.Period">
            <summary>
            Duration of the deadline period.
            </summary>
            <remarks>@dref_details_DeadlineQosPolicy_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Deadline.Default">
            <summary>Singleton containing the default value of a Deadline</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Deadline.#ctor(Omg.Dds.Core.Duration)">
            <summary>
            Creates a new instance
            </summary>
            <param name="period">The value for <see cref="P:Rti.Dds.Core.Policy.Deadline.Period"/></param>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Deadline.With(System.Action{Rti.Dds.Core.Policy.DeadlineBuilder})">
            <summary>
            Creates a new Deadline with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this Deadline.
            </param>
            <returns>A new Deadline with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Deadline.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Deadline.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Deadline.Equals(Rti.Dds.Core.Policy.Deadline)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.DeadlineBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.Deadline"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DeadlineBuilder.#ctor(Rti.Dds.Core.Policy.Deadline)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DeadlineBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DeadlineBuilder.Period">
            <summary>
            Duration of the deadline period.
            </summary>
            <remarks>@dref_details_DeadlineQosPolicy_period</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DeadlineBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.Deadline"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.DestinationOrder">
            <summary>
            Controls how the middleware will deal with data sent by
            multiple <see cref="T:Rti.Dds.Publication.DataWriter`1"/> entities for the same
            instance.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DestinationOrder.Kind">
            <summary>
            Specifies the desired kind of destination order.
            </summary>
            <remarks>@dref_details_DestinationOrderQosPolicy_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DestinationOrder.Scope">
            <summary>
            Specifies the desired scope of the source destination order.
            </summary>
            <remarks>@dref_details_DestinationOrderQosPolicy_scope</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DestinationOrder.SourceTimestampTolerance">
            <summary>
            @extension Allowed tolerance between source timestamps of consecutive samples.
            </summary>
            <remarks>@dref_details_DestinationOrderQosPolicy_source_timestamp_tolerance</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DestinationOrder.Default">
            <summary>Singleton containing the default value of a DestinationOrder</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DestinationOrder.With(System.Action{Rti.Dds.Core.Policy.DestinationOrderBuilder})">
            <summary>
            Creates a new DestinationOrder with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this DestinationOrder.
            </param>
            <returns>A new DestinationOrder with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DestinationOrder.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DestinationOrder.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DestinationOrder.Equals(Rti.Dds.Core.Policy.DestinationOrder)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.DestinationOrderBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.DestinationOrder"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DestinationOrderBuilder.#ctor(Rti.Dds.Core.Policy.DestinationOrder)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DestinationOrderBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DestinationOrderBuilder.Kind">
            <summary>
            Specifies the desired kind of destination order.
            </summary>
            <remarks>@dref_details_DestinationOrderQosPolicy_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DestinationOrderBuilder.Scope">
            <summary>
            Specifies the desired scope of the source destination order.
            </summary>
            <remarks>@dref_details_DestinationOrderQosPolicy_scope</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DestinationOrderBuilder.SourceTimestampTolerance">
            <summary>
            @extension Allowed tolerance between source timestamps of consecutive samples.
            </summary>
            <remarks>@dref_details_DestinationOrderQosPolicy_source_timestamp_tolerance</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DestinationOrderBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.DestinationOrder"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.DestinationOrderKind">
            <summary>
            Kinds of destination order
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.DestinationOrderKind.ByReceptionTimestamp">
            <summary>
            (Default) Indicates that data is ordered based on the reception
            time at each subscriber.
            </summary>
            <remarks>@dref_details_DestinationOrderQosPolicyKind_BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.DestinationOrderKind.BySourceTimestamp">
            <summary>
            Indicates that data is ordered based on a timestamp placed at the
            source (by the middleware or by the application).
            </summary>
            <remarks>@dref_details_DestinationOrderQosPolicyKind_BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS</remarks>
        </member>
        <member name="T:Rti.Dds.Core.Policy.DestinationOrderScopeKind">
            <summary>
            Scope of the ordering when used along with
            <see cref="F:Rti.Dds.Core.Policy.DestinationOrderKind.BySourceTimestamp"/>.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.DestinationOrderScopeKind.Instance">
            <summary>
            (Default) Indicates that data is ordered on a per-instance basis.
            </summary>
            <remarks>@dref_details_DestinationOrderQosPolicyScopeKind_INSTANCE_SCOPE_DESTINATIONORDER_QOS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.DestinationOrderScopeKind.Topic">
            <summary>
            (Default) Indicates that data is ordered on a per-topic basis.
            </summary>
            <remarks>@dref_details_DestinationOrderQosPolicyScopeKind_TOPIC_SCOPE_DESTINATIONORDER_QOS</remarks>
        </member>
        <member name="T:Rti.Dds.Core.Policy.Discovery">
            <summary>
            Configures the mechanism used by the middleware to automatically
            discover and connect with new remote applications.
            </summary>
            <remarks>@dref_details_DiscoveryQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Discovery.EnabledTransports">
            <summary>
            The transports available for use by the Discovery mechanism.
            </summary>
            <remarks>@dref_details_DiscoveryQosPolicy_enabled_transports</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Discovery.InitialPeers">
            <summary>
            Determines the initial list of peers that will be contacted by the Discovery mechanism to send announcements about the presence of this participant.
            </summary>
            <remarks>@dref_details_DiscoveryQosPolicy_initial_peers</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Discovery.MulticastReceiveAddresses">
            <summary>
            Specifies the multicast group addresses on which discovery-related \b meta-traffic can be received by the DomainParticipant.
            </summary>
            <remarks>@dref_details_DiscoveryQosPolicy_multicast_receive_addresses</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Discovery.MetatrafficTransportPriority">
            <summary>
            The transport priority to use for the Discovery meta-traffic.
            </summary>
            <remarks>@dref_details_DiscoveryQosPolicy_metatraffic_transport_priority</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Discovery.AcceptUnknownPeers">
            <summary>
            Whether to accept a new participant that is not in the initial peers list.
            </summary>
            <remarks>@dref_details_DiscoveryQosPolicy_accept_unknown_peers</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Discovery.EnableEndpointDiscovery">
            <summary>
            Whether to automatically enable endpoint discovery for all the remote participants.
            </summary>
            <remarks>@dref_details_DiscoveryQosPolicy_enable_endpoint_discovery</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Discovery.Default">
            <summary>Singleton containing the default value of a Discovery</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Discovery.With(System.Action{Rti.Dds.Core.Policy.DiscoveryBuilder})">
            <summary>
            Creates a new Discovery with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this Discovery.
            </param>
            <returns>A new Discovery with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Discovery.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Discovery.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Discovery.Equals(Rti.Dds.Core.Policy.Discovery)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.DiscoveryBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.Discovery"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DiscoveryBuilder.#ctor(Rti.Dds.Core.Policy.Discovery)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DiscoveryBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryBuilder.EnabledTransports">
            <summary>
            The transports available for use by the Discovery mechanism.
            </summary>
            <remarks>@dref_details_DiscoveryQosPolicy_enabled_transports</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryBuilder.InitialPeers">
            <summary>
            Determines the initial list of peers that will be contacted by the Discovery mechanism to send announcements about the presence of this participant.
            </summary>
            <remarks>@dref_details_DiscoveryQosPolicy_initial_peers</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryBuilder.MulticastReceiveAddresses">
            <summary>
            Specifies the multicast group addresses on which discovery-related \b meta-traffic can be received by the DomainParticipant.
            </summary>
            <remarks>@dref_details_DiscoveryQosPolicy_multicast_receive_addresses</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryBuilder.MetatrafficTransportPriority">
            <summary>
            The transport priority to use for the Discovery meta-traffic.
            </summary>
            <remarks>@dref_details_DiscoveryQosPolicy_metatraffic_transport_priority</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryBuilder.AcceptUnknownPeers">
            <summary>
            Whether to accept a new participant that is not in the initial peers list.
            </summary>
            <remarks>@dref_details_DiscoveryQosPolicy_accept_unknown_peers</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryBuilder.EnableEndpointDiscovery">
            <summary>
            Whether to automatically enable endpoint discovery for all the remote participants.
            </summary>
            <remarks>@dref_details_DiscoveryQosPolicy_enable_endpoint_discovery</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DiscoveryBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.Discovery"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.DiscoveryConfig">
            <summary>
            Controls how often to send discovery packets, how to determine when
            participants are alive or dead, and resources used by the discovery
            mechanism.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.ParticipantLivelinessLeaseDuration">
            <summary>
            The liveliness lease duration for the participant.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_participant_liveliness_lease_duration</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.ParticipantLivelinessAssertPeriod">
            <summary>
            The period to assert liveliness for the participant.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_participant_liveliness_assert_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.RemoteParticipantPurgeKind">
            <summary>
            The participant's behavior for maintaining knowledge of remote participants (and their contained entities) with which discovery communication has been lost.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_remote_participant_purge_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.MaxLivelinessLossDetectionPeriod">
            <summary>
            The maximum amount of time between when a remote entity stops maintaining its liveliness and when the matched local entity realizes that fact.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_max_liveliness_loss_detection_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.InitialParticipantAnnouncements">
            <summary>
            The number of initial announcements sent when a participant is first enabled or when a remote participant is newly discovered.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_initial_participant_announcements</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.MinInitialParticipantAnnouncementPeriod">
            <summary>
            The minimum period between initial announcements when a participant is first enabled or when a remote participant is newly discovered.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_min_initial_participant_announcement_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.MaxInitialParticipantAnnouncementPeriod">
            <summary>
            The maximum period between initial announcements when a participant is first enabled or when a remote participant is newly discovered.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_max_initial_participant_announcement_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.ParticipantReaderResourceLimits">
            <summary>
            Resource limits.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_participant_reader_resource_limits</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.PublicationReader">
            <summary>
            RTPS protocol-related configuration settings for the RTPS reliable reader associated with a built-in publication reader.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_publication_reader</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.PublicationReaderResourceLimits">
            <summary>
            Resource limits.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_publication_reader_resource_limits</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.SubscriptionReader">
            <summary>
            RTPS protocol-related configuration settings for the RTPS reliable reader associated with a built-in subscription reader.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_subscription_reader</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.SubscriptionReaderResourceLimits">
            <summary>
            Resource limits.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_subscription_reader_resource_limits</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.PublicationWriter">
            <summary>
            RTPS protocol-related configuration settings for the RTPS reliable writer associated with a built-in publication writer.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_publication_writer</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.PublicationWriterDataLifecycle">
            <summary>
            Writer data lifecycle settings for a built-in publication writer.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_publication_writer_data_lifecycle</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.SubscriptionWriter">
            <summary>
            RTPS protocol-related configuration settings for the RTPS reliable writer associated with a built-in subscription writer.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_subscription_writer</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.SubscriptionWriterDataLifecycle">
            <summary>
            Writer data lifecycle settings for a built-in subscription writer.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_subscription_writer_data_lifecycle</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.BuiltinDiscoveryPlugins">
            <summary>
            The mask kind for built-in discovery plugins.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_builtin_discovery_plugins</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.ParticipantMessageReaderReliabilityKind">
            <summary>
            Reliability policy for a built-in participant message reader.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_participant_message_reader_reliability_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.ParticipantMessageReader">
            <summary>
            RTPS reliable reader protocol-related configuration settings for a built-in participant message reader.
            This parameter only has effect if <see cref="P:Rti.Dds.Core.Policy.DiscoveryConfig.ParticipantMessageReaderReliabilityKind"/>
            is set to <see cref="M:Rti.Dds.Core.Policy.ReliabilityKind.#ctor"/>.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_participant_message_reader</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.ParticipantMessageWriter">
            <summary>
            RTPS protocol-related configuration settings for the RTPS reliable writer associated with the built-in participant message writer.
            This parameter only has effect if the matching participant message reader is configured with <see cref="M:Rti.Dds.Core.Policy.ReliabilityKind.#ctor"/>.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_participant_message_writer</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.PublicationWriterPublishMode">
            <summary>
            Publish mode policy for the built-in publication writer.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_publication_writer_publish_mode</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.SubscriptionWriterPublishMode">
            <summary>
            Publish mode policy for the built-in subscription writer.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_subscription_writer_publish_mode</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.AsynchronousPublisher">
            <summary>
            Asynchronous publishing settings for the discovery <see cref="T:Rti.Dds.Publication.Publisher"/>  and all entities that are created by it.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_asynchronous_publisher</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.DefaultDomainAnnouncementPeriod">
            <summary>
            The period to announce a participant to the default domain 0.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_default_domain_announcement_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.IgnoreDefaultDomainAnnouncements">
            <summary>
            Used to ignore the announcements received by a participant on the default domain 0 corresponding to participants running on domains IDs other than 0.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_ignore_default_domain_announcements</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.ServiceRequestWriter">
            <summary>
            RTPS protocol-related configuration settings for the RTPS reliable writer associated with the built-in ServiceRequest writer.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_service_request_writer</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.ServiceRequestWriterDataLifecycle">
            <summary>
            Writer data lifecycle settings for a built-in ServiceRequest writer.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_service_request_writer_data_lifecycle</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.ServiceRequestWriterPublishMode">
            <summary>
            Publish mode policy for the built-in service request writer.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_service_request_writer_publish_mode</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.ServiceRequestReader">
            <summary>
            RTPS reliable reader protocol-related configuration settings for a built-in ServiceRequest reader.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_service_request_reader</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.LocatorReachabilityAssertPeriod">
            <summary>
            Period at which this DomainParticipant will assert the locators discovered from other DomainParticipants.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_locator_reachability_assert_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.LocatorReachabilityLeaseDuration">
            <summary>
            The time period after which other DomainParticipants can consider one of their locators as "unreachable" if they do not receive a REACHABILITY PING from this DomainParticipant.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_locator_reachability_lease_duration</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.LocatorReachabilityChangeDetectionPeriod">
            <summary>
            Period at which this DomainParticipant will check if its locators are reachable from other DomainParticipants.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_locator_reachability_change_detection_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.SecureVolatileWriter">
            <summary>
            RTPS protocol-related configuration settings for the RTPS reliable writer associated with the built-in secure volatile writer.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_secure_volatile_writer</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.SecureVolatileWriterPublishMode">
            <summary>
            Publish mode policy for the built-in secure volatile writer.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_secure_volatile_writer_publish_mode</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.SecureVolatileReader">
            <summary>
            RTPS reliable reader protocol-related configuration settings for the built-in secure volatile reader.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_secure_volatile_reader</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.EndpointTypeObjectLbSerializationThreshold">
            <summary>
            Option to reduce the size required to propagate a TypeObject in Simple Endpoint Discovery
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_endpoint_type_object_lb_serialization_threshold</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.DnsTrackerPollingPeriod">
            <summary>
            Duration that specifies the period used by the DNS tracker to poll the DNS service and check for changes in the hostnames.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_dns_tracker_polling_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfig.Default">
            <summary>Singleton containing the default value of a DiscoveryConfig</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DiscoveryConfig.With(System.Action{Rti.Dds.Core.Policy.DiscoveryConfigBuilder})">
            <summary>
            Creates a new DiscoveryConfig with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this DiscoveryConfig.
            </param>
            <returns>A new DiscoveryConfig with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DiscoveryConfig.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DiscoveryConfig.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DiscoveryConfig.Equals(Rti.Dds.Core.Policy.DiscoveryConfig)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.DiscoveryConfigBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.DiscoveryConfig"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.#ctor(Rti.Dds.Core.Policy.DiscoveryConfig)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.ParticipantLivelinessLeaseDuration">
            <summary>
            The liveliness lease duration for the participant.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_participant_liveliness_lease_duration</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.ParticipantLivelinessAssertPeriod">
            <summary>
            The period to assert liveliness for the participant.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_participant_liveliness_assert_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.RemoteParticipantPurgeKind">
            <summary>
            The participant's behavior for maintaining knowledge of remote participants (and their contained entities) with which discovery communication has been lost.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_remote_participant_purge_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.MaxLivelinessLossDetectionPeriod">
            <summary>
            The maximum amount of time between when a remote entity stops maintaining its liveliness and when the matched local entity realizes that fact.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_max_liveliness_loss_detection_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.InitialParticipantAnnouncements">
            <summary>
            The number of initial announcements sent when a participant is first enabled or when a remote participant is newly discovered.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_initial_participant_announcements</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.MinInitialParticipantAnnouncementPeriod">
            <summary>
            The minimum period between initial announcements when a participant is first enabled or when a remote participant is newly discovered.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_min_initial_participant_announcement_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.MaxInitialParticipantAnnouncementPeriod">
            <summary>
            The maximum period between initial announcements when a participant is first enabled or when a remote participant is newly discovered.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_max_initial_participant_announcement_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.ParticipantReaderResourceLimits">
            <summary>
            Resource limits.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_participant_reader_resource_limits</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.PublicationReader">
            <summary>
            RTPS protocol-related configuration settings for the RTPS reliable reader associated with a built-in publication reader.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_publication_reader</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.PublicationReaderResourceLimits">
            <summary>
            Resource limits.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_publication_reader_resource_limits</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.SubscriptionReader">
            <summary>
            RTPS protocol-related configuration settings for the RTPS reliable reader associated with a built-in subscription reader.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_subscription_reader</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.SubscriptionReaderResourceLimits">
            <summary>
            Resource limits.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_subscription_reader_resource_limits</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.PublicationWriter">
            <summary>
            RTPS protocol-related configuration settings for the RTPS reliable writer associated with a built-in publication writer.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_publication_writer</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.PublicationWriterDataLifecycle">
            <summary>
            Writer data lifecycle settings for a built-in publication writer.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_publication_writer_data_lifecycle</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.SubscriptionWriter">
            <summary>
            RTPS protocol-related configuration settings for the RTPS reliable writer associated with a built-in subscription writer.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_subscription_writer</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.SubscriptionWriterDataLifecycle">
            <summary>
            Writer data lifecycle settings for a built-in subscription writer.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_subscription_writer_data_lifecycle</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.BuiltinDiscoveryPlugins">
            <summary>
            The kind mask for built-in discovery plugins.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_builtin_discovery_plugins</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.ParticipantMessageReaderReliabilityKind">
            <summary>
            Reliability policy for a built-in participant message reader.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_participant_message_reader_reliability_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.ParticipantMessageReader">
            <summary>
            RTPS reliable reader protocol-related configuration settings for a built-in participant message reader. This parameter only has effect if <see cref="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.ParticipantMessageReaderReliabilityKind"/> is set to <see cref="M:Rti.Dds.Core.Policy.ReliabilityKind.#ctor"/>.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_participant_message_reader</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.ParticipantMessageWriter">
            <summary>
            RTPS protocol-related configuration settings for the RTPS reliable writer associated with the built-in participant message writer. This parameter only has effect if the matching participant message reader is configured with <see cref="M:Rti.Dds.Core.Policy.ReliabilityKind.#ctor"/>.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_participant_message_writer</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.PublicationWriterPublishMode">
            <summary>
            Publish mode policy for the built-in publication writer.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_publication_writer_publish_mode</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.SubscriptionWriterPublishMode">
            <summary>
            Publish mode policy for the built-in subscription writer.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_subscription_writer_publish_mode</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.AsynchronousPublisher">
            <summary>
            Asynchronous publishing settings for the discovery <see cref="T:Rti.Dds.Publication.Publisher"/>  and all entities that are created by it.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_asynchronous_publisher</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.DefaultDomainAnnouncementPeriod">
            <summary>
            The period to announce a participant to the default domain 0.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_default_domain_announcement_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.IgnoreDefaultDomainAnnouncements">
            <summary>
            Used to ignore the announcements received by a participant on the default domain 0 corresponding to participants running on domains IDs other than 0.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_ignore_default_domain_announcements</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.ServiceRequestWriter">
            <summary>
            RTPS protocol-related configuration settings for the RTPS reliable writer associated with the built-in ServiceRequest writer.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_service_request_writer</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.ServiceRequestWriterDataLifecycle">
            <summary>
            Writer data lifecycle settings for a built-in ServiceRequest writer.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_service_request_writer_data_lifecycle</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.ServiceRequestWriterPublishMode">
            <summary>
            Publish mode policy for the built-in service request writer.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_service_request_writer_publish_mode</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.ServiceRequestReader">
            <summary>
            RTPS reliable reader protocol-related configuration settings for a built-in ServiceRequest reader.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_service_request_reader</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.LocatorReachabilityAssertPeriod">
            <summary>
            Period at which this DomainParticipant will assert the locators discovered from other DomainParticipants.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_locator_reachability_assert_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.LocatorReachabilityLeaseDuration">
            <summary>
            The time period after which other DomainParticipants can consider one of their locators as "unreachable" if they do not receive a REACHABILITY PING from this DomainParticipant.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_locator_reachability_lease_duration</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.LocatorReachabilityChangeDetectionPeriod">
            <summary>
            Period at which this DomainParticipant will check if its locators are reachable from other DomainParticipants.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_locator_reachability_change_detection_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.SecureVolatileWriter">
            <summary>
            RTPS protocol-related configuration settings for the RTPS reliable writer associated with the built-in secure volatile writer.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_secure_volatile_writer</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.SecureVolatileWriterPublishMode">
            <summary>
            Publish mode policy for the built-in secure volatile writer.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_secure_volatile_writer_publish_mode</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.SecureVolatileReader">
            <summary>
            RTPS reliable reader protocol-related configuration settings for the built-in secure volatile reader.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_secure_volatile_reader</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.EndpointTypeObjectLbSerializationThreshold">
            <summary>
            Option to reduce the size required to propagate a TypeObject in Simple Endpoint Discovery
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_endpoint_type_object_lb_serialization_threshold</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.DnsTrackerPollingPeriod">
            <summary>
            Duration that specifies the period used by the DNS tracker to poll the DNS service and check for changes in the hostnames.
            </summary>
            <remarks>@dref_details_DiscoveryConfigQosPolicy_dns_tracker_polling_period</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DiscoveryConfigBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.DiscoveryConfig"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.BuiltinPluginKind">
            <summary>
            Built-in discovery plugins that can be used.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.BuiltinPluginKind.None">
            <summary>
            No plugins kinds.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.BuiltinPluginKind.BuiltinSdp">
            <summary>
            Simple discovery plugin.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.BuiltinPluginKind.Default">
            <summary>
            The default discovery plugin, same as <see cref="F:Rti.Dds.Core.Policy.BuiltinPluginKind.BuiltinSdp"/>.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.RemoteParticipantPurgeKind">
            <summary>
            The participant's behavior for maintaining knowledge of
            remote participants (and their contained entities) with
            which discovery communication has been lost.
            </summary>
            <remarks>@dref_details_RemoteParticipantPurgeKind</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.RemoteParticipantPurgeKind.LivelinessBased">
            <summary>
            Maintain knowledge of the remote participant for as long as it maintains its liveliness contract.
            </summary>
            <remarks>@dref_details_RemoteParticipantPurgeKind_LIVELINESS_BASED_REMOTE_PARTICIPANT_PURGE</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.RemoteParticipantPurgeKind.None">
            <summary>
            Never "forget" a remote participant with which discovery communication has been lost.
            </summary>
            <remarks>@dref_details_RemoteParticipantPurgeKind_NO_REMOTE_PARTICIPANT_PURGE</remarks>
        </member>
        <member name="T:Rti.Dds.Core.Policy.DomainParticipantResourceLimits">
            <summary>
            Various settings that configure how a <see cref="T:Rti.Dds.Domain.DomainParticipant"/>
            allocates and uses physical memory for internal resources, including the
            maximum sizes of various properties.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.LocalWriterAllocation">
            <summary>
            Allocation settings applied to local DataWriters.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_local_writer_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.LocalReaderAllocation">
            <summary>
            Allocation settings applied to local DataReaders.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_local_reader_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.LocalPublisherAllocation">
            <summary>
            Allocation settings applied to local Publisher.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_local_publisher_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.LocalSubscriberAllocation">
            <summary>
            Allocation settings applied to local Subscriber.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_local_subscriber_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.LocalTopicAllocation">
            <summary>
            Allocation settings applied to local Topic.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_local_topic_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.RemoteWriterAllocation">
            <summary>
            Allocation settings applied to remote DataWriters.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_remote_writer_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.RemoteReaderAllocation">
            <summary>
            Allocation settings applied to remote DataReaders.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_remote_reader_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.RemoteParticipantAllocation">
            <summary>
            Allocation settings applied to remote DomainParticipants.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_remote_participant_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.MatchingWriterReaderPairAllocation">
            <summary>
            Allocation settings applied to matching local writer and remote/local reader pairs.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_matching_writer_reader_pair_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.MatchingReaderWriterPairAllocation">
            <summary>
            Allocation settings applied to matching local reader and remote/local writer pairs.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_matching_reader_writer_pair_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.IgnoredEntityAllocation">
            <summary>
            Allocation settings applied to ignored entities.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_ignored_entity_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.ContentFilteredTopicAllocation">
            <summary>
            Allocation settings applied to content filtered topic.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_content_filtered_topic_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.ContentFilterAllocation">
            <summary>
            Allocation settings applied to content filter.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_content_filter_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.ReadConditionAllocation">
            <summary>
            Allocation settings applied to read condition pool.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_read_condition_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.QueryConditionAllocation">
            <summary>
            Allocation settings applied to query condition pool.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_query_condition_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.OutstandingAsynchronousSampleAllocation">
            <summary>
            Allocation settings applied to the maximum number of samples (from all DataWriter) waiting to be asynchronously written.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_outstanding_asynchronous_sample_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.FlowControllerAllocation">
            <summary>
            Allocation settings applied to flow controllers.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_flow_controller_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.LocalWriterHashBuckets">
            <summary>
            Hash_Buckets settings applied to local DataWriters.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_local_writer_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.LocalReaderHashBuckets">
            <summary>
            Number of hash buckets for local DataReaders.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_local_reader_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.LocalPublisherHashBuckets">
            <summary>
            Number of hash buckets for local Publisher.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_local_publisher_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.LocalSubscriberHashBuckets">
            <summary>
            Number of hash buckets for local Subscriber.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_local_subscriber_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.LocalTopicHashBuckets">
            <summary>
            Number of hash buckets for local Topic.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_local_topic_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.RemoteWriterHashBuckets">
            <summary>
            Number of hash buckets for remote DataWriters.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_remote_writer_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.RemoteReaderHashBuckets">
            <summary>
            Number of hash buckets for remote DataReaders.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_remote_reader_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.RemoteParticipantHashBuckets">
            <summary>
            Number of hash buckets for remote DomainParticipants.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_remote_participant_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.MatchingWriterReaderPairHashBuckets">
            <summary>
            Number of hash buckets for matching local writer and remote/local reader pairs.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_matching_writer_reader_pair_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.MatchingReaderWriterPairHashBuckets">
            <summary>
            Number of hash buckets for matching local reader and remote/local writer pairs.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_matching_reader_writer_pair_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.IgnoredEntityHashBuckets">
            <summary>
            Number of hash buckets for ignored entities.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_ignored_entity_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.ContentFilteredTopicHashBuckets">
            <summary>
            Number of hash buckets for content filtered topics.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_content_filtered_topic_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.ContentFilterHashBuckets">
            <summary>
            Number of hash buckets for content filters.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_content_filter_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.FlowControllerHashBuckets">
            <summary>
            Number of hash buckets for flow controllers.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_flow_controller_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.MaxGatherDestinations">
            <summary>
            Maximum number of destinations per send.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_max_gather_destinations</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.ParticipantUserDataMaxLength">
            <summary>
            Maximum length of user data in DomainParticipantQos and ParticipantBuiltinTopicData
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_participant_user_data_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.InterParticipantDataMaxLength">
            <summary>
            Maximum length of data in the inter-participant channel.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_inter_participant_data_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.TopicDataMaxLength">
            <summary>
            Maximum length of topic data in TopicQos, TopicBuiltinTopicData, PublicationBuiltinTopicData and SubscriptionBuiltinTopicData
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_topic_data_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.PublisherGroupDataMaxLength">
            <summary>
            Maximum length of group data in PublisherQos and PublicationBuiltinTopicData
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_publisher_group_data_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.SubscriberGroupDataMaxLength">
            <summary>
            Maximum length of group data in SubscriberQos and SubscriptionBuiltinTopicData
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_subscriber_group_data_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.WriterUserDataMaxLength">
            <summary>
            Maximum length of user data in DataWriterQos and PublicationBuiltinTopicData
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_writer_user_data_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.ReaderUserDataMaxLength">
            <summary>
            Maximum length of user data in DataReaderQos and SubscriptionBuiltinTopicData
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_reader_user_data_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.MaxPartitions">
            <summary>
            Maximum number of partition name strings allowable in a <see cref="T:Rti.Dds.Core.Policy.Partition"/>.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_max_partitions</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.MaxPartitionCumulativeCharacters">
            <summary>
            Maximum number of combined characters allowable in all partition names in a <see cref="T:Rti.Dds.Core.Policy.Partition"/>.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_max_partition_cumulative_characters</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.DefaultPartitionMatchesAll">
            <summary>
            Determine if the default logical partition is treated as a normal partition string name, or has the special meaning that matches any partition
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_default_partition_matches_all</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.AllowNoPartitions">
            <summary>
            Determine whether an entity must belong to at least one logical partition
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_allow_no_partitions</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.TypeCodeMaxSerializedLength">
            <summary>
            Maximum size of serialized string for type code.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_type_code_max_serialized_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.TypeObjectMaxSerializedLength">
            <summary>
            The maximum length, in bytes, that the buffer to serialize a TypeObject can consume.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_type_object_max_serialized_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.SerializedTypeObjectDynamicAllocationThreshold">
            <summary>
            A threshold, in bytes, for dynamic memory allocation for the deserialized TypeObject.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_deserialized_type_object_dynamic_allocation_threshold</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.TypeObjectMaxDeserializedLength">
            <summary>
            The maximum number of bytes that a deserialized TypeObject can consume.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_type_object_max_deserialized_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.DeserializedTypeObjectDynamicAllocationThreshold">
            <summary>
            A threshold, in bytes, for dynamic memory allocation for the deserialized TypeObject.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_deserialized_type_object_dynamic_allocation_threshold</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.ContentfilterPropertyMaxLength">
            <summary>
            This field is the maximum length of all data related to a Content-filtered topic.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_contentfilter_property_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.ChannelSeqMaxLength">
            <summary>
            Maximum number of channels that can be specified in MultiChannelQosPolicy for MultiChannel DataWriters.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_channel_seq_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.ChannelFilterExpressionMaxLength">
            <summary>
            Maximum length of a channel ChannelSettings_t_filter_expression in a MultiChannel DataWriter.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_channel_filter_expression_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.ParticipantPropertyListMaxLength">
            <summary>
            Maximum number of properties associated with the DomainParticipant.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_participant_property_list_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.ParticipantPropertyStringMaxLength">
            <summary>
            Maximum string length of the properties associated with the DomainParticipant.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_participant_property_string_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.WriterPropertyListMaxLength">
            <summary>
            Maximum number of properties associated with a DataWriter.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_writer_property_list_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.WriterPropertyStringMaxLength">
            <summary>
            Maximum string length of the properties associated with a DataWriter.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_writer_property_string_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.ReaderPropertyListMaxLength">
            <summary>
            Maximum number of properties associated with a DataReader.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_reader_property_list_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.ReaderPropertyStringMaxLength">
            <summary>
            Maximum string length of the properties associated with a DataReader.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_reader_property_string_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.PluginInfoParameterMaxLength">
            <summary>
            Container for all DomainEntity objects.
            </summary>
            <remarks>@dref_details_DomainParticipant</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.MaxEndpointGroups">
            <summary>
            Maximum number of EndpointGroup allowable in a <see cref="T:Rti.Dds.Core.Policy.Availability"/>.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_max_endpoint_groups</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.MaxEndpointGroupCumulativeCharacters">
            <summary>
            Maximum number of combined role_name characters allowed in all EndpointGroup in a <see cref="T:Rti.Dds.Core.Policy.Availability"/>.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_max_endpoint_group_cumulative_characters</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.TransportInfoListMaxLength">
            <summary>
            Maximum number of installed transports to send and receive information about in ParticipantBuiltinTopicData_transport_info.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_transport_info_list_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.IgnoredEntityReplacement">
            <summary>
            Replacement policy for the ignored entities. It sets what entity can be replaced when
            resource limits set in <see cref="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.IgnoredEntityAllocation"/> are reached.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_ignored_entity_replacement_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.RemoteTopicQueryAllocation">
            <summary>
            Allocation settings applied to remote TopicQueries.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_remote_topic_query_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.RemoteTopicQueryHashBuckets">
            <summary>
            Number of hash buckets for remote TopicQueries.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_remote_topic_query_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.WriterDataTagListMaxLength">
            <summary>
            Maximum number of data tags associated with a DataWriter.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_writer_data_tag_list_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.WriterDataTagStringMaxLength">
            <summary>
            Maximum string length of the data tags associated with a DataWriter.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_writer_data_tag_string_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.ReaderDataTagListMaxLength">
            <summary>
            Maximum number of data tags associated with a DataReader.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_reader_data_tag_list_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.ReaderDataTagStringMaxLength">
            <summary>
            Maximum string length of the data tags associated with a DataReader.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_reader_data_tag_string_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.ShmemRefTransferModeMaxSegments">
            <summary>
            Maximum number of segments created by all DataWriters belonging to a DomainParticipant.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_shmem_ref_transfer_mode_max_segments</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.Default">
            <summary>Singleton containing the default value of a DomainParticipantResourceLimits</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.With(System.Action{Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder})">
            <summary>
            Creates a new DomainParticipantResourceLimits with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this DomainParticipantResourceLimits.
            </param>
            <returns>A new DomainParticipantResourceLimits with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.Equals(Rti.Dds.Core.Policy.DomainParticipantResourceLimits)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.DomainParticipantResourceLimits"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.#ctor(Rti.Dds.Core.Policy.DomainParticipantResourceLimits)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.LocalWriterAllocation">
            <summary>
            Allocation settings applied to local DataWriters.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_local_writer_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.LocalReaderAllocation">
            <summary>
            Allocation settings applied to local DataReaders.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_local_reader_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.LocalPublisherAllocation">
            <summary>
            Allocation settings applied to local Publisher.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_local_publisher_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.LocalSubscriberAllocation">
            <summary>
            Allocation settings applied to local Subscriber.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_local_subscriber_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.LocalTopicAllocation">
            <summary>
            Allocation settings applied to local Topic.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_local_topic_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.RemoteWriterAllocation">
            <summary>
            Allocation settings applied to remote DataWriters.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_remote_writer_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.RemoteReaderAllocation">
            <summary>
            Allocation settings applied to remote DataReaders.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_remote_reader_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.RemoteParticipantAllocation">
            <summary>
            Allocation settings applied to remote DomainParticipants.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_remote_participant_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.MatchingWriterReaderPairAllocation">
            <summary>
            Allocation settings applied to matching local writer and remote/local reader pairs.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_matching_writer_reader_pair_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.MatchingReaderWriterPairAllocation">
            <summary>
            Allocation settings applied to matching local reader and remote/local writer pairs.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_matching_reader_writer_pair_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.IgnoredEntityAllocation">
            <summary>
            Allocation settings applied to ignored entities.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_ignored_entity_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.ContentFilteredTopicAllocation">
            <summary>
            Allocation settings applied to content filtered topic.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_content_filtered_topic_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.ContentFilterAllocation">
            <summary>
            Allocation settings applied to content filter.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_content_filter_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.ReadConditionAllocation">
            <summary>
            Allocation settings applied to read condition pool.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_read_condition_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.QueryConditionAllocation">
            <summary>
            Allocation settings applied to query condition pool.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_query_condition_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.OutstandingAsynchronousSampleAllocation">
            <summary>
            Allocation settings applied to the maximum number of samples (from all DataWriter) waiting to be asynchronously written.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_outstanding_asynchronous_sample_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.FlowControllerAllocation">
            <summary>
            Allocation settings applied to flow controllers.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_flow_controller_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.LocalWriterHashBuckets">
            <summary>
            Hash_Buckets settings applied to local DataWriters.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_local_writer_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.LocalReaderHashBuckets">
            <summary>
            Number of hash buckets for local DataReaders.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_local_reader_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.LocalPublisherHashBuckets">
            <summary>
            Number of hash buckets for local Publisher.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_local_publisher_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.LocalSubscriberHashBuckets">
            <summary>
            Number of hash buckets for local Subscriber.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_local_subscriber_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.LocalTopicHashBuckets">
            <summary>
            Number of hash buckets for local Topic.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_local_topic_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.RemoteWriterHashBuckets">
            <summary>
            Number of hash buckets for remote DataWriters.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_remote_writer_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.RemoteReaderHashBuckets">
            <summary>
            Number of hash buckets for remote DataReaders.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_remote_reader_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.RemoteParticipantHashBuckets">
            <summary>
            Number of hash buckets for remote DomainParticipants.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_remote_participant_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.MatchingWriterReaderPairHashBuckets">
            <summary>
            Number of hash buckets for matching local writer and remote/local reader pairs.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_matching_writer_reader_pair_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.MatchingReaderWriterPairHashBuckets">
            <summary>
            Number of hash buckets for matching local reader and remote/local writer pairs.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_matching_reader_writer_pair_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.IgnoredEntityHashBuckets">
            <summary>
            Number of hash buckets for ignored entities.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_ignored_entity_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.ContentFilteredTopicHashBuckets">
            <summary>
            Number of hash buckets for content filtered topics.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_content_filtered_topic_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.ContentFilterHashBuckets">
            <summary>
            Number of hash buckets for content filters.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_content_filter_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.FlowControllerHashBuckets">
            <summary>
            Number of hash buckets for flow controllers.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_flow_controller_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.MaxGatherDestinations">
            <summary>
            Maximum number of destinations per \ndds send.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_max_gather_destinations</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.ParticipantUserDataMaxLength">
            <summary>
            Maximum length of user data in DomainParticipantQos and ParticipantBuiltinTopicData
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_participant_user_data_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.InterParticipantDataMaxLength">
            <summary>
            Maximum length of data in the inter-participant channel.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_inter_participant_data_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.TopicDataMaxLength">
            <summary>
            Maximum length of topic data in TopicQos, TopicBuiltinTopicData, PublicationBuiltinTopicData and SubscriptionBuiltinTopicData
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_topic_data_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.PublisherGroupDataMaxLength">
            <summary>
            Maximum length of group data in PublisherQos and PublicationBuiltinTopicData
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_publisher_group_data_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.SubscriberGroupDataMaxLength">
            <summary>
            Maximum length of group data in SubscriberQos and SubscriptionBuiltinTopicData
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_subscriber_group_data_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.WriterUserDataMaxLength">
            <summary>
            Maximum length of user data in DataWriterQos and PublicationBuiltinTopicData
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_writer_user_data_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.ReaderUserDataMaxLength">
            <summary>
            Maximum length of user data in DataReaderQos and SubscriptionBuiltinTopicData
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_reader_user_data_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.MaxPartitions">
            <summary>
            Maximum number of partition name strings allowable in a <see cref="T:Rti.Dds.Core.Policy.Partition"/>.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_max_partitions</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.MaxPartitionCumulativeCharacters">
            <summary>
            Maximum number of combined characters allowable in all partition names in a <see cref="T:Rti.Dds.Core.Policy.Partition"/>.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_max_partition_cumulative_characters</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.DefaultPartitionMatchesAll">
            <summary>
            Determine if the default logical partition is treated as a normal partition string name, or has the special meaning that matches any partition
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_default_partition_matches_all</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.AllowNoPartitions">
            <summary>
            Determine whether an entity must belong to at least one logical partition
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_allow_no_partitions</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.TypeCodeMaxSerializedLength">
            <summary>
            Maximum size of serialized string for type code.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_type_code_max_serialized_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.TypeObjectMaxSerializedLength">
            <summary>
            The maximum length, in bytes, that the buffer to serialize a TypeObject can consume.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_type_object_max_serialized_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.SerializedTypeObjectDynamicAllocationThreshold">
            <summary>
            A threshold, in bytes, for dynamic memory allocation for the deserialized TypeObject.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_deserialized_type_object_dynamic_allocation_threshold</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.TypeObjectMaxDeserializedLength">
            <summary>
            The maximum number of bytes that a deserialized TypeObject can consume.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_type_object_max_deserialized_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.DeserializedTypeObjectDynamicAllocationThreshold">
            <summary>
            A threshold, in bytes, for dynamic memory allocation for the deserialized TypeObject.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_deserialized_type_object_dynamic_allocation_threshold</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.ContentfilterPropertyMaxLength">
            <summary>
            This field is the maximum length of all data related to a Content-filtered topic.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_contentfilter_property_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.ChannelSeqMaxLength">
            <summary>
            Maximum number of channels that can be specified in MultiChannelQosPolicy for MultiChannel DataWriters.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_channel_seq_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.ChannelFilterExpressionMaxLength">
            <summary>
            Maximum length of a channel ChannelSettings_t_filter_expression in a MultiChannel DataWriter.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_channel_filter_expression_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.ParticipantPropertyListMaxLength">
            <summary>
            Maximum number of properties associated with the DomainParticipant.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_participant_property_list_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.ParticipantPropertyStringMaxLength">
            <summary>
            Maximum string length of the properties associated with the DomainParticipant.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_participant_property_string_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.WriterPropertyListMaxLength">
            <summary>
            Maximum number of properties associated with a DataWriter.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_writer_property_list_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.WriterPropertyStringMaxLength">
            <summary>
            Maximum string length of the properties associated with a DataWriter.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_writer_property_string_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.ReaderPropertyListMaxLength">
            <summary>
            Maximum number of properties associated with a DataReader.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_reader_property_list_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.ReaderPropertyStringMaxLength">
            <summary>
            Maximum string length of the properties associated with a DataReader.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_reader_property_string_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.PluginInfoParameterMaxLength">
            <summary>
            Container for all DomainEntity objects.
            </summary>
            <remarks>@dref_details_DomainParticipant</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.MaxEndpointGroups">
            <summary>
            Maximum number of EndpointGroup allowable in a <see cref="T:Rti.Dds.Core.Policy.Availability"/>.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_max_endpoint_groups</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.MaxEndpointGroupCumulativeCharacters">
            <summary>
            Maximum number of combined role_name characters allowed in all EndpointGroup in a <see cref="T:Rti.Dds.Core.Policy.Availability"/>.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_max_endpoint_group_cumulative_characters</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.TransportInfoListMaxLength">
            <summary>
            Maximum number of installed transports to send and receive information about in ParticipantBuiltinTopicData_transport_info.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_transport_info_list_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.IgnoredEntityReplacement">
            <summary>
            Replacement policy for the ignored entities. It sets what entity can be replaced when resource limits set in DomainParticipantResourceLimitsQosPolicy_ignored_entity_allocation are reached.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_ignored_entity_replacement_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.RemoteTopicQueryAllocation">
            <summary>
            Allocation settings applied to remote TopicQueries.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_remote_topic_query_allocation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.RemoteTopicQueryHashBuckets">
            <summary>
            Number of hash buckets for remote TopicQueries.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_remote_topic_query_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.WriterDataTagListMaxLength">
            <summary>
            Maximum number of data tags associated with a DataWriter.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_writer_data_tag_list_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.WriterDataTagStringMaxLength">
            <summary>
            Maximum string length of the data tags associated with a DataWriter.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_writer_data_tag_string_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.ReaderDataTagListMaxLength">
            <summary>
            Maximum number of data tags associated with a DataReader.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_reader_data_tag_list_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.ReaderDataTagStringMaxLength">
            <summary>
            Maximum string length of the data tags associated with a DataReader.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_reader_data_tag_string_max_length</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.ShmemRefTransferModeMaxSegments">
            <summary>
            Maximum number of segments created by all DataWriters belonging to a DomainParticipant.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsQosPolicy_shmem_ref_transfer_mode_max_segments</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.DomainParticipantResourceLimits"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.IgnoredEntityReplacementKind">
            <summary>
            Available replacement policies for the ignored entities.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsIgnoredEntityReplacementKind</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.IgnoredEntityReplacementKind.NoReplacement">
            <summary>
            Default value for <see cref="P:Rti.Dds.Core.Policy.DomainParticipantResourceLimits.IgnoredEntityReplacement"/>,
            no replacement is done, the ignore will fail if the ignored_entity table is full.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsIgnoredEntityReplacementKind_NO_REPLACEMENT_IGNORED_ENTITY_REPLACEMENT</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.IgnoredEntityReplacementKind.NotAliveFirst">
            <summary>
            If the ignored_entity table is full and if there is at least one ignored participant in the table,
            the participant record that has been not updated for the longest time will be replaced.
            Note that if the table is full and there are no participant records to replace,
            the ignore will fail.
            </summary>
            <remarks>@dref_details_DomainParticipantResourceLimitsIgnoredEntityReplacementKind_NOT_ALIVE_FIRST_IGNORED_ENTITY_REPLACEMENT</remarks>
        </member>
        <member name="T:Rti.Dds.Core.Policy.Durability">
            <summary>
            This QoS policy specifies whether or not DDS will store and
            deliver previously published data samples to new
            <see cref="T:Rti.Dds.Subscription.DataReader`1"/> entities that join the network later.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.Durability.AutoWriterDepth">
            <summary>
            A special value used as the default for <see cref="P:Rti.Dds.Core.Policy.Durability.WriterDepth"/>.
            </summary>
            <remarks>@dref_details_DurabilityQosPolicy_AUTO_WRITER_DEPTH</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Durability.Kind">
            <summary>
            The kind of durability.
            </summary>
            <remarks>@dref_details_DurabilityQosPolicy_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Durability.DirectCommunication">
            <summary>
            @extension Indicates whether or not a TRANSIENT or PERSISTENT
            <see cref="T:Rti.Dds.Subscription.DataReader`1"/> should receive samples
            directly from a TRANSIENT or PERSISTENT <see cref="T:Rti.Dds.Publication.DataWriter`1"/>
            </summary>
            <remarks>@dref_details_DurabilityQosPolicy_direct_communication</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Durability.WriterDepth">
            <summary>
            @extension Indicates the number of samples a durable
            <see cref="T:Rti.Dds.Publication.DataWriter`1"/> will send to a late joining
            <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <remarks>@dref_details_DurabilityQosPolicy_writer_depth</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Durability.Default">
            <summary>Singleton containing the default value of a Durability</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Durability.With(System.Action{Rti.Dds.Core.Policy.DurabilityBuilder})">
            <summary>
            Creates a new Durability with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this Durability.
            </param>
            <returns>A new Durability with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Durability.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Durability.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Durability.Equals(Rti.Dds.Core.Policy.Durability)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.DurabilityBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.Durability"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DurabilityBuilder.#ctor(Rti.Dds.Core.Policy.Durability)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DurabilityBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DurabilityBuilder.Kind">
            <summary>
            The kind of durability.
            </summary>
            <remarks>@dref_details_DurabilityQosPolicy_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DurabilityBuilder.DirectCommunication">
            <summary>
            Read/write property for <see cref="P:Rti.Dds.Core.Policy.Durability.DirectCommunication"/>
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DurabilityBuilder.WriterDepth">
            <summary>
            Read/write property for <see cref="P:Rti.Dds.Core.Policy.Durability.WriterDepth"/>
            </summary>
            <remarks>@dref_details_DurabilityQosPolicy_writer_depth</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DurabilityBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.Durability"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.DurabilityService">
            <summary>
            Configures an external Persistence Service used for Datawriters with a
            <see cref="P:Rti.Dds.Core.Policy.Durability.Kind"/> of <see cref="F:Omg.Dds.Core.Policy.DurabilityKind.Persistent"/>
            or  <see cref="F:Omg.Dds.Core.Policy.DurabilityKind.Transient"/>
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DurabilityService.ServiceCleanupDelay">
            <summary>
            Controls when the service is able to remove all information regarding a data instances.
            </summary>
            <remarks>@dref_details_DurabilityServiceQosPolicy_service_cleanup_delay</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DurabilityService.HistoryKind">
            <summary>
            The kind of history to apply in recouping durable data.
            </summary>
            <remarks>@dref_details_DurabilityServiceQosPolicy_history_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DurabilityService.HistoryDepth">
            <summary>
            Part of history QoS policy to apply when feeding a late joiner.
            </summary>
            <remarks>@dref_details_DurabilityServiceQosPolicy_history_depth</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DurabilityService.MaxSamples">
            <summary>
            Part of resource limits QoS policy to apply when feeding a late joiner.
            </summary>
            <remarks>@dref_details_DurabilityServiceQosPolicy_max_samples</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DurabilityService.MaxInstances">
            <summary>
            Part of resource limits QoS policy to apply when feeding a late joiner.
            </summary>
            <remarks>@dref_details_DurabilityServiceQosPolicy_max_instances</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DurabilityService.MaxSamplesPerInstance">
            <summary>
            Part of resource limits QoS policy to apply when feeding a late joiner.
            </summary>
            <remarks>@dref_details_DurabilityServiceQosPolicy_max_samples_per_instance</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DurabilityService.Default">
            <summary>Singleton containing the default value of a DurabilityService</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DurabilityService.With(System.Action{Rti.Dds.Core.Policy.DurabilityServiceBuilder})">
            <summary>
            Creates a new DurabilityService with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this DurabilityService.
            </param>
            <returns>A new DurabilityService with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DurabilityService.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DurabilityService.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DurabilityService.Equals(Rti.Dds.Core.Policy.DurabilityService)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.DurabilityServiceBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.DurabilityService"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DurabilityServiceBuilder.#ctor(Rti.Dds.Core.Policy.DurabilityService)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DurabilityServiceBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DurabilityServiceBuilder.ServiceCleanupDelay">
            <summary>
            Controls when the service is able to remove all information regarding a data instances.
            </summary>
            <remarks>@dref_details_DurabilityServiceQosPolicy_service_cleanup_delay</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DurabilityServiceBuilder.HistoryKind">
            <summary>
            The kind of history to apply in recouping durable data.
            </summary>
            <remarks>@dref_details_DurabilityServiceQosPolicy_history_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DurabilityServiceBuilder.HistoryDepth">
            <summary>
            Part of history QoS policy to apply when feeding a late joiner.
            </summary>
            <remarks>@dref_details_DurabilityServiceQosPolicy_history_depth</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DurabilityServiceBuilder.MaxSamples">
            <summary>
            Part of resource limits QoS policy to apply when feeding a late joiner.
            </summary>
            <remarks>@dref_details_DurabilityServiceQosPolicy_max_samples</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DurabilityServiceBuilder.MaxInstances">
            <summary>
            Part of resource limits QoS policy to apply when feeding a late joiner.
            </summary>
            <remarks>@dref_details_DurabilityServiceQosPolicy_max_instances</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.DurabilityServiceBuilder.MaxSamplesPerInstance">
            <summary>
            Part of resource limits QoS policy to apply when feeding a late joiner.
            </summary>
            <remarks>@dref_details_DurabilityServiceQosPolicy_max_samples_per_instance</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.DurabilityServiceBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.DurabilityService"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.EndpointGroup">
            <summary>
            Specifies a group of endpoints that can be collectively identified by a
            name and satisfied by a quorum.
            </summary>
            <remarks>@dref_details_EndpointGroup_t</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.EndpointGroup.RoleName">
            <summary>
            Defines the role name of the endpoint group.
            </summary>
            <remarks>@dref_details_EndpointGroup_t_role_name</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.EndpointGroup.QuorumCount">
            <summary>
            Defines the minimum number of members that satisfies the endpoint group.
            </summary>
            <remarks>@dref_details_EndpointGroup_t_quorum_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.EndpointGroup.Default">
            <summary>Singleton containing the default value of a EndpointGroup</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.EndpointGroup.With(System.Action{Rti.Dds.Core.Policy.EndpointGroupBuilder})">
            <summary>
            Creates a new EndpointGroup with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this EndpointGroup.
            </param>
            <returns>A new EndpointGroup with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.EndpointGroup.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.EndpointGroup.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.EndpointGroup.Equals(Rti.Dds.Core.Policy.EndpointGroup)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.EndpointGroupBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.EndpointGroup"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.EndpointGroupBuilder.#ctor(Rti.Dds.Core.Policy.EndpointGroup)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.EndpointGroupBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.EndpointGroupBuilder.RoleName">
            <summary>
            Defines the role name of the endpoint group.
            </summary>
            <remarks>@dref_details_EndpointGroup_t_role_name</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.EndpointGroupBuilder.QuorumCount">
            <summary>
            Defines the minimum number of members that satisfies the endpoint group.
            </summary>
            <remarks>@dref_details_EndpointGroup_t_quorum_count</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.EndpointGroupBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.EndpointGroup"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.EntityFactory">
            <summary>
            Configures whether an Entity that acts as a factory automatically enables
            the entities it creates or not.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.EntityFactory.AutoEnable">
            <summary>
            Automatically enable
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.EntityFactory.ManuallyEnable">
            <summary>
            Indicates that created entities will be enabled manually
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.EntityFactory.Default">
            <summary>
            Default value for this policy
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.EntityFactory.AutoEnableCreatedEntities">
            <summary>
            Specifies whether the entity acting as a factory automatically enables the instances it creates.
            </summary>
            <remarks>@dref_details_EntityFactoryQosPolicy_autoenable_created_entities</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.EntityFactory.WithAutoEnableCreatedEntities(System.Boolean)">
            <summary>
            Returns <see cref="P:Rti.Dds.Core.Policy.EntityFactory.AutoEnable"/> if autoEnable is true, or else
            <see cref="P:Rti.Dds.Core.Policy.EntityFactory.ManuallyEnable"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.EntityFactory.ToString">
            <summary>
            Returns a string representation
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.EntityName">
            <summary>
            Assigns a name and a role name to a <see cref="T:Rti.Dds.Domain.DomainParticipant"/>,
            <see cref="T:Rti.Dds.Publication.Publisher"/>, <see cref="T:Rti.Dds.Subscription.Subscriber"/>,
            <see cref="T:Rti.Dds.Publication.DataWriter`1"/> or <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            Except for <see cref="T:Rti.Dds.Publication.Publisher"/> and <see cref="T:Rti.Dds.Subscription.Subscriber"/>,
            these names will be visible during the discovery process and in RTI tools
            to help you visualize and debug your system.
            </summary>
            <remarks>@dref_details_EntityNameQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.EntityName.Name">
            <summary>
            Gets the value of Name
            </summary>
            <remarks>@dref_details_EntityNameQosPolicy_name</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.EntityName.RoleName">
            <summary>
            Gets the value of RoleName
            </summary>
            <remarks>@dref_details_EntityNameQosPolicy_role_name</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.EntityName.Default">
            <summary>Singleton containing the default value of a EntityName</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.EntityName.#ctor(System.String,System.String)">
            <summary>
            Creates a new EntityName policy
            </summary>
            <param name="name">The entity name (can be null)</param>
            <param name="roleName">The role name (can be null)</param>
        </member>
        <member name="M:Rti.Dds.Core.Policy.EntityName.With(System.Action{Rti.Dds.Core.Policy.EntityNameBuilder})">
            <summary>
            Creates a new EntityName with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the values of this EntityName.
            </param>
            <returns>A new EntityName with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.EntityName.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.EntityName.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.EntityName.Equals(Rti.Dds.Core.Policy.EntityName)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.EntityName.ToString">
            <summary>
            Returns a string representation
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.EntityName.op_Implicit(System.String)~Rti.Dds.Core.Policy.EntityName">
            <summary>
            Implicit conversion from a string to an EntityName (with null RoleName)
            </summary>
            <param name="name">The entity name</param>
        </member>
        <member name="T:Rti.Dds.Core.Policy.EntityNameBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.EntityName"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.EntityNameBuilder.#ctor(Rti.Dds.Core.Policy.EntityName)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.EntityNameBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.EntityNameBuilder.Name">
            <summary>
            Gets the value of Name
            </summary>
            <remarks>@dref_details_EntityNameQosPolicy_name</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.EntityNameBuilder.RoleName">
            <summary>
            Gets the value of RoleName
            </summary>
            <remarks>@dref_details_EntityNameQosPolicy_role_name</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.EntityNameBuilder.Build">
            <summary>
            Creates a immutable object (<see cref="T:Rti.Dds.Core.Policy.EntityName"/>) from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.Event">
            <summary>
            Configures the <see cref="T:Rti.Dds.Domain.DomainParticipant"/> event thread and
            the resources it uses.
            </summary>
            <remarks>@dref_details_EventQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Event.Thread">
            <summary>
            Event thread settings.
            </summary>
            <remarks>@dref_details_EventQosPolicy_thread</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Event.InitialCount">
            <summary>
            The initial number of events.
            </summary>
            <remarks>@dref_details_EventQosPolicy_initial_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Event.MaxCount">
            <summary>
            The maximum number of events.
            </summary>
            <remarks>@dref_details_EventQosPolicy_max_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Event.Default">
            <summary>Singleton containing the default value of a Event</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Event.With(System.Action{Rti.Dds.Core.Policy.EventBuilder})">
            <summary>
            Creates a new Event with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this Event.
            </param>
            <returns>A new Event with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Event.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Event.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Event.Equals(Rti.Dds.Core.Policy.Event)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.EventBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.Event"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.EventBuilder.#ctor(Rti.Dds.Core.Policy.Event)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.EventBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.EventBuilder.Thread">
            <summary>
            Event thread QoS.
            </summary>
            <remarks>@dref_details_EventQosPolicy_thread</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.EventBuilder.InitialCount">
            <summary>
            The initial number of events.
            </summary>
            <remarks>@dref_details_EventQosPolicy_initial_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.EventBuilder.MaxCount">
            <summary>
            The maximum number of events.
            </summary>
            <remarks>@dref_details_EventQosPolicy_max_count</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.EventBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.Event"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.ExclusiveArea">
            <summary>
            Configures concurrency and deadlock prevention capabilities.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ExclusiveArea.UseSharedExclusiveArea">
            <summary>
            Whether the <see cref="T:Rti.Dds.Core.Entity"/> is protected by its own exclusive area or the shared exclusive area.
            </summary>
            <remarks>@dref_details_ExclusiveAreaQosPolicy_use_shared_exclusive_area</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ExclusiveArea.Default">
            <summary>Singleton containing the default value of a ExclusiveArea</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ExclusiveArea.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.ExclusiveArea"/>.
            </summary>
            <param name="useSharedExclusiveArea">The value for <see cref="P:Rti.Dds.Core.Policy.ExclusiveArea.UseSharedExclusiveArea"/></param>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ExclusiveArea.With(System.Action{Rti.Dds.Core.Policy.ExclusiveAreaBuilder})">
            <summary>
            Creates a new ExclusiveArea with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this ExclusiveArea.
            </param>
            <returns>A new ExclusiveArea with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ExclusiveArea.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ExclusiveArea.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ExclusiveArea.Equals(Rti.Dds.Core.Policy.ExclusiveArea)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.ExclusiveAreaBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.ExclusiveArea"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ExclusiveAreaBuilder.#ctor(Rti.Dds.Core.Policy.ExclusiveArea)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ExclusiveAreaBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ExclusiveAreaBuilder.UseSharedExclusiveArea">
            <summary>
            Whether the <see cref="T:Rti.Dds.Core.Entity"/> is protected by its own exclusive area or the shared exclusive area.
            </summary>
            <remarks>@dref_details_ExclusiveAreaQosPolicy_use_shared_exclusive_area</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ExclusiveAreaBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.ExclusiveArea"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.GroupData">
            <summary>
            Attaches a buffer of opaque data that is distributed by means of the
            built-in topics.
            </summary>
            <remarks>@dref_details_GroupDataQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.GroupData.Value">
            <summary>
            An opaque sequence of bytes.
            </summary>
            <remarks>@dref_details_GroupDataQosPolicy_value</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.GroupData.Default">
            <summary>Singleton containing the default value of a GroupData</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.GroupData.#ctor(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Creates a GroupData object with a list of settings
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.GroupData.#ctor(System.Collections.Immutable.ImmutableList{System.Byte})">
            <summary>
            Creates a GroupData object with a list of settings
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.GroupData.With(System.Action{System.Collections.Immutable.ImmutableList{System.Byte}.Builder})">
            <summary>
            Creates a new GroupData with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            list with the current values of this object's <see cref="P:Rti.Dds.Core.Policy.GroupData.Value"/>.
            </param>
            <returns>A new GroupData with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.GroupData.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.GroupData.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.GroupData.Equals(Rti.Dds.Core.Policy.GroupData)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.History">
            <summary>
            Specifies the middleware behavior in the case where
            the value of a sample changes (one or more times)
            before it can be successfully communicated to one or
            more existing subscribers.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.History.Kind">
            <summary>
            Specifies the kind of history to be kept.
            </summary>
            <remarks>@dref_details_HistoryQosPolicy_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.History.Depth">
            <summary>
            Specifies the number of samples to be kept, when <see cref="P:Rti.Dds.Core.Policy.History.Kind"/>
            is <see cref="F:Rti.Dds.Core.Policy.HistoryKind.KeepLast"/>
            </summary>
            <remarks>@dref_details_HistoryQosPolicy_depth</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.History.Default">
            <summary>Singleton containing the default value of a History</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.History.#ctor(Rti.Dds.Core.Policy.HistoryKind,System.Int32)">
            <summary>
            Creates a new instance
            </summary>
            <param name="kind">The value for <see cref="P:Rti.Dds.Core.Policy.History.Kind"/></param>
            <param name="depth">The value for <see cref="P:Rti.Dds.Core.Policy.History.Depth"/></param>
        </member>
        <member name="M:Rti.Dds.Core.Policy.History.With(System.Action{Rti.Dds.Core.Policy.HistoryBuilder})">
            <summary>
            Creates a new History with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this History.
            </param>
            <returns>A new History with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.History.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.History.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.History.Equals(Rti.Dds.Core.Policy.History)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.HistoryBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.History"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.HistoryBuilder.#ctor(Rti.Dds.Core.Policy.History)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.HistoryBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.HistoryBuilder.Kind">
            <summary>
            Specifies the kind of history to be kept.
            </summary>
            <remarks>@dref_details_HistoryQosPolicy_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.HistoryBuilder.Depth">
            <summary>
            Specifies the number of samples to be kept, when <see cref="P:Rti.Dds.Core.Policy.HistoryBuilder.Kind"/> is <see cref="F:Rti.Dds.Core.Policy.HistoryKind.KeepLast"/>
            </summary>
            <remarks>@dref_details_HistoryQosPolicy_depth</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.HistoryBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.History"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.HistoryKind">
            <summary>
            History kinds
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.HistoryKind.KeepLast">
            <summary>
            Keep the last <see cref="P:Rti.Dds.Core.Policy.History.Depth"/> samples.
            </summary>
            <remarks>@dref_details_HistoryQosPolicyKind_KEEP_LAST_HISTORY_QOS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.HistoryKind.KeepAll">
            <summary>
            Keep all the samples.
            </summary>
            <remarks>@dref_details_HistoryQosPolicyKind_KEEP_ALL_HISTORY_QOS</remarks>
        </member>
        <member name="T:Rti.Dds.Core.Policy.InstanceReplacementSettings">
            <summary>
            Instance replacement kind applied to each instance state.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsInstanceReplacementSettings</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.InstanceReplacementSettings.AliveInstanceRemoval">
            <summary>
            Removal kind applied to alive <see cref="F:Omg.Dds.Subscription.InstanceState.Alive"/>)) instances.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsInstanceReplacementSettings_alive_instance_removal</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.InstanceReplacementSettings.DisposedInstanceRemoval">
            <summary>
            Removal kind applied to disposed (<see cref="F:Omg.Dds.Subscription.InstanceState.NotAliveDisposed"/>) instances.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsInstanceReplacementSettings_disposed_instance_removal</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.InstanceReplacementSettings.NoWritersInstanceRemoval">
            <summary>
            Removal kind applied to fully-unregistered (<see cref="F:Omg.Dds.Subscription.InstanceState.NotAliveNoWriters"/>) instances.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsInstanceReplacementSettings_no_writers_instance_removal</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.InstanceReplacementSettings.Default">
            <summary>Singleton containing the default value of a InstanceReplacementSettings</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.InstanceReplacementSettings.With(System.Action{Rti.Dds.Core.Policy.InstanceReplacementSettingsBuilder})">
            <summary>
            Creates a new InstanceReplacementSettings with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this InstanceReplacementSettings.
            </param>
            <returns>A new InstanceReplacementSettings with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.InstanceReplacementSettings.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.InstanceReplacementSettings.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.InstanceReplacementSettings.Equals(Rti.Dds.Core.Policy.InstanceReplacementSettings)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.InstanceReplacementSettingsBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.InstanceReplacementSettings"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.InstanceReplacementSettingsBuilder.#ctor(Rti.Dds.Core.Policy.InstanceReplacementSettings)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.InstanceReplacementSettingsBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.InstanceReplacementSettingsBuilder.AliveInstanceRemoval">
            <summary>
            Removal kind applied to alive (<see cref="F:Omg.Dds.Subscription.InstanceState.Alive"/>) instances.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsInstanceReplacementSettings_alive_instance_removal</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.InstanceReplacementSettingsBuilder.DisposedInstanceRemoval">
            <summary>
            Removal kind applied to disposed (<see cref="F:Omg.Dds.Subscription.InstanceState.NotAliveDisposed"/>) instances.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsInstanceReplacementSettings_disposed_instance_removal</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.InstanceReplacementSettingsBuilder.NoWritersInstanceRemoval">
            <summary>
            Removal kind applied to fully-unregistered (<see cref="F:Omg.Dds.Subscription.InstanceState.NotAliveNoWriters"/>) instances.
            </summary>
            <remarks>@dref_details_DataReaderResourceLimitsInstanceReplacementSettings_no_writers_instance_removal</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.InstanceReplacementSettingsBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.InstanceReplacementSettings"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.InstanceRemovalKind">
            <summary>
            Sets the kinds of instances that can be replaced when instance
            resource limits <see cref="P:Rti.Dds.Core.Policy.ResourceLimits.MaxInstances"/>"
            are reached.
            </summary>
            <remarks>@dref_details_DataReaderInstanceRemovalKind</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.InstanceRemovalKind.NoInstanceRemoval">
            <summary>
            No instance can be removed.
            </summary>
            <remarks>@dref_details_DataReaderInstanceRemovalKind_NO_INSTANCE_REMOVAL</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.InstanceRemovalKind.EmptyInstanceRemoval">
            <summary>
            Only empty instances can be removed.
            </summary>
            <remarks>@dref_details_DataReaderInstanceRemovalKind_EMPTY_INSTANCE_REMOVAL</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.InstanceRemovalKind.FullyProcessedInstanceRemoval">
            <summary>
            Only fully-processed instances can be removed.
            </summary>
            <remarks>@dref_details_DataReaderInstanceRemovalKind_FULLY_PROCESSED_INSTANCE_REMOVAL</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.InstanceRemovalKind.AnyInstanceRemoval">
            <summary>
            Any instance can be removed.
            </summary>
            <remarks>@dref_details_DataReaderInstanceRemovalKind_ANY_INSTANCE_REMOVAL</remarks>
        </member>
        <member name="T:Rti.Dds.Core.Policy.LatencyBudget">
            <summary>
            Provides a hint as to the maximum acceptable delay from the time the
            data is written to the time it is received by the subscribing
            applications.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.LatencyBudget.Duration">
            <summary>
            Duration of the maximum acceptable delay.
            </summary>
            <remarks>@dref_details_LatencyBudgetQosPolicy_duration</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.LatencyBudget.Default">
            <summary>Singleton containing the default value of a LatencyBudget</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.LatencyBudget.#ctor(Omg.Dds.Core.Duration)">
            <summary>
            Creates a new instance
            </summary>
            <param name="duration">The value for <see cref="P:Rti.Dds.Core.Policy.LatencyBudget.Duration"/></param>
        </member>
        <member name="M:Rti.Dds.Core.Policy.LatencyBudget.With(System.Action{Rti.Dds.Core.Policy.LatencyBudgetBuilder})">
            <summary>
            Creates a new LatencyBudget with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this LatencyBudget.
            </param>
            <returns>A new LatencyBudget with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.LatencyBudget.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.LatencyBudget.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.LatencyBudget.Equals(Rti.Dds.Core.Policy.LatencyBudget)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.LatencyBudgetBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.LatencyBudget"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.LatencyBudgetBuilder.#ctor(Rti.Dds.Core.Policy.LatencyBudget)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.LatencyBudgetBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.LatencyBudgetBuilder.Duration">
            <summary>
            Duration of the maximum acceptable delay.
            </summary>
            <remarks>@dref_details_LatencyBudgetQosPolicy_duration</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.LatencyBudgetBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.LatencyBudget"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.Lifespan">
            <summary>
            Specifies how long the data written by a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>
            is considered valid.
            </summary>
            <remarks>@dref_details_LifespanQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Lifespan.Duration">
            <summary>
            Maximum duration for the data's validity.
            </summary>
            <remarks>@dref_details_LifespanQosPolicy_duration</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Lifespan.Default">
            <summary>Singleton containing the default value of a Lifespan</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Lifespan.#ctor(Omg.Dds.Core.Duration)">
            <summary>
            Creates a new instance
            </summary>
            <param name="duration">The value for <see cref="P:Rti.Dds.Core.Policy.Lifespan.Duration"/></param>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Lifespan.With(System.Action{Rti.Dds.Core.Policy.LifespanBuilder})">
            <summary>
            Creates a new Lifespan with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this Lifespan.
            </param>
            <returns>A new Lifespan with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Lifespan.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Lifespan.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Lifespan.Equals(Rti.Dds.Core.Policy.Lifespan)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.LifespanBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.Lifespan"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.LifespanBuilder.#ctor(Rti.Dds.Core.Policy.Lifespan)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.LifespanBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.LifespanBuilder.Duration">
            <summary>
            Maximum duration for the data's validity.
            </summary>
            <remarks>@dref_details_LifespanQosPolicy_duration</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.LifespanBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.Lifespan"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.Liveliness">
            <summary>
            Configures the mechanism that allows <see cref="T:Rti.Dds.Subscription.DataReader`1"/>
            entities to detect when <see cref="T:Rti.Dds.Publication.DataWriter`1"/> entities
            become disconnected or "dead."
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Liveliness.Kind">
            <summary>
            The kind of liveliness desired.
            </summary>
            <remarks>@dref_details_LivelinessQosPolicy_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Liveliness.LeaseDuration">
            <summary>
            The duration within which a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> must be asserted, or else it is assumed to be not alive.
            </summary>
            <remarks>@dref_details_LivelinessQosPolicy_lease_duration</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Liveliness.AssertionsPerLeaseDuration">
            <summary>
            The number of assertions a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> will send during a its <see cref="P:Rti.Dds.Core.Policy.Liveliness.LeaseDuration"/>.
            </summary>
            <remarks>@dref_details_LivelinessQosPolicy_assertions_per_lease_duration</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Liveliness.Default">
            <summary>Singleton containing the default value of a Liveliness</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Liveliness.With(System.Action{Rti.Dds.Core.Policy.LivelinessBuilder})">
            <summary>
            Creates a new Liveliness with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this Liveliness.
            </param>
            <returns>A new Liveliness with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Liveliness.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Liveliness.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Liveliness.Equals(Rti.Dds.Core.Policy.Liveliness)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.LivelinessBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.Liveliness"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.LivelinessBuilder.#ctor(Rti.Dds.Core.Policy.Liveliness)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.LivelinessBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.LivelinessBuilder.Kind">
            <summary>
            The kind of liveliness desired.
            </summary>
            <remarks>@dref_details_LivelinessQosPolicy_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.LivelinessBuilder.LeaseDuration">
            <summary>
            The duration within which a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> must be asserted, or else it is assumed to be not alive.
            </summary>
            <remarks>@dref_details_LivelinessQosPolicy_lease_duration</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.LivelinessBuilder.AssertionsPerLeaseDuration">
            <summary>
            The number of assertions a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> will send during a its <see cref="P:Rti.Dds.Core.Policy.LivelinessBuilder.LeaseDuration"/>.
            </summary>
            <remarks>@dref_details_LivelinessQosPolicy_assertions_per_lease_duration</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.LivelinessBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.Liveliness"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.LivelinessKind">
            <summary>
            Kinds of liveliness
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.LivelinessKind.Automatic">
            <summary>
            (Default) The infrastructure will automatically signal for the writers
            at least as often as required by the writer's <see cref="P:Rti.Dds.Core.Policy.Liveliness.LeaseDuration"/>
            </summary>
            <remarks>@dref_details_LivelinessQosPolicyKind_AUTOMATIC_LIVELINESS_QOS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.LivelinessKind.ManualByParticipant">
            <summary>
            The infrastructure will assume that as long as at least one writer
            belonging to the participant (or the participant itself) has asserted
            its liveliness, then the other writers belonging to the same participant
            are also alive.
            </summary>
            <remarks>@dref_details_LivelinessQosPolicyKind_MANUAL_BY_PARTICIPANT_LIVELINESS_QOS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.LivelinessKind.ManualByTopic">
            <summary>
            The infrastructure will only assume liveliness of a writer if the
            application has asserted liveliness of that writer.
            </summary>
            <remarks>@dref_details_LivelinessQosPolicyKind_MANUAL_BY_TOPIC_LIVELINESS_QOS</remarks>
        </member>
        <member name="T:Rti.Dds.Core.Policy.LocatorFilter">
            <summary>
            Specifies the configuration of an individual channel within a
            <see cref="T:Rti.Dds.Core.Policy.MultiChannel"/> <see cref="T:Rti.Dds.Publication.DataWriter`1"/>.
            </summary>
            <remarks>@dref_details_LocatorFilter_t</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.LocatorFilter.Locators">
            <summary>
            Sequence containing the <see cref="T:Rti.Dds.Core.Locator"/>'s used to specify
            the multicast address locators of an individual channel within a
            <see cref="T:Rti.Dds.Core.Policy.MultiChannel"/> <see cref="T:Rti.Dds.Publication.DataWriter`1"/>.
            </summary>
            <remarks>@dref_details_LocatorFilter_t_locators</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.LocatorFilter.FilterExpression">
            <summary>
            A logical expression used to determine the data that will be published in the channel.
            </summary>
            <remarks>@dref_details_LocatorFilter_t_filter_expression</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.LocatorFilter.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.LocatorFilter.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.LocatorFilter.Equals(Rti.Dds.Core.Policy.LocatorFilter)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.LocatorFilters">
            <summary>
            This policy is only applicable to the built-in topic for a <see cref="N:Rti.Dds.Publication"/>
            </summary>
            <remarks>@dref_details_LocatorFilterQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.LocatorFilters.Filters">
            <summary>
            A sequence of <see cref="T:Rti.Dds.Core.Policy.LocatorFilters"/>. Each <see cref="T:Rti.Dds.Core.Policy.LocatorFilters"/>
            reports the configuration of a single channel of a MultiChannel DataWriter.
            </summary>
            <remarks>@dref_details_LocatorFilterQosPolicy_locator_filters</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.LocatorFilters.FilterName">
            <summary>
            Name of the filter class used to describe the filter expressions of a
            <see cref="T:Rti.Dds.Core.Policy.MultiChannel"/> <see cref="T:Rti.Dds.Publication.DataWriter`1"/>
            </summary>
            <remarks>@dref_details_LocatorFilterQosPolicy_filter_name</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.LocatorFilters.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.LocatorFilters.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.LocatorFilters.Equals(Rti.Dds.Core.Policy.LocatorFilters)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.MultiChannel">
            <summary>
            Configures DataWriter to send data using different multicast groups
            (addresses) based on data value.
            </summary>
            <remarks>@dref_details_MultiChannelQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.MultiChannel.Channels">
            <summary>
            A sequence of <see cref="T:Rti.Dds.Core.Policy.ChannelSettings"/> used to configure the channels' properties. If the length of the sequence is zero, the QoS policy will be ignored.
            </summary>
            <remarks>@dref_details_MultiChannelQosPolicy_channels</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.MultiChannel.FilterName">
            <summary>
            Name of the filter class used to describe the filter expressions of a MultiChannel DataWriter.
            </summary>
            <remarks>@dref_details_MultiChannelQosPolicy_filter_name</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.MultiChannel.Default">
            <summary>Singleton containing the default value of a MultiChannel</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.MultiChannel.With(System.Action{Rti.Dds.Core.Policy.MultiChannelBuilder})">
            <summary>
            Creates a new MultiChannel with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this MultiChannel.
            </param>
            <returns>A new MultiChannel with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.MultiChannel.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.MultiChannel.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.MultiChannel.Equals(Rti.Dds.Core.Policy.MultiChannel)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.MultiChannelBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.MultiChannel"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.MultiChannelBuilder.#ctor(Rti.Dds.Core.Policy.MultiChannel)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.MultiChannelBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.MultiChannelBuilder.Channels">
            <summary>
            A sequence of <see cref="T:Rti.Dds.Core.Policy.ChannelSettings"/> used to configure the channels' properties. If the length of the sequence is zero, the QoS policy will be ignored.
            </summary>
            <remarks>@dref_details_MultiChannelQosPolicy_channels</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.MultiChannelBuilder.FilterName">
            <summary>
            Name of the filter class used to describe the filter expressions of a MultiChannel DataWriter.
            </summary>
            <remarks>@dref_details_MultiChannelQosPolicy_filter_name</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.MultiChannelBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.MultiChannel"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.Ownership">
            <summary>
            Specifies whether it is allowed for multiple <see cref="T:Rti.Dds.Publication.DataWriter`1"/>
            entities to write the same instance of the data and if so, how these
            modifications should be arbitrated.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Ownership.Kind">
            <summary>
            The kind of ownership
            </summary>
            <remarks>@dref_details_OwnershipQosPolicy_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Ownership.Default">
            <summary>Singleton containing the default value of a Ownership</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Ownership.#ctor(Rti.Dds.Core.Policy.OwnershipKind)">
            <summary>
            Creates a new instance
            </summary>
            <param name="kind">The value for <see cref="P:Rti.Dds.Core.Policy.Ownership.Kind"/></param>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Ownership.With(System.Action{Rti.Dds.Core.Policy.OwnershipBuilder})">
            <summary>
            Creates a new Ownership with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this Ownership.
            </param>
            <returns>A new Ownership with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Ownership.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Ownership.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Ownership.Equals(Rti.Dds.Core.Policy.Ownership)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.OwnershipBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.Ownership"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.OwnershipBuilder.#ctor(Rti.Dds.Core.Policy.Ownership)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.OwnershipBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.OwnershipBuilder.Kind">
            <summary>
            The kind of ownership
            </summary>
            <remarks>@dref_details_OwnershipQosPolicy_kind</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.OwnershipBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.Ownership"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.OwnershipKind">
            <summary>
            Kinds of ownership
            </summary>
            <remarks>@dref_details_OwnershipQosPolicyKind</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.OwnershipKind.Shared">
            <summary>
            (Default) Indicates shared ownership for each instance among all
            writers.
            </summary>
            <remarks>@dref_details_OwnershipQosPolicyKind_EXCLUSIVE_OWNERSHIP_QOS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.OwnershipKind.Exclusive">
            <summary>
            Indicates that each instance can only be owned by one writer, but
            the owner of an instance can change dynamically
            </summary>
            <remarks>@dref_details_OwnershipQosPolicyKind_EXCLUSIVE_OWNERSHIP_QOS</remarks>
        </member>
        <member name="T:Rti.Dds.Core.Policy.OwnershipStrength">
            <summary>
            Specifies the value of the strength used to arbitrate among multiple
            <see cref="T:Rti.Dds.Publication.DataWriter`1"/> objects that attempt to modify
            the same instance of a data type.
            </summary>
            <remarks>@dref_details_OwnershipStrengthQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.OwnershipStrength.Value">
            <summary>
            The strength value used to arbitrate among multiple writers.
            </summary>
            <remarks>@dref_details_OwnershipStrengthQosPolicy_value</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.OwnershipStrength.Default">
            <summary>Singleton containing the default value of a OwnershipStrength</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.OwnershipStrength.#ctor(System.Int32)">
            <summary>
            Creates a new OwnershipStrength object using its value
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.OwnershipStrength.With(System.Action{Rti.Dds.Core.Policy.OwnershipStrengthBuilder})">
            <summary>
            Creates a new OwnershipStrength with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this OwnershipStrength.
            </param>
            <returns>A new OwnershipStrength with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.OwnershipStrength.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.OwnershipStrength.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.OwnershipStrength.Equals(Rti.Dds.Core.Policy.OwnershipStrength)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.OwnershipStrengthBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.OwnershipStrength"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.OwnershipStrengthBuilder.#ctor(Rti.Dds.Core.Policy.OwnershipStrength)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.OwnershipStrengthBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.OwnershipStrengthBuilder.Value">
            <summary>
            The strength value used to arbitrate among multiple writers.
            </summary>
            <remarks>@dref_details_OwnershipStrengthQosPolicy_value</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.OwnershipStrengthBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.OwnershipStrength"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.Partition">
            <summary>
            Set of strings that introduces a logical partition among the topics
            visible by a <see cref="T:Rti.Dds.Publication.Publisher"/> and a
            <see cref="T:Rti.Dds.Subscription.Subscriber"/>
            </summary>
            <remarks>@dref_details_PartitionQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Partition.Name">
            <summary>
            A list of partition names
            </summary>
            <remarks>@dref_details_PartitionQosPolicy_name</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Partition.Default">
            <summary>Singleton containing the default value of a Partition</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Partition.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a Partition object with a list of settings
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Partition.#ctor(System.Collections.Immutable.ImmutableList{System.String})">
            <summary>
            Creates a Partition object with a list of settings
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Partition.With(System.Action{System.Collections.Immutable.ImmutableList{System.String}.Builder})">
            <summary>
            Creates a new Partition with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            list with the current values of this object's <see cref="P:Rti.Dds.Core.Policy.Partition.Name"/>.
            </param>
            <returns>A new Partition with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Partition.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Partition.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Partition.Equals(Rti.Dds.Core.Policy.Partition)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.Presentation">
            <summary>
            Specifies how the samples representing changes to data
            instances are presented to a subscribing application.
            </summary>
            <remarks>@dref_details_PresentationQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Presentation.AccessScope">
            <summary>
            Determines the largest scope spanning the entities for which the order and coherency of changes can be preserved.
            </summary>
            <remarks>@dref_details_PresentationQosPolicy_access_scope</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Presentation.CoherentAccess">
            <summary>
            Specifies support for \em coherent access. Controls whether coherent access is supported within the scope \p access_scope.
            </summary>
            <remarks>@dref_details_PresentationQosPolicy_coherent_access</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Presentation.OrderedAccess">
            <summary>
            Specifies support for \em ordered access to the samples received at the subscription end. Controls whether ordered access is supported within the scope \p access_scope.
            </summary>
            <remarks>@dref_details_PresentationQosPolicy_ordered_access</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Presentation.DropIncompleteCoherentSet">
            <summary>
            @extension Indicates whether or not a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> should lose samples from an incomplete coherent set (one for which not all the samples were received). Such samples are reported as lost in the SAMPLE_LOST Status.
            </summary>
            <remarks>@dref_details_PresentationQosPolicy_drop_incomplete_coherent_set</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Presentation.Default">
            <summary>Singleton containing the default value of a Presentation</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Presentation.With(System.Action{Rti.Dds.Core.Policy.PresentationBuilder})">
            <summary>
            Creates a new Presentation with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this Presentation.
            </param>
            <returns>A new Presentation with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Presentation.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Presentation.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Presentation.Equals(Rti.Dds.Core.Policy.Presentation)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.PresentationBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.Presentation"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.PresentationBuilder.#ctor(Rti.Dds.Core.Policy.Presentation)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.PresentationBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.PresentationBuilder.AccessScope">
            <summary>
            Determines the largest scope spanning the entities for which the order and coherency of changes can be preserved.
            </summary>
            <remarks>@dref_details_PresentationQosPolicy_access_scope</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.PresentationBuilder.CoherentAccess">
            <summary>
            Specifies support for \em coherent access. Controls whether coherent access is supported within the scope \p access_scope.
            </summary>
            <remarks>@dref_details_PresentationQosPolicy_coherent_access</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.PresentationBuilder.OrderedAccess">
            <summary>
            Specifies support for \em ordered access to the samples received at the subscription end. Controls whether ordered access is supported within the scope \p access_scope.
            </summary>
            <remarks>@dref_details_PresentationQosPolicy_ordered_access</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.PresentationBuilder.DropIncompleteCoherentSet">
            <summary>
            @extension Indicates whether or not a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> should lose samples from an incomplete coherent set (one for which not all the samples were received). Such samples are reported as lost in the SAMPLE_LOST Status.
            </summary>
            <remarks>@dref_details_PresentationQosPolicy_drop_incomplete_coherent_set</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.PresentationBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.Presentation"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.PresentationAccessScopeKind">
            <summary>
            Access scope determines the largest scope spanning the
            entities for which the order and coherency of changes
            can be preserved.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.PresentationAccessScopeKind.Instance">
            <summary> Scope spans only a single instance </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.PresentationAccessScopeKind.Topic">
            <summary>
            Scope spans all instances within the same writer (or reader)
            but not across instances in different writers (or readers)
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.PresentationAccessScopeKind.Group">
            <summary>
            Scope spans all instances belonging to writers (or readers)
            within the same publisher (or subscriber)
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.PresentationAccessScopeKind.HighestOffered">
            <summary>
            This value only applies to a subscriber. The subscriber will use
            the access scope specified by each publisher.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.Profile">
            <summary>
            Configures the way that XML documents containing QoS profiles are loaded
            by a <see cref="T:Rti.Dds.Core.QosProvider"/>
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Profile.StringProfile">
            <summary>
            Sequence of strings containing a XML document to load.
            </summary>
            <remarks>@dref_details_ProfileQosPolicy_string_profile</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Profile.UrlProfile">
            <summary>
            Sequence of XML URLs containing a set of XML documents to load.
            </summary>
            <remarks>@dref_details_ProfileQosPolicy_url_profile</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Profile.IgnoreUserProfile">
            <summary>
            Ignores the file USER_QOS_PROFILES.xml in the current working directory.
            </summary>
            <remarks>@dref_details_ProfileQosPolicy_ignore_user_profile</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Profile.IgnoreEnvironmentProfile">
            <summary>
            Ignores the value of the NDDS_QOS_PROFILES environment variable.
            </summary>
            <remarks>@dref_details_ProfileQosPolicy_ignore_environment_profile</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Profile.IgnoreResourceProfile">
            <summary>
            Ignores the file NDDS_QOS_PROFILES.xml.
            </summary>
            <remarks>@dref_details_ProfileQosPolicy_ignore_resource_profile</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Profile.Default">
            <summary>Singleton containing the default value of a Profile</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Profile.With(System.Action{Rti.Dds.Core.Policy.ProfileBuilder})">
            <summary>
            Creates a new Profile with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this Profile.
            </param>
            <returns>A new Profile with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Profile.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Profile.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Profile.Equals(Rti.Dds.Core.Policy.Profile)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.ProfileBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.Profile"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ProfileBuilder.#ctor(Rti.Dds.Core.Policy.Profile)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ProfileBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ProfileBuilder.StringProfile">
            <summary>
            Sequence of strings containing an XML document to load.
            </summary>
            <remarks>@dref_details_ProfileQosPolicy_string_profile</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ProfileBuilder.UrlProfile">
            <summary>
            Sequence of URLs or URL groups of XML documents to load.
            </summary>
            <remarks>@dref_details_ProfileQosPolicy_url_profile</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ProfileBuilder.IgnoreUserProfile">
            <summary>
            Ignores the file USER_QOS_PROFILES.xml in the current working directory.
            </summary>
            <remarks>@dref_details_ProfileQosPolicy_ignore_user_profile</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ProfileBuilder.IgnoreEnvironmentProfile">
            <summary>
            Ignores the value of the NDDS_QOS_PROFILES environment variable.
            </summary>
            <remarks>@dref_details_ProfileQosPolicy_ignore_environment_profile</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ProfileBuilder.IgnoreResourceProfile">
            <summary>
            Ignores the file NDDS_QOS_PROFILES.xml.
            </summary>
            <remarks>@dref_details_ProfileQosPolicy_ignore_resource_profile</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ProfileBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.Profile"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.Property">
            <summary>
            @extension Stores key-value string pairs that can configure certain
            Connext DDS parameters not exposed through QoS policies. It can also store and
            propagate through the discovery mechanism application-specific information
            associated with an <see cref="T:Rti.Dds.Core.Entity"/>.
            </summary>
            <remarks>@dref_details_PropertyQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Property.Value">
            <summary>
            Gets the dictionary containing the properties
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Property.Default">
            <summary>Singleton containing the default value, an empty dictionary</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Property.FromDictionary(System.Collections.Generic.IDictionary{System.String,Rti.Dds.Core.Policy.Property.Entry})">
            <summary>
            Creates a Property object with the keys and entries in a Dictionary
            </summary>
            <param name="value">The key-entry pairs</param>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Property.FromDictionary(System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Creates a Property object with the keys and values in a Dictionary,
            with all entries having the same <see cref="P:Rti.Dds.Core.Policy.Property.Entry.Propagate"/> value.
            </summary>
            <param name="dict">The key-value pairs</param>
            <param name="propagate">
            Whether to propagate all or none of the properties in the dictionary
            </param>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Property.FromDictionary(System.Collections.Immutable.ImmutableDictionary{System.String,Rti.Dds.Core.Policy.Property.Entry})">
            <summary>
            Creates a Property object with the key-value pairs in a Dictionary
            </summary>
            <param name="value">The key-value pairs</param>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Property.With(System.Action{System.Collections.Immutable.ImmutableDictionary{System.String,Rti.Dds.Core.Policy.Property.Entry}.Builder})">
            <summary>
            Creates a new Property with a set of changes specified in an Action
            </summary>
            <param name="build">
            An action (typically a lambda function) that receives a dictionary
            builder containing the current properties and allows
            adding, removing, or replacing.
            </param>
            <returns>A new Property with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Property.ToStringDictionary">
            <summary>
            Creates a string dictionary from the key-value pairs in this Property.
            The returned dictionary doesn't include the values of
            <see cref="P:Rti.Dds.Core.Policy.Property.Entry.Propagate" />.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Property.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Property.GetHashCode">
            <summary>
            Gets the hash code of <see cref="P:Rti.Dds.Core.Policy.Property.Value"/>.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Property.Equals(Rti.Dds.Core.Policy.Property)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.Property.Entry">
            <summary>
            The entry in the Property dictionary
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Property.Entry.Value">
            <summary>
            The value of the property
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Property.Entry.Propagate">
            <summary>
            Whether to propagate this property on discovery or not
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Property.Entry.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new entry with the value and whether to propagate it
            on discovery
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Property.Entry.op_Implicit(System.String)~Rti.Dds.Core.Policy.Property.Entry">
            <summary>
            Implicit conversion from string to property entry with
            <see cref="P:Rti.Dds.Core.Policy.Property.Entry.Propagate"/> set to false.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Property.Entry.op_Implicit(System.ValueTuple{System.String,System.Boolean})~Rti.Dds.Core.Policy.Property.Entry">
            <summary>
            Implicit conversion from (string, bool) tuple
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.PublishMode">
            <summary>
            Specifies whether a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> sends data
            synchronously or asynchronously.
            </summary>
            <remarks>@dref_details_PublishModeQosPolicy</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.PublishMode.DefaultFlowControllerName">
            <summary>
            Special value for <see cref="P:Rti.Dds.Core.Policy.PublishMode.FlowControllerName"/>
            that refers to the built-in default flow controller.
            </summary>
            <remarks>@dref_details_DEFAULT_FLOW_CONTROLLER_NAME</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.PublishMode.FixedRateFlowControllerName">
            <summary>
            Special value for <see cref="P:Rti.Dds.Core.Policy.PublishMode.FlowControllerName"/>
            that refers to the built-in fixed-rate flow controller.
            </summary>
            <remarks>@dref_details_FIXED_RATE_FLOW_CONTROLLER_NAME</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.PublishMode.Kind">
            <summary>
            Publishing mode
            </summary>
            <remarks>@dref_details_PublishModeQosPolicy_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.PublishMode.FlowControllerName">
            <summary>
            Name of the associated flow controller
            </summary>
            <remarks>@dref_details_PublishModeQosPolicy_flow_controller_name</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.PublishMode.Priority">
            <summary>
            Publication priority
            </summary>
            <remarks>
            <para>
            @see <see cref="T:Rti.Dds.Core.Priority"/> for special values
            </para>
            <para>
            @dref_details_PublishModeQosPolicy_priority
            </para>
            </remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.PublishMode.Default">
            <summary>Singleton containing the default value of a PublishMode</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.PublishMode.With(System.Action{Rti.Dds.Core.Policy.PublishModeBuilder})">
            <summary>
            Creates a new PublishMode with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this PublishMode.
            </param>
            <returns>A new PublishMode with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.PublishMode.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.PublishMode.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.PublishMode.Equals(Rti.Dds.Core.Policy.PublishMode)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.PublishModeBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.PublishMode"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.PublishModeBuilder.#ctor(Rti.Dds.Core.Policy.PublishMode)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.PublishModeBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.PublishModeBuilder.Kind">
            <summary>
            Publishing mode
            </summary>
            <remarks>@dref_details_PublishModeQosPolicy_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.PublishModeBuilder.FlowControllerName">
            <summary>
            Name of the associated flow controller
            </summary>
            <remarks>@dref_details_PublishModeQosPolicy_flow_controller_name</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.PublishModeBuilder.Priority">
            <summary>
            Publication priority
            </summary>
            <remarks>
            <para>
            @see <see cref="T:Rti.Dds.Core.Priority"/> for special values
            </para>
            <para>
            @dref_details_PublishModeQosPolicy_priority
            </para>
            </remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.PublishModeBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.PublishMode"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.PublishModeKind">
            <summary>
            Specifies how RTI Connext sends application data on the network.
            </summary>
            <remarks>@dref_details_PublishModeQosPolicyKind</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.PublishModeKind.Synchronous">
            <summary>
            Indicates to send data synchronously.
            </summary>
            <remarks>@dref_details_PublishModeQosPolicyKind_SYNCHRONOUS_PUBLISH_MODE_QOS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.PublishModeKind.Asynchronous">
            <summary>
            Indicates to send data asynchronously using a separate publishing thread.
            </summary>
            <remarks>@dref_details_PublishModeQosPolicyKind_ASYNCHRONOUS_PUBLISH_MODE_QOS</remarks>
        </member>
        <member name="T:Rti.Dds.Core.Policy.ReaderDataLifecycle">
            <summary>
            Controls how a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> manages the
            lifecycle of the data that it has received.
            </summary>
            <remarks>@dref_details_ReaderDataLifecycleQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ReaderDataLifecycle.AutopurgeNowriterSamplesDelay">
            <summary>
            Minimum duration for which the <see cref="T:Rti.Dds.Subscription.DataReader`1"/> will maintain information regarding an instance once its \p instance_state becomes <see cref="F:Omg.Dds.Subscription.InstanceState.NotAliveNoWriters"/>.
            </summary>
            <remarks>@dref_details_ReaderDataLifecycleQosPolicy_autopurge_nowriter_samples_delay</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ReaderDataLifecycle.AutopurgeDisposedSamplesDelay">
            <summary>
            Minimum duration for which the <see cref="T:Rti.Dds.Subscription.DataReader`1"/> will maintain samples for an instance once its \p instance_state becomes <see cref="F:Omg.Dds.Subscription.InstanceState.NotAliveDisposed"/>.
            </summary>
            <remarks>@dref_details_ReaderDataLifecycleQosPolicy_autopurge_disposed_samples_delay</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ReaderDataLifecycle.AutopurgeDisposedInstancesDelay">
            <summary>
            @extension Minimum duration for which the <see cref="T:Rti.Dds.Subscription.DataReader`1"/> will maintain information about a received instance once its \p instance_state becomes <see cref="F:Omg.Dds.Subscription.InstanceState.NotAliveDisposed"/> and there are no samples for the instance in the DataReader queue.
            </summary>
            <remarks>@dref_details_ReaderDataLifecycleQosPolicy_autopurge_disposed_instances_delay</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ReaderDataLifecycle.AutopurgeNowriterInstancesDelay">
            <summary>
            @extension Minimum duration for which the <see cref="T:Rti.Dds.Subscription.DataReader`1"/> will maintain information about a received instance once its \p instance_state becomes <see cref="F:Omg.Dds.Subscription.InstanceState.NotAliveNoWriters"/> and there are no samples for the instance in the DataReader queue.
            </summary>
            <remarks>@dref_details_ReaderDataLifecycleQosPolicy_autopurge_nowriter_instances_delay</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ReaderDataLifecycle.Default">
            <summary>Singleton containing the default value of a ReaderDataLifecycle</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ReaderDataLifecycle.With(System.Action{Rti.Dds.Core.Policy.ReaderDataLifecycleBuilder})">
            <summary>
            Creates a new ReaderDataLifecycle with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this ReaderDataLifecycle.
            </param>
            <returns>A new ReaderDataLifecycle with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ReaderDataLifecycle.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ReaderDataLifecycle.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ReaderDataLifecycle.Equals(Rti.Dds.Core.Policy.ReaderDataLifecycle)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.ReaderDataLifecycleBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.ReaderDataLifecycle"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ReaderDataLifecycleBuilder.#ctor(Rti.Dds.Core.Policy.ReaderDataLifecycle)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ReaderDataLifecycleBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ReaderDataLifecycleBuilder.AutopurgeNowriterSamplesDelay">
            <summary>
            Minimum duration for which the <see cref="T:Rti.Dds.Subscription.DataReader`1"/> will maintain information regarding an instance once its \p instance_state becomes <see cref="F:Omg.Dds.Subscription.InstanceState.NotAliveNoWriters"/>.
            </summary>
            <remarks>@dref_details_ReaderDataLifecycleQosPolicy_autopurge_nowriter_samples_delay</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ReaderDataLifecycleBuilder.AutopurgeDisposedSamplesDelay">
            <summary>
            Minimum duration for which the <see cref="T:Rti.Dds.Subscription.DataReader`1"/> will maintain samples for an instance once its \p instance_state becomes <see cref="F:Omg.Dds.Subscription.InstanceState.NotAliveDisposed"/>.
            </summary>
            <remarks>@dref_details_ReaderDataLifecycleQosPolicy_autopurge_disposed_samples_delay</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ReaderDataLifecycleBuilder.AutopurgeDisposedInstancesDelay">
            <summary>
            @extension Minimum duration for which the <see cref="T:Rti.Dds.Subscription.DataReader`1"/> will maintain information about a received instance once its \p instance_state becomes <see cref="F:Omg.Dds.Subscription.InstanceState.NotAliveDisposed"/> and there are no samples for the instance in the DataReader queue.
            </summary>
            <remarks>@dref_details_ReaderDataLifecycleQosPolicy_autopurge_disposed_instances_delay</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ReaderDataLifecycleBuilder.AutopurgeNowriterInstancesDelay">
            <summary>
            @extension Minimum duration for which the <see cref="T:Rti.Dds.Subscription.DataReader`1"/> will maintain information about a received instance once its \p instance_state becomes <see cref="F:Omg.Dds.Subscription.InstanceState.NotAliveNoWriters"/> and there are no samples for the instance in the DataReader queue.
            </summary>
            <remarks>@dref_details_ReaderDataLifecycleQosPolicy_autopurge_nowriter_instances_delay</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ReaderDataLifecycleBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.ReaderDataLifecycle"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.ReceiverPool">
            <summary>
            Configures threads used by the middleware to receive and process data
            from transport (for example, UDP sockets).
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.ReceiverPool.LengthAuto">
            <summary>
            A special value indicating that the actual value of BufferSize will be automatically
            resolved.
            </summary>
            <remarks>@dref_details_LENGTH_AUTO</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ReceiverPool.Thread">
            <summary>
            Receiver pool thread(s).
            </summary>
            <remarks>@dref_details_ReceiverPoolQosPolicy_thread</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ReceiverPool.BufferSize">
            <summary>
            The receive buffer size.
            </summary>
            <remarks>@dref_details_ReceiverPoolQosPolicy_buffer_size</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ReceiverPool.BufferAlignment">
            <summary>
            The receive buffer alignment.
            </summary>
            <remarks>@dref_details_ReceiverPoolQosPolicy_buffer_alignment</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ReceiverPool.IsTimestampEnabled">
            <summary>
            Specifies if the receiver needs to timestamp messages
            </summary>
            <remarks>@dref_details_ReceiverPoolQosPolicy_is_timestamp_enabled</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ReceiverPool.Default">
            <summary>Singleton containing the default value of a ReceiverPool</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ReceiverPool.With(System.Action{Rti.Dds.Core.Policy.ReceiverPoolBuilder})">
            <summary>
            Creates a new ReceiverPool with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this ReceiverPool.
            </param>
            <returns>A new ReceiverPool with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ReceiverPool.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ReceiverPool.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ReceiverPool.Equals(Rti.Dds.Core.Policy.ReceiverPool)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.ReceiverPoolBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.ReceiverPool"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ReceiverPoolBuilder.#ctor(Rti.Dds.Core.Policy.ReceiverPool)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ReceiverPoolBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ReceiverPoolBuilder.Thread">
            <summary>
            Receiver pool thread(s).
            </summary>
            <remarks>@dref_details_ReceiverPoolQosPolicy_thread</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ReceiverPoolBuilder.BufferSize">
            <summary>
            The receive buffer size.
            </summary>
            <remarks>@dref_details_ReceiverPoolQosPolicy_buffer_size</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ReceiverPoolBuilder.BufferAlignment">
            <summary>
            The receive buffer alignment.
            </summary>
            <remarks>@dref_details_ReceiverPoolQosPolicy_buffer_alignment</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ReceiverPoolBuilder.IsTimestampEnabled">
            <summary>
            Specifies if the receiver needs to timestamp messages
            </summary>
            <remarks>@dref_details_ReceiverPoolQosPolicy_is_timestamp_enabled</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ReceiverPoolBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.ReceiverPool"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.Reliability">
            <summary>
            Configures the level of reliability offered or requested.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Reliability.Kind">
            <summary>
            Kind of reliability.
            </summary>
            <remarks>@dref_details_ReliabilityQosPolicy_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Reliability.MaxBlockingTime">
            <summary>
            The maximum time a writer may block on a write() call.
            </summary>
            <remarks>@dref_details_ReliabilityQosPolicy_max_blocking_time</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Reliability.AcknowledgmentKind">
            <summary>
            @extension Kind of reliable acknowledgment
            </summary>
            <remarks>@dref_details_ReliabilityQosPolicy_acknowledgment_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Reliability.Default">
            <summary>Singleton containing the default value of a Reliability</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Reliability.With(System.Action{Rti.Dds.Core.Policy.ReliabilityBuilder})">
            <summary>
            Creates a new Reliability with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this Reliability.
            </param>
            <returns>A new Reliability with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Reliability.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Reliability.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Reliability.Equals(Rti.Dds.Core.Policy.Reliability)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.ReliabilityBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.Reliability"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ReliabilityBuilder.#ctor(Rti.Dds.Core.Policy.Reliability)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ReliabilityBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ReliabilityBuilder.Kind">
            <summary>
            Kind of reliability.
            </summary>
            <remarks>@dref_details_ReliabilityQosPolicy_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ReliabilityBuilder.MaxBlockingTime">
            <summary>
            The maximum time a writer may block on a write() call.
            </summary>
            <remarks>@dref_details_ReliabilityQosPolicy_max_blocking_time</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ReliabilityBuilder.AcknowledgmentKind">
            <summary>
            @extension Kind of reliable acknowledgment
            </summary>
            <remarks>@dref_details_ReliabilityQosPolicy_acknowledgment_kind</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ReliabilityBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.Reliability"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.ReliabilityKind">
            <summary>
            Kinds of reliability
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.ReliabilityKind.BestEffort">
            <summary>
            Indicates that it is acceptable not to retry propagation of any samples.
            </summary>
            <remarks>@dref_details_ReliabilityQosPolicyKind_BEST_EFFORT_RELIABILITY_QOS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.ReliabilityKind.Reliable">
            <summary>
            Indicates that the middleware will attempt to deliver all samples
            in its history. Missed samples may be resent.
            </summary>
            <remarks>@dref_details_ReliabilityQosPolicyKind_RELIABLE_RELIABILITY_QOS</remarks>
        </member>
        <member name="T:Rti.Dds.Core.Policy.AcknowledgmentModeKind">
            <summary>
            Kinds of acknowledgment for reliable communication.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.AcknowledgmentModeKind.Protocol">
            <summary>
            Samples are acknowledged at the RTPS protocol level
            </summary>
            <remarks>@dref_details_ReliabilityQosPolicyAcknowledgmentModeKind_PROTOCOL_ACKNOWLEDGMENT_MODE</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.AcknowledgmentModeKind.ApplicationAuto">
            <summary>
            Samples are acknowledged at the application level, automatically
            after a subscribing application has accessed them.
            </summary>
            <remarks>@dref_details_ReliabilityQosPolicyAcknowledgmentModeKind_APPLICATION_AUTO_ACKNOWLEDGMENT_MODE</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.AcknowledgmentModeKind.ApplicationExplicit">
            <summary>
            Samples are individually acknowledged at the application level specifying
            each sequence number.
            </summary>
            <remarks>@dref_details_ReliabilityQosPolicyAcknowledgmentModeKind_APPLICATION_EXPLICIT_ACKNOWLEDGMENT_MODE</remarks>
        </member>
        <member name="T:Rti.Dds.Core.Policy.ResourceLimits">
            <summary>
            Controls the amount of physical memory allocated for DDS entities,
            if dynamic allocations are allowed, and how they occur.
            Also controls memory usage among different instance values for keyed topics.
            </summary>
            <remarks>@dref_details_ResourceLimitsQosPolicy</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.ResourceLimits.LengthUnlimited">
            <summary>
            Value that represents an unlimited length.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ResourceLimits.MaxSamples">
            <summary>
            Represents the maximum samples the middleware can store for any one <see cref="T:Rti.Dds.Publication.DataWriter`1"/> (or <see cref="T:Rti.Dds.Subscription.DataReader`1"/>).
            </summary>
            <remarks>@dref_details_ResourceLimitsQosPolicy_max_samples</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ResourceLimits.MaxInstances">
            <summary>
            Represents the maximum number of instances a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> (or <see cref="T:Rti.Dds.Subscription.DataReader`1"/>) can manage.
            </summary>
            <remarks>@dref_details_ResourceLimitsQosPolicy_max_instances</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ResourceLimits.MaxSamplesPerInstance">
            <summary>
            Represents the maximum number of samples of any one instance a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> (or <see cref="T:Rti.Dds.Subscription.DataReader`1"/>) can manage.
            </summary>
            <remarks>@dref_details_ResourceLimitsQosPolicy_max_samples_per_instance</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ResourceLimits.InitialSamples">
            <summary>
            @extension Represents the initial samples the middleware will store for any one <see cref="T:Rti.Dds.Publication.DataWriter`1"/> (or <see cref="T:Rti.Dds.Subscription.DataReader`1"/>).
            </summary>
            <remarks>@dref_details_ResourceLimitsQosPolicy_initial_samples</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ResourceLimits.InitialInstances">
            <summary>
            @extension Represents the initial number of instances a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> (or <see cref="T:Rti.Dds.Subscription.DataReader`1"/>) will manage.
            </summary>
            <remarks>@dref_details_ResourceLimitsQosPolicy_initial_instances</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ResourceLimits.InstanceHashBuckets">
            <summary>
            @extension Number of hash buckets for instances.
            </summary>
            <remarks>@dref_details_ResourceLimitsQosPolicy_instance_hash_buckets</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ResourceLimits.Default">
            <summary>Singleton containing the default value of a ResourceLimits</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ResourceLimits.With(System.Action{Rti.Dds.Core.Policy.ResourceLimitsBuilder})">
            <summary>
            Creates a new ResourceLimits with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this ResourceLimits.
            </param>
            <returns>A new ResourceLimits with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ResourceLimits.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ResourceLimits.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ResourceLimits.Equals(Rti.Dds.Core.Policy.ResourceLimits)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.ResourceLimitsBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.ResourceLimits"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ResourceLimitsBuilder.#ctor(Rti.Dds.Core.Policy.ResourceLimits)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ResourceLimitsBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ResourceLimitsBuilder.MaxSamples">
            <summary>
            Represents the maximum samples the middleware can store for any one <see cref="T:Rti.Dds.Publication.DataWriter`1"/> (or <see cref="T:Rti.Dds.Subscription.DataReader`1"/>).
            </summary>
            <remarks>@dref_details_ResourceLimitsQosPolicy_max_samples</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ResourceLimitsBuilder.MaxInstances">
            <summary>
            Represents the maximum number of instances a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> (or <see cref="T:Rti.Dds.Subscription.DataReader`1"/>) can manage.
            </summary>
            <remarks>@dref_details_ResourceLimitsQosPolicy_max_instances</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ResourceLimitsBuilder.MaxSamplesPerInstance">
            <summary>
            Represents the maximum number of samples of any one instance a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> (or <see cref="T:Rti.Dds.Subscription.DataReader`1"/>) can manage.
            </summary>
            <remarks>@dref_details_ResourceLimitsQosPolicy_max_samples_per_instance</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ResourceLimitsBuilder.InitialSamples">
            <summary>
            @extension Represents the initial samples the middleware will store for any one <see cref="T:Rti.Dds.Publication.DataWriter`1"/> (or <see cref="T:Rti.Dds.Subscription.DataReader`1"/>).
            </summary>
            <remarks>@dref_details_ResourceLimitsQosPolicy_initial_samples</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ResourceLimitsBuilder.InitialInstances">
            <summary>
            @extension Represents the initial number of instances a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> (or <see cref="T:Rti.Dds.Subscription.DataReader`1"/>) will manage.
            </summary>
            <remarks>@dref_details_ResourceLimitsQosPolicy_initial_instances</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ResourceLimitsBuilder.InstanceHashBuckets">
            <summary>
            @extension Number of hash buckets for instances.
            </summary>
            <remarks>@dref_details_ResourceLimitsQosPolicy_instance_hash_buckets</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ResourceLimitsBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.ResourceLimits"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.RtpsReliableReaderProtocol">
            <summary>
            Qos related to reliable reader protocol defined in RTPS.
            </summary>
            <remarks>@dref_details_RtpsReliableReaderProtocol_t</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableReaderProtocol.MinHeartbeatResponseDelay">
            <summary>
            The minimum delay to respond to a heartbeat.
            </summary>
            <remarks>@dref_details_RtpsReliableReaderProtocol_t_min_heartbeat_response_delay</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableReaderProtocol.MaxHeartbeatResponseDelay">
            <summary>
            The maximum delay to respond to a heartbeat.
            </summary>
            <remarks>@dref_details_RtpsReliableReaderProtocol_t_max_heartbeat_response_delay</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableReaderProtocol.HeartbeatSuppressionDuration">
            <summary>
            The duration a reader ignores consecutively received heartbeats
            </summary>
            <remarks>@dref_details_RtpsReliableReaderProtocol_t_heartbeat_suppression_duration</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableReaderProtocol.NackPeriod">
            <summary>
            The period at which to send NACKs
            </summary>
            <remarks>@dref_details_RtpsReliableReaderProtocol_t_nack_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableReaderProtocol.ReceiveWindowSize">
            <summary>
            The number of received out-of-order samples a reader can keep at a time
            </summary>
            <remarks>@dref_details_RtpsReliableReaderProtocol_t_receive_window_size</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableReaderProtocol.RoundTripTime">
            <summary>
            The duration from sending a NACK to receiving a repair of a sample
            </summary>
            <remarks>@dref_details_RtpsReliableReaderProtocol_t_round_trip_time</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableReaderProtocol.AppAckPeriod">
            <summary>
            The period at which application-level acknowledgment messages are sent
            </summary>
            <remarks>@dref_details_RtpsReliableReaderProtocol_t_app_ack_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableReaderProtocol.MinAppAckResponseKeepDuration">
            <summary>
            Minimum duration for which application-level acknowledgment response data is kept
            </summary>
            <remarks>@dref_details_RtpsReliableReaderProtocol_t_min_app_ack_response_keep_duration</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableReaderProtocol.SamplesPerAppAck">
            <summary>
            The minimum number of samples acknowledged by one application-level acknowledgment message
            </summary>
            <remarks>@dref_details_RtpsReliableReaderProtocol_t_samples_per_app_ack</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableReaderProtocol.Default">
            <summary>Singleton containing the default value of a RtpsReliableReaderProtocol</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.RtpsReliableReaderProtocol.With(System.Action{Rti.Dds.Core.Policy.RtpsReliableReaderProtocolBuilder})">
            <summary>
            Creates a new RtpsReliableReaderProtocol with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this RtpsReliableReaderProtocol.
            </param>
            <returns>A new RtpsReliableReaderProtocol with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.RtpsReliableReaderProtocol.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.RtpsReliableReaderProtocol.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.RtpsReliableReaderProtocol.Equals(Rti.Dds.Core.Policy.RtpsReliableReaderProtocol)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.RtpsReliableReaderProtocolBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.RtpsReliableReaderProtocol"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.RtpsReliableReaderProtocolBuilder.#ctor(Rti.Dds.Core.Policy.RtpsReliableReaderProtocol)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.RtpsReliableReaderProtocolBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableReaderProtocolBuilder.MinHeartbeatResponseDelay">
            <summary>
            The minimum delay to respond to a heartbeat.
            </summary>
            <remarks>@dref_details_RtpsReliableReaderProtocol_t_min_heartbeat_response_delay</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableReaderProtocolBuilder.MaxHeartbeatResponseDelay">
            <summary>
            The maximum delay to respond to a heartbeat.
            </summary>
            <remarks>@dref_details_RtpsReliableReaderProtocol_t_max_heartbeat_response_delay</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableReaderProtocolBuilder.HeartbeatSuppressionDuration">
            <summary>
            The duration a reader ignores consecutively received heartbeats
            </summary>
            <remarks>@dref_details_RtpsReliableReaderProtocol_t_heartbeat_suppression_duration</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableReaderProtocolBuilder.NackPeriod">
            <summary>
            The period at which to send NACKs
            </summary>
            <remarks>@dref_details_RtpsReliableReaderProtocol_t_nack_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableReaderProtocolBuilder.ReceiveWindowSize">
            <summary>
            The number of received out-of-order samples a reader can keep at a time
            </summary>
            <remarks>@dref_details_RtpsReliableReaderProtocol_t_receive_window_size</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableReaderProtocolBuilder.RoundTripTime">
            <summary>
            The duration from sending a NACK to receiving a repair of a sample
            </summary>
            <remarks>@dref_details_RtpsReliableReaderProtocol_t_round_trip_time</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableReaderProtocolBuilder.AppAckPeriod">
            <summary>
            The period at which application-level acknowledgment messages are sent
            </summary>
            <remarks>@dref_details_RtpsReliableReaderProtocol_t_app_ack_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableReaderProtocolBuilder.MinAppAckResponseKeepDuration">
            <summary>
            Minimum duration for which application-level acknowledgment response data is kept
            </summary>
            <remarks>@dref_details_RtpsReliableReaderProtocol_t_min_app_ack_response_keep_duration</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableReaderProtocolBuilder.SamplesPerAppAck">
            <summary>
            The minimum number of samples acknowledged by one application-level acknowledgment message
            </summary>
            <remarks>@dref_details_RtpsReliableReaderProtocol_t_samples_per_app_ack</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.RtpsReliableReaderProtocolBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.RtpsReliableReaderProtocol"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol">
            <summary>
            QoS related to the reliable writer protocol defined in RTPS.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.LowWatermark">
            <summary>
            When the number of unacknowledged samples in the current send window of a reliable writer meets or falls below this threshold, the <see cref="T:Rti.Dds.Core.Status.ReliableWriterCacheChangedStatus"/> is considered to have changed.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_low_watermark</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.HighWatermark">
            <summary>
            When the number of unacknowledged samples in the current send window of a reliable writer meets or exceeds this threshold, the <see cref="T:Rti.Dds.Core.Status.ReliableWriterCacheChangedStatus"/> is considered to have changed.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_high_watermark</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.HeartbeatPeriod">
            <summary>
            The period at which to send heartbeats.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_heartbeat_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.FastHeartbeatPeriod">
            <summary>
            An alternative heartbeat period used when a reliable writer needs to flush its unacknowledged samples more quickly.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_fast_heartbeat_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.LateJoinerHeartbeatPeriod">
            <summary>
            An alternative heartbeat period used when a reliable reader joins late and needs to be caught up on cached samples of a reliable writer more quickly than the normal heartbeat rate.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_late_joiner_heartbeat_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.VirtualHeartbeatPeriod">
            <summary>
            The period at which to send virtual heartbeats. Virtual heartbeats inform the reliable reader about the range of samples currently present, for each virtual GUID, in the reliable writer's queue.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_virtual_heartbeat_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.SamplesPerVirtualHeartbeat">
            <summary>
            The number of samples that a reliable writer has to publish before sending a virtual heartbeat.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_samples_per_virtual_heartbeat</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.MaxHeartbeatRetries">
            <summary>
            The maximum number of \em periodic heartbeat retries before marking a remote reader as inactive.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_max_heartbeat_retries</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.InactivateNonprogressingReaders">
            <summary>
            Whether to treat remote readers as inactive when their NACKs do not progress
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_inactivate_nonprogressing_readers</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.HeartbeatsPerMaxSamples">
            <summary>
            The number of heartbeats per current send window.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_heartbeats_per_max_samples</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.MinNackResponseDelay">
            <summary>
            The minimum delay to respond to a NACK.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_min_nack_response_delay</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.MaxNackResponseDelay">
            <summary>
            The maximum delay to respond to a nack.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_max_nack_response_delay</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.NackSuppressionDuration">
            <summary>
            The duration for ignoring consecutive NACKs that may trigger redundant repairs.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_nack_suppression_duration</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.MaxBytesPerNackResponse">
            <summary>
            The maximum total message size when resending rejected samples.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_max_bytes_per_nack_response</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.DisablePositiveAcksMinSampleKeepDuration">
            <summary>
            The minimum duration a sample is queued for ACK-disabled readers.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_disable_positive_acks_min_sample_keep_duration</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.DisablePositiveAcksMaxSampleKeepDuration">
            <summary>
            The maximum duration a sample is queued for ACK-disabled readers.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_disable_positive_acks_max_sample_keep_duration</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.DisablePositiveAcksSampleMinSeparation">
            <summary>
            The minimum duration a sample is queued for ACK-disabled readers.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_disable_positive_acks_min_sample_keep_duration</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.DisablePositiveAcksEnableAdaptiveSampleKeepDuration">
            <summary>
            Enables dynamic adjustment of sample keep duration in response to congestion.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_disable_positive_acks_enable_adaptive_sample_keep_duration</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.DisablePositiveAcksEnableSpinWait">
            <summary>
            Enables spinning when write is blocked.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_disable_positive_acks_enable_spin_wait</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.DisablePositiveAcksDecreaseSampleKeepDurationFactor">
            <summary>
            Controls rate of contraction of dynamic sample keep duration.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_disable_positive_acks_decrease_sample_keep_duration_factor</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.DisablePositiveAcksIncreaseSampleKeepDurationFactor">
            <summary>
            Controls rate of growth of dynamic sample keep duration.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_disable_positive_acks_increase_sample_keep_duration_factor</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.MinSendWindowSize">
            <summary>
            Minimum size of send window of unacknowledged samples
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_min_send_window_size</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.MaxSendWindowSize">
            <summary>
            Maximum size of send window of unacknowledged samples
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_max_send_window_size</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.SendWindowUpdatePeriod">
            <summary>
            Period in which send window may be dynamically changed
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_send_window_update_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.SendWindowIncreaseFactor">
            <summary>
            Increases send window size by this percentage when reacting dynamically to network conditions
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_send_window_increase_factor</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.SendWindowDecreaseFactor">
            <summary>
            Decreases send window size by this percentage when reacting dynamically to network conditions
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_send_window_decrease_factor</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.EnableMulticastPeriodicHeartbeat">
            <summary>
            Whether periodic heartbeat messages are sent over multicast
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_enable_multicast_periodic_heartbeat</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.MulticastResendThreshold">
            <summary>
            The minimum number of requesting readers needed to trigger a multicast resend
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_multicast_resend_threshold</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.DisableRepairPiggybackHeartbeat">
            <summary>
            Prevents piggyback heartbeats from being sent with repair samples
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_disable_repair_piggyback_heartbeat</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.Default">
            <summary>Singleton containing the default value of a RtpsReliableWriterProtocol</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.With(System.Action{Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder})">
            <summary>
            Creates a new RtpsReliableWriterProtocol with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this RtpsReliableWriterProtocol.
            </param>
            <returns>A new RtpsReliableWriterProtocol with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol.Equals(Rti.Dds.Core.Policy.RtpsReliableWriterProtocol)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.#ctor(Rti.Dds.Core.Policy.RtpsReliableWriterProtocol)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.LowWatermark">
            <summary>
            When the number of unacknowledged samples in the current send window of a reliable writer meets or falls below this threshold, the <see cref="T:Rti.Dds.Core.Status.ReliableWriterCacheChangedStatus"/> is considered to have changed.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_low_watermark</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.HighWatermark">
            <summary>
            When the number of unacknowledged samples in the current send window of a reliable writer meets or exceeds this threshold, the <see cref="T:Rti.Dds.Core.Status.ReliableWriterCacheChangedStatus"/> is considered to have changed.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_high_watermark</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.HeartbeatPeriod">
            <summary>
            The period at which to send heartbeats.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_heartbeat_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.FastHeartbeatPeriod">
            <summary>
            An alternative heartbeat period used when a reliable writer needs to flush its unacknowledged samples more quickly.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_fast_heartbeat_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.LateJoinerHeartbeatPeriod">
            <summary>
            An alternative heartbeat period used when a reliable reader joins late and needs to be caught up on cached samples of a reliable writer more quickly than the normal heartbeat rate.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_late_joiner_heartbeat_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.VirtualHeartbeatPeriod">
            <summary>
            The period at which to send virtual heartbeats. Virtual heartbeats inform the reliable reader about the range of samples currently present, for each virtual GUID, in the reliable writer's queue.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_virtual_heartbeat_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.SamplesPerVirtualHeartbeat">
            <summary>
            The number of samples that a reliable writer has to publish before sending a virtual heartbeat.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_samples_per_virtual_heartbeat</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.MaxHeartbeatRetries">
            <summary>
            The maximum number of \em periodic heartbeat retries before marking a remote reader as inactive.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_max_heartbeat_retries</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.InactivateNonprogressingReaders">
            <summary>
            Whether to treat remote readers as inactive when their NACKs do not progress
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_inactivate_nonprogressing_readers</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.HeartbeatsPerMaxSamples">
            <summary>
            The number of heartbeats per current send window.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_heartbeats_per_max_samples</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.MinNackResponseDelay">
            <summary>
            The minimum delay to respond to a NACK.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_min_nack_response_delay</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.MaxNackResponseDelay">
            <summary>
            The maximum delay to respond to a nack.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_max_nack_response_delay</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.NackSuppressionDuration">
            <summary>
            The duration for ignoring consecutive NACKs that may trigger redundant repairs.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_nack_suppression_duration</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.MaxBytesPerNackResponse">
            <summary>
            The maximum total message size when resending rejected samples.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_max_bytes_per_nack_response</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.DisablePositiveAcksMinSampleKeepDuration">
            <summary>
            The minimum duration a sample is queued for ACK-disabled readers.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_disable_positive_acks_min_sample_keep_duration</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.DisablePositiveAcksMaxSampleKeepDuration">
            <summary>
            The maximum duration a sample is queued for ACK-disabled readers.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_disable_positive_acks_max_sample_keep_duration</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.DisablePositiveAcksSampleMinSeparation">
            <summary>
            The minimum duration a sample is queued for ACK-disabled readers.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_disable_positive_acks_min_sample_keep_duration</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.DisablePositiveAcksEnableAdaptiveSampleKeepDuration">
            <summary>
            Enables dynamic adjustment of sample keep duration in response to congestion.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_disable_positive_acks_enable_adaptive_sample_keep_duration</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.DisablePositiveAcksEnableSpinWait">
            <summary>
            Enables spinning when write is blocked.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_disable_positive_acks_enable_spin_wait</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.DisablePositiveAcksDecreaseSampleKeepDurationFactor">
            <summary>
            Controls rate of contraction of dynamic sample keep duration.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_disable_positive_acks_decrease_sample_keep_duration_factor</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.DisablePositiveAcksIncreaseSampleKeepDurationFactor">
            <summary>
            Controls rate of growth of dynamic sample keep duration.
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_disable_positive_acks_increase_sample_keep_duration_factor</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.MinSendWindowSize">
            <summary>
            Minimum size of send window of unacknowledged samples
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_min_send_window_size</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.MaxSendWindowSize">
            <summary>
            Maximum size of send window of unacknowledged samples
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_max_send_window_size</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.SendWindowUpdatePeriod">
            <summary>
            Period in which send window may be dynamically changed
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_send_window_update_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.SendWindowIncreaseFactor">
            <summary>
            Increases send window size by this percentage when reacting dynamically to network conditions
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_send_window_increase_factor</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.SendWindowDecreaseFactor">
            <summary>
            Decreases send window size by this percentage when reacting dynamically to network conditions
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_send_window_decrease_factor</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.EnableMulticastPeriodicHeartbeat">
            <summary>
            Whether periodic heartbeat messages are sent over multicast
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_enable_multicast_periodic_heartbeat</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.MulticastResendThreshold">
            <summary>
            The minimum number of requesting readers needed to trigger a multicast resend
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_multicast_resend_threshold</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.DisableRepairPiggybackHeartbeat">
            <summary>
            Prevents piggyback heartbeats from being sent with repair samples
            </summary>
            <remarks>@dref_details_RtpsReliableWriterProtocol_t_disable_repair_piggyback_heartbeat</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.RtpsReliableWriterProtocolBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.RtpsReliableWriterProtocol"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.RtpsWellKnownPorts">
            <summary>
            Configures the RTPS well-known ports mapping.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsWellKnownPorts.RtiBackwardsCompatible">
            <summary>
            Well-known port mappings which are compatible with
            previous versions of the RTI Data Distribution Service middleware.
            </summary>
            <remarks>@dref_details_RTI_BACKWARDS_COMPATIBLE_RTPS_WELL_KNOWN_PORTS</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsWellKnownPorts.Interoperable">
            <summary>
            Well-known port mappings which are compliant with
            the standard DDS Interoperability Wire Protocol.
            </summary>
            <remarks>@dref_details_INTEROPERABLE_RTPS_WELL_KNOWN_PORTS</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsWellKnownPorts.Default">
            <summary>
            Default <see cref="T:Rti.Dds.Core.Policy.RtpsWellKnownPorts"/>, same as <see cref="P:Rti.Dds.Core.Policy.RtpsWellKnownPorts.Interoperable"/>.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsWellKnownPorts.PortBase">
            <summary>
            The base port offset.
            </summary>
            <remarks>@dref_details_RtpsWellKnownPorts_t_port_base</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsWellKnownPorts.DomainIdGain">
            <summary>
            Tunable domain gain parameter.
            </summary>
            <remarks>@dref_details_RtpsWellKnownPorts_t_domain_id_gain</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsWellKnownPorts.ParticipantIdGain">
            <summary>
            Tunable participant gain parameter.
            </summary>
            <remarks>@dref_details_RtpsWellKnownPorts_t_participant_id_gain</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsWellKnownPorts.BuiltinMulticastPortOffset">
            <summary>
            Additional offset for \b metatraffic multicast port.
            </summary>
            <remarks>@dref_details_RtpsWellKnownPorts_t_builtin_multicast_port_offset</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsWellKnownPorts.BuiltinUnicastPortOffset">
            <summary>
            Additional offset for \b metatraffic unicast port.
            </summary>
            <remarks>@dref_details_RtpsWellKnownPorts_t_builtin_unicast_port_offset</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsWellKnownPorts.UserMulticastPortOffset">
            <summary>
            Additional offset for \b usertraffic multicast port.
            </summary>
            <remarks>@dref_details_RtpsWellKnownPorts_t_user_multicast_port_offset</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsWellKnownPorts.UserUnicastPortOffset">
            <summary>
            Additional offset for \b usertraffic unicast port.
            </summary>
            <remarks>@dref_details_RtpsWellKnownPorts_t_user_unicast_port_offset</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.RtpsWellKnownPorts.With(System.Action{Rti.Dds.Core.Policy.RtpsWellKnownPortsBuilder})">
            <summary>
            Creates a new RtpsWellKnownPorts with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this RtpsWellKnownPorts.
            </param>
            <returns>A new RtpsWellKnownPorts with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.RtpsWellKnownPorts.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.RtpsWellKnownPorts.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.RtpsWellKnownPorts.Equals(Rti.Dds.Core.Policy.RtpsWellKnownPorts)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.RtpsWellKnownPortsBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.RtpsWellKnownPorts"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.RtpsWellKnownPortsBuilder.#ctor(Rti.Dds.Core.Policy.RtpsWellKnownPorts)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsWellKnownPortsBuilder.PortBase">
            <summary>
            The base port offset.
            </summary>
            <remarks>@dref_details_RtpsWellKnownPorts_t_port_base</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsWellKnownPortsBuilder.DomainIdGain">
            <summary>
            Tunable domain gain parameter.
            </summary>
            <remarks>@dref_details_RtpsWellKnownPorts_t_domain_id_gain</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsWellKnownPortsBuilder.ParticipantIdGain">
            <summary>
            Tunable participant gain parameter.
            </summary>
            <remarks>@dref_details_RtpsWellKnownPorts_t_participant_id_gain</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsWellKnownPortsBuilder.BuiltinMulticastPortOffset">
            <summary>
            Additional offset for \b metatraffic multicast port.
            </summary>
            <remarks>@dref_details_RtpsWellKnownPorts_t_builtin_multicast_port_offset</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsWellKnownPortsBuilder.BuiltinUnicastPortOffset">
            <summary>
            Additional offset for \b metatraffic unicast port.
            </summary>
            <remarks>@dref_details_RtpsWellKnownPorts_t_builtin_unicast_port_offset</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsWellKnownPortsBuilder.UserMulticastPortOffset">
            <summary>
            Additional offset for \b usertraffic multicast port.
            </summary>
            <remarks>@dref_details_RtpsWellKnownPorts_t_user_multicast_port_offset</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.RtpsWellKnownPortsBuilder.UserUnicastPortOffset">
            <summary>
            Additional offset for \b usertraffic unicast port.
            </summary>
            <remarks>@dref_details_RtpsWellKnownPorts_t_user_unicast_port_offset</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.RtpsWellKnownPortsBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.RtpsWellKnownPorts"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.Service">
            <summary>
            Identifies the Connext DDS Service that created an Entity, if any.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Service.Kind">
            <summary>
            The kind of service.
            </summary>
            <remarks>@dref_details_ServiceQosPolicy_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.Service.Default">
            <summary>Singleton containing the default value of a Service</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Service.#ctor(Rti.Dds.Core.Policy.ServiceKind)">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.Service"/>
            </summary>
            <param name="kind">The value for <see cref="P:Rti.Dds.Core.Policy.Service.Kind"/></param>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Service.With(System.Action{Rti.Dds.Core.Policy.ServiceBuilder})">
            <summary>
            Creates a new Service with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this Service.
            </param>
            <returns>A new Service with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Service.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Service.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.Service.Equals(Rti.Dds.Core.Policy.Service)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.ServiceBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.Service"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ServiceBuilder.#ctor(Rti.Dds.Core.Policy.Service)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ServiceBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ServiceBuilder.Kind">
            <summary>
            The kind of service.
            </summary>
            <remarks>@dref_details_ServiceQosPolicy_kind</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ServiceBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.Service"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.ServiceKind">
            <summary>
            Kinds of RTI Services
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.ServiceKind.None">
            <summary> The Entity wasn't created by a Service (default) </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.ServiceKind.Persistence">
            <summary> The Entity was created by RTI Persistence Service </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.ServiceKind.Queueing">
            <summary> The Entity was created by RTI Queueing Service </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.ServiceKind.Routing">
            <summary> The Entity was created by RTI Routing Service </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.ServiceKind.Recording">
            <summary> The Entity was created by RTI Recording Service </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.ServiceKind.Replay">
            <summary> The Entity was created by RTI Replay Service </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.ServiceKind.DatabaseIntegration">
            <summary> The Entity was created by RTI Database Integration Service </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.ServiceKind.WebIntegration">
            <summary> The Entity was created by RTI Web Integration Service </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.SystemResourceLimits">
            <summary>
            @extension Configures DomainParticipant-independent resources
            used by RTI Connext. Mainly used to change the maximum number of
            DomainParticipant entities that can be created within
            a single process (address space).
            </summary>
            <remarks>@dref_details_SystemResourceLimitsQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.SystemResourceLimits.MaxObjectsPerThread">
            <summary>
            Gets the value of MaxObjectsPerThread
            </summary>
            <remarks>@dref_details_SystemResourceLimitsQosPolicy_max_objects_per_thread</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.SystemResourceLimits.Default">
            <summary>Singleton containing the default value of a SystemResourceLimits</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.SystemResourceLimits.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.SystemResourceLimits"/> instance.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.SystemResourceLimits.With(System.Action{Rti.Dds.Core.Policy.SystemResourceLimitsBuilder})">
            <summary>
            Creates a new SystemResourceLimits with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the values of this SystemResourceLimits.
            </param>
            <returns>A new SystemResourceLimits with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.SystemResourceLimits.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.SystemResourceLimits.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.SystemResourceLimits.Equals(Rti.Dds.Core.Policy.SystemResourceLimits)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.SystemResourceLimitsBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.SystemResourceLimits"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.SystemResourceLimitsBuilder.#ctor(Rti.Dds.Core.Policy.SystemResourceLimits)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.SystemResourceLimitsBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.SystemResourceLimitsBuilder.MaxObjectsPerThread">
            <summary>
            Gets the value of MaxObjectsPerThread
            </summary>
            <remarks>@dref_details_SystemResourceLimitsQosPolicy_max_objects_per_thread</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.SystemResourceLimitsBuilder.Build">
            <summary>
            Creates a immutable object (<see cref="T:Rti.Dds.Core.Policy.SystemResourceLimits"/>) from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.ThreadSettings">
            <summary>
            The properties of a thread of execution.
            </summary>
            <remarks>@dref_details_ThreadSettings_t</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ThreadSettings.Mask">
            <summary>
            Describes the type of thread.
            </summary>
            <remarks>@dref_details_ThreadSettings_t_mask</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ThreadSettings.Priority">
            <summary>
            Thread priority.
            </summary>
            <remarks>@dref_details_ThreadSettings_t_priority</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ThreadSettings.StackSize">
            <summary>
            The thread stack-size.
            </summary>
            <remarks>@dref_details_ThreadSettings_t_stack_size</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ThreadSettings.CpuList">
            <summary>
            The list of processors on which the thread(s) may run.
            </summary>
            <remarks>@dref_details_ThreadSettings_t_cpu_list</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ThreadSettings.CpuRotation">
            <summary>
            Determines how processor affinity is applied to multiple threads.
            </summary>
            <remarks>@dref_details_ThreadSettings_t_cpu_rotation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ThreadSettings.Default">
            <summary>Singleton containing the default value of a ThreadSettings</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ThreadSettings.With(System.Action{Rti.Dds.Core.Policy.ThreadSettingsBuilder})">
            <summary>
            Creates a new ThreadSettings with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this ThreadSettings.
            </param>
            <returns>A new ThreadSettings with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ThreadSettings.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ThreadSettings.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ThreadSettings.Equals(Rti.Dds.Core.Policy.ThreadSettings)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.ThreadSettingsBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.ThreadSettings"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ThreadSettingsBuilder.#ctor(Rti.Dds.Core.Policy.ThreadSettings)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ThreadSettingsBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ThreadSettingsBuilder.Mask">
            <summary>
            Describes the type of thread.
            </summary>
            <remarks>@dref_details_ThreadSettings_t_mask</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ThreadSettingsBuilder.Priority">
            <summary>
            Thread priority.
            </summary>
            <remarks>@dref_details_ThreadSettings_t_priority</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ThreadSettingsBuilder.StackSize">
            <summary>
            The thread stack-size.
            </summary>
            <remarks>@dref_details_ThreadSettings_t_stack_size</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ThreadSettingsBuilder.CpuList">
            <summary>
            The list of processors on which the thread(s) may run.
            </summary>
            <remarks>@dref_details_ThreadSettings_t_cpu_list</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.ThreadSettingsBuilder.CpuRotation">
            <summary>
            Determines how processor affinity is applied to multiple threads.
            </summary>
            <remarks>@dref_details_ThreadSettings_t_cpu_rotation</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.ThreadSettingsBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.ThreadSettings"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.ThreadSettingsKind">
            <summary>
            A collection of flags used to configure threads of execution.
            </summary>
            <remarks>@dref_details_ThreadSettingsKind</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.ThreadSettingsKind.FloatingPoint">
            <summary>
            Support floating point.
            </summary>
            <remarks>@dref_details_ThreadSettingsKind_THREAD_SETTINGS_FLOATING_POINT</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.ThreadSettingsKind.Stdio">
            <summary>
            This thread can do standard io
            </summary>
            <remarks>@dref_details_ThreadSettingsKind_THREAD_SETTINGS_STDIO</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.ThreadSettingsKind.RealtimePriority">
            <summary>
             This thread will run in real-time priority mode.
            </summary>
            <remarks>@dref_details_ThreadSettingsKind_THREAD_SETTINGS_REALTIME_PRIORITY</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.ThreadSettingsKind.PriorityEnforce">
            <summary>
            Insist on the specified priority and fail if OS doesn't like it.
            </summary>
            <remarks>@dref_details_ThreadSettingsKind_THREAD_SETTINGS_PRIORITY_ENFORCE</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.ThreadSettingsKind.CancelAsynchronous">
            <summary>
            Indicates to create the thread with the OS default stack size. If not supported,
            will use the platform default.
            </summary>
            <remarks>@dref_details_ThreadSettingsKind_THREAD_SETTINGS_CANCEL_ASYNCHRONOUS</remarks>
        </member>
        <member name="T:Rti.Dds.Core.Policy.CpuRotationKind">
            <summary>
            Determines how <see cref="P:Rti.Dds.Core.Policy.ThreadSettings.CpuList"/> affects processor affinity for
            thread-related QoS policies that apply to multiple threads.
            </summary>
            <remarks>@dref_details_ThreadSettingsCpuRotationKind</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.CpuRotationKind.None">
            <summary>
            Any thread controlled by this QoS can run on any listed
            processor, as determined by OS scheduling.
            </summary>
            <remarks>@dref_details_ThreadSettingsCpuRotationKind_THREAD_SETTINGS_CPU_NO_ROTATION</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.CpuRotationKind.RoundRobin">
            <summary>
            Threads controlled by this QoS will be assigned one processor
            from the list in round-robin order.
            </summary>
            <remarks>@dref_details_ThreadSettingsCpuRotationKind_THREAD_SETTINGS_CPU_RR_ROTATION</remarks>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TimeBasedFilter">
            <summary>
            Allows a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> to indicate that it
            is not interested in all the sample updates that occur within a time period.
            </summary>
            <remarks>@dref_details_TimeBasedFilterQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TimeBasedFilter.MinimumSeparation">
            <summary>
            The minimum separation duration between subsequent samples.
            </summary>
            <remarks>@dref_details_TimeBasedFilterQosPolicy_minimum_separation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TimeBasedFilter.Default">
            <summary>Singleton containing the default value of a TimeBasedFilter</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TimeBasedFilter.#ctor(Omg.Dds.Core.Duration)">
            <summary>
            Creates a new TimeBasedFilter object using its minimum separation
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TimeBasedFilter.With(System.Action{Rti.Dds.Core.Policy.TimeBasedFilterBuilder})">
            <summary>
            Creates a new TimeBasedFilter with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this TimeBasedFilter.
            </param>
            <returns>A new TimeBasedFilter with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TimeBasedFilter.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TimeBasedFilter.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TimeBasedFilter.Equals(Rti.Dds.Core.Policy.TimeBasedFilter)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TimeBasedFilterBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.TimeBasedFilter"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TimeBasedFilterBuilder.#ctor(Rti.Dds.Core.Policy.TimeBasedFilter)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TimeBasedFilterBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TimeBasedFilterBuilder.MinimumSeparation">
            <summary>
            The minimum separation duration between subsequent samples.
            </summary>
            <remarks>@dref_details_TimeBasedFilterQosPolicy_minimum_separation</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TimeBasedFilterBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.TimeBasedFilter"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TopicData">
            <summary>
            Attaches a buffer of opaque data that is distributed by means of the
            built-in topics.
            </summary>
            <remarks>@dref_details_TopicDataQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TopicData.Value">
            <summary>
            An opaque sequence of bytes.
            </summary>
            <remarks>@dref_details_TopicDataQosPolicy_value</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TopicData.Default">
            <summary>Singleton containing the default value of a TopicData</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TopicData.#ctor(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Creates a TopicData object with a list of settings
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TopicData.#ctor(System.Collections.Immutable.ImmutableList{System.Byte})">
            <summary>
            Creates a TopicData object with a list of settings
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TopicData.With(System.Action{System.Collections.Immutable.ImmutableList{System.Byte}.Builder})">
            <summary>
            Creates a new TopicData with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            list with the current values of this object's <see cref="P:Rti.Dds.Core.Policy.TopicData.Value"/>.
            </param>
            <returns>A new TopicData with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TopicData.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TopicData.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TopicData.Equals(Rti.Dds.Core.Policy.TopicData)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TopicQueryDispatch">
            <summary>
            Configures the ability of a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> to
            publish samples in response to a <see cref="T:Rti.Dds.Core.Policy.TopicQueryDispatch"/>.
            </summary>
            <remarks>@dref_details_TopicQueryDispatchQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TopicQueryDispatch.Enable">
            <summary>
            Allows this writer to dispatch TopicQueries
            </summary>
            <remarks>@dref_details_TopicQueryDispatchQosPolicy_enable</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TopicQueryDispatch.PublicationPeriod">
            <summary>
            Sets the periodic interval at which samples are published.
            </summary>
            <remarks>@dref_details_TopicQueryDispatchQosPolicy_publication_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TopicQueryDispatch.SamplesPerPeriod">
            <summary>
            Sets the maximum number of samples to publish in each publication_period.
            </summary>
            <remarks>@dref_details_TopicQueryDispatchQosPolicy_samples_per_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TopicQueryDispatch.Default">
            <summary>Singleton containing the default value of a TopicQueryDispatch</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TopicQueryDispatch.With(System.Action{Rti.Dds.Core.Policy.TopicQueryDispatchBuilder})">
            <summary>
            Creates a new TopicQueryDispatch with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this TopicQueryDispatch.
            </param>
            <returns>A new TopicQueryDispatch with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TopicQueryDispatch.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TopicQueryDispatch.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TopicQueryDispatch.Equals(Rti.Dds.Core.Policy.TopicQueryDispatch)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TopicQueryDispatchBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.TopicQueryDispatch"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TopicQueryDispatchBuilder.#ctor(Rti.Dds.Core.Policy.TopicQueryDispatch)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TopicQueryDispatchBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TopicQueryDispatchBuilder.Enable">
            <summary>
            Allows this writer to dispatch TopicQueries
            </summary>
            <remarks>@dref_details_TopicQueryDispatchQosPolicy_enable</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TopicQueryDispatchBuilder.PublicationPeriod">
            <summary>
            Sets the periodic interval at which samples are published.
            </summary>
            <remarks>@dref_details_TopicQueryDispatchQosPolicy_publication_period</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TopicQueryDispatchBuilder.SamplesPerPeriod">
            <summary>
            Sets the maximum number of samples to publish in each publication_period.
            </summary>
            <remarks>@dref_details_TopicQueryDispatchQosPolicy_samples_per_period</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TopicQueryDispatchBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.TopicQueryDispatch"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TransportBuiltin">
            <summary>
            Specifies which built-in transports are used.
            </summary>
            <remarks>@dref_details_TransportBuiltinQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportBuiltin.Mask">
            <summary>
            Specifies the built-in transports that are registered automatically
            when the <see cref="T:Rti.Dds.Domain.DomainParticipant"/> is enabled.
            </summary>
            <remarks>@dref_details_TransportBuiltinQosPolicy_mask</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportBuiltin.Default">
            <summary>Singleton containing the default value of a TransportBuiltin</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportBuiltin.#ctor(Rti.Dds.Core.Policy.TransportBuiltinMask)">
            <summary>
            Creates an <see cref="T:Rti.Dds.Core.Policy.TransportBuiltin"/> policy with the
            built-in transports specified in the mask
            </summary>
            <param name="mask"></param>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportBuiltin.With(System.Action{Rti.Dds.Core.Policy.TransportBuiltinBuilder})">
            <summary>
            Creates a new TransportBuiltin with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this TransportBuiltin.
            </param>
            <returns>A new TransportBuiltin with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportBuiltin.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportBuiltin.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportBuiltin.Equals(Rti.Dds.Core.Policy.TransportBuiltin)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TransportBuiltinBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.TransportBuiltin"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportBuiltinBuilder.#ctor(Rti.Dds.Core.Policy.TransportBuiltin)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportBuiltinBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportBuiltinBuilder.Mask">
            <summary>
            Specifies the built-in transports that are registered automatically
            when the <see cref="T:Rti.Dds.Domain.DomainParticipant"/> is enabled.
            </summary>
            <remarks>@dref_details_TransportBuiltinQosPolicy_mask</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportBuiltinBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.TransportBuiltin"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TransportBuiltinMask">
            <summary>
            The built-in transports
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.TransportBuiltinMask.All">
            <summary> Select all built-in transports </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.TransportBuiltinMask.None">
            <summary> Select no built-in transport </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.TransportBuiltinMask.Udpv4">
            <summary> Built-in UDPv4 transport </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.TransportBuiltinMask.Shmem">
            <summary> Built-in shared memory transport </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.TransportBuiltinMask.Default">
            <summary> Default selection: <see cref="F:Rti.Dds.Core.Policy.TransportBuiltinMask.Udpv4"/> and <see cref="F:Rti.Dds.Core.Policy.TransportBuiltinMask.Shmem"/>  </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.TransportBuiltinMask.Udpv6">
            <summary> Built-in UDPv6 transport </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.TransportBuiltinMask.Udpv4Wan">
            <summary> Built-in UDPv4 asymmetric transport </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TransportBuiltinAlias">
            <summary>
            String aliases for the built-in transports
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.TransportBuiltinAlias.Udpv4">
            <summary> Built-in UDPv4 transport </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.TransportBuiltinAlias.Shmem">
            <summary> Built-in shared memory transport </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.TransportBuiltinAlias.Udpv6">
            <summary> Built-in UDPv6 transport </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.TransportBuiltinAlias.Udpv4Wan">
            <summary> Built-in UDPv4 asymmetric transport </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TransportMulticast">
            <summary>
            Specifies the multicast address on which a <see cref="T:Rti.Dds.Subscription.DataReader`1"/>
            wants to receive its data. It can also specify a port number as well
            as a subset of the available (at the <see cref="T:Rti.Dds.Domain.DomainParticipant"/> level)
            transports with which to receive the multicast data.
            </summary>
            <remarks>@dref_details_TransportMulticastQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportMulticast.Value">
            <summary>
            A sequence of multicast communications TransportMulticastSettings.
            </summary>
            <remarks>@dref_details_TransportMulticastQosPolicy_value</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportMulticast.Kind">
            <summary>
            A value that specifies a way to determine how to obtain the multicast address.
            </summary>
            <remarks>@dref_details_TransportMulticastQosPolicy_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportMulticast.Default">
            <summary>Singleton containing the default value of a TransportMulticast</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportMulticast.With(System.Action{Rti.Dds.Core.Policy.TransportMulticastBuilder})">
            <summary>
            Creates a new TransportMulticast with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this TransportMulticast.
            </param>
            <returns>A new TransportMulticast with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportMulticast.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportMulticast.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportMulticast.Equals(Rti.Dds.Core.Policy.TransportMulticast)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TransportMulticastBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.TransportMulticast"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportMulticastBuilder.#ctor(Rti.Dds.Core.Policy.TransportMulticast)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportMulticastBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportMulticastBuilder.Value">
            <summary>
            A sequence of multicast communications TransportMulticastSettings.
            </summary>
            <remarks>@dref_details_TransportMulticastQosPolicy_value</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportMulticastBuilder.Kind">
            <summary>
            A value that specifies a way to determine how to obtain the multicast address.
            </summary>
            <remarks>@dref_details_TransportMulticastQosPolicy_kind</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportMulticastBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.TransportMulticast"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TransportMulticastKind">
            <summary>
            Transport Multicast Policy Kind.
            </summary>
            <remarks>@dref_details_TransportMulticastQosPolicyKind</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.TransportMulticastKind.Automatic">
            <summary>
            Selects the multicast address automatically.
            </summary>
            <remarks>@dref_details_TransportMulticastQosPolicyKind_AUTOMATIC_TRANSPORT_MULTICAST_QOS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.TransportMulticastKind.UnicastOnly">
            <summary>
            Selects a unicast-only mode.
            </summary>
            <remarks>@dref_details_TransportMulticastQosPolicyKind_UNICAST_ONLY_TRANSPORT_MULTICAST_QOS</remarks>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TransportMulticastMapping">
            <summary>
            Specifies a list of topic_expressions and multicast addresses that
            can be used by an Entity with a specific topic name to receive data.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportMulticastMapping.Value">
            <summary>
            A sequence of multicast communication mappings.
            </summary>
            <remarks>@dref_details_TransportMulticastMappingQosPolicy_value</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportMulticastMapping.Default">
            <summary>Singleton containing the default value of a TransportMulticastMapping</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportMulticastMapping.#ctor(System.Collections.Generic.IEnumerable{Rti.Dds.Core.Policy.MulticastMapping})">
            <summary>
            Creates a TransportMulticastMapping object with a list of settings
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportMulticastMapping.#ctor(System.Collections.Immutable.ImmutableList{Rti.Dds.Core.Policy.MulticastMapping})">
            <summary>
            Creates a TransportMulticastMapping object with a list of settings
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportMulticastMapping.With(System.Action{System.Collections.Immutable.ImmutableList{Rti.Dds.Core.Policy.MulticastMapping}.Builder})">
            <summary>
            Creates a new TransportMulticastMapping with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a list
            builder with the current settings of this TransportMulticastMapping and
            allows adding, removing, or replacing.
            </param>
            <returns>A new TransportMulticastMapping with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportMulticastMapping.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportMulticastMapping.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportMulticastMapping.Equals(Rti.Dds.Core.Policy.TransportMulticastMapping)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.MulticastMapping">
            <summary>
            Maps topics to multicast addresses
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.MulticastMapping.Addresses">
            <summary>
            A string containing a comma-separated list of IP addresses or IP address ranges to be used to receive \em multicast traffic for the entity with a topic that matches the <see cref="P:Rti.Dds.Core.Policy.MulticastMapping.TopicExpression"/>.
            </summary>
            <remarks>@dref_details_TransportMulticastMapping_t_addresses</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.MulticastMapping.TopicExpression">
            <summary>
            A regular expression that will be used to map topic names to corresponding multicast receive addresses.
            </summary>
            <remarks>@dref_details_TransportMulticastMapping_t_topic_expression</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.MulticastMapping.MappingFunction">
            <summary>
            Specifies a function that will define the mapping between a topic name and a specific multicast address from a list of addresses.
            </summary>
            <remarks>@dref_details_TransportMulticastMapping_t_mapping_function</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.MulticastMapping.Default">
            <summary>Singleton containing the default value of a TransportMulticastMapping</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.MulticastMapping.With(System.Action{Rti.Dds.Core.Policy.MulticastMappingBuilder})">
            <summary>
            Creates a new TransportMulticastMapping with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this TransportMulticastMapping.
            </param>
            <returns>A new TransportMulticastMapping with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.MulticastMapping.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.MulticastMapping.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.MulticastMapping.Equals(Rti.Dds.Core.Policy.MulticastMapping)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.MulticastMappingBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.MulticastMapping"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.MulticastMappingBuilder.#ctor(Rti.Dds.Core.Policy.MulticastMapping)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.MulticastMappingBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.MulticastMappingBuilder.Addresses">
            <summary>
            A string containing a comma-separated list of IP addresses or IP address ranges to be used to receive \em multicast traffic for the entity with a topic that matches the <see cref="P:Rti.Dds.Core.Policy.MulticastMappingBuilder.TopicExpression"/>.
            </summary>
            <remarks>@dref_details_TransportMulticastMapping_t_addresses</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.MulticastMappingBuilder.TopicExpression">
            <summary>
            A regular expression that will be used to map topic names to corresponding multicast receive addresses.
            </summary>
            <remarks>@dref_details_TransportMulticastMapping_t_topic_expression</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.MulticastMappingBuilder.MappingFunction">
            <summary>
            Specifies a function that will define the mapping between a topic name and a specific multicast address from a list of addresses.
            </summary>
            <remarks>@dref_details_TransportMulticastMapping_t_mapping_function</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.MulticastMappingBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.MulticastMapping"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.MulticastMappingFunction">
            <summary>
            Identifies an external function
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.MulticastMappingFunction.Dll">
            <summary>
            Specifies a dynamic library that contains a mapping function.
            </summary>
            <remarks>@dref_details_TransportMulticastMappingFunction_t_dll</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.MulticastMappingFunction.FunctionName">
            <summary>
            Specifies the name of a mapping function.
            </summary>
            <remarks>@dref_details_TransportMulticastMappingFunction_t_function_name</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.MulticastMappingFunction.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.MulticastMappingFunction"/>
            </summary>
            <param name="dll">The value for <see cref="P:Rti.Dds.Core.Policy.MulticastMappingFunction.Dll"/></param>
            <param name="functionName">The value for <see cref="P:Rti.Dds.Core.Policy.MulticastMappingFunction.FunctionName"/></param>
        </member>
        <member name="M:Rti.Dds.Core.Policy.MulticastMappingFunction.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.MulticastMappingFunction.Equals(Rti.Dds.Core.Policy.MulticastMappingFunction)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TransportMulticastSettings">
            <summary>
            Represents a list of multicast locators.
            </summary>
            <remarks>@dref_details_TransportMulticastSettings_t</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportMulticastSettings.Transports">
            <summary>
            A sequence of transport aliases that specifies the transports on which to receive multicast traffic for the entity.
            </summary>
            <remarks>@dref_details_TransportMulticastSettings_t_transports</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportMulticastSettings.ReceiveAddress">
            <summary>
            The multicast group address on which the entity can receive data.
            </summary>
            <remarks>@dref_details_TransportMulticastSettings_t_receive_address</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportMulticastSettings.ReceivePort">
            <summary>
            The multicast port on which the entity can receive data.
            </summary>
            <remarks>@dref_details_TransportMulticastSettings_t_receive_port</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportMulticastSettings.Default">
            <summary>Singleton containing the default value of a TransportMulticastSettings</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportMulticastSettings.With(System.Action{Rti.Dds.Core.Policy.TransportMulticastSettingsBuilder})">
            <summary>
            Creates a new TransportMulticastSettings with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this TransportMulticastSettings.
            </param>
            <returns>A new TransportMulticastSettings with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportMulticastSettings.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportMulticastSettings.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportMulticastSettings.Equals(Rti.Dds.Core.Policy.TransportMulticastSettings)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TransportMulticastSettingsBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.TransportMulticastSettings"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportMulticastSettingsBuilder.#ctor(Rti.Dds.Core.Policy.TransportMulticastSettings)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportMulticastSettingsBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportMulticastSettingsBuilder.Transports">
            <summary>
            A sequence of transport aliases that specifies the transports on which to receive \em multicast traffic for the entity.
            </summary>
            <remarks>@dref_details_TransportMulticastSettings_t_transports</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportMulticastSettingsBuilder.ReceiveAddress">
            <summary>
            The multicast group address on which the entity can receive data.
            </summary>
            <remarks>@dref_details_TransportMulticastSettings_t_receive_address</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportMulticastSettingsBuilder.ReceivePort">
            <summary>
            The multicast port on which the entity can receive data.
            </summary>
            <remarks>@dref_details_TransportMulticastSettings_t_receive_port</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportMulticastSettingsBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.TransportMulticastSettings"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TransportPriority">
            <summary>
            Allows the application to take advantage of transports that are capable
            of sending messages with different priorities.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportPriority.Value">
            <summary>
            This policy is a hint to the infrastructure as to how to set the
            priority of the underlying transport used to send the data.
            </summary>
            <remarks>@dref_details_TransportPriorityQosPolicy_value</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportPriority.Default">
            <summary>Singleton containing the default value of a TransportPriority</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportPriority.#ctor(System.Int32)">
            <summary>
            Creates a new instance
            </summary>
            <param name="value">The priority value</param>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportPriority.With(System.Action{Rti.Dds.Core.Policy.TransportPriorityBuilder})">
            <summary>
            Creates a new TransportPriority with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this TransportPriority.
            </param>
            <returns>A new TransportPriority with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportPriority.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportPriority.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportPriority.Equals(Rti.Dds.Core.Policy.TransportPriority)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TransportPriorityBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.TransportPriority"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportPriorityBuilder.#ctor(Rti.Dds.Core.Policy.TransportPriority)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportPriorityBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportPriorityBuilder.Value">
            <summary>
            This policy is a hint to the infrastructure as to how to set the priority of the underlying transport used to send the data.
            </summary>
            <remarks>@dref_details_TransportPriorityQosPolicy_value</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportPriorityBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.TransportPriority"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TransportSelection">
            <summary>
            Specifies the transports that a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>
             or a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may use to send or
            receive data.
            </summary>
            <remarks>@dref_details_TransportSelectionQosPolicy_enabled_transports</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportSelection.EnabledTransports">
            <summary>
            A sequence of transport aliases that specifies the transport instances available for use by the entity.
            </summary>
            <remarks>@dref_details_TransportSelectionQosPolicy_enabled_transports</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportSelection.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new TransportSelection object using a list of its enabled transports
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportSelection.Default">
            <summary>Singleton containing the default value of a TransportSelection</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportSelection.With(System.Action{Rti.Dds.Core.Policy.TransportSelectionBuilder})">
            <summary>
            Creates a new TransportSelection with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this TransportSelection.
            </param>
            <returns>A new TransportSelection with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportSelection.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportSelection.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportSelection.Equals(Rti.Dds.Core.Policy.TransportSelection)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TransportSelectionBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.TransportSelection"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportSelectionBuilder.#ctor(Rti.Dds.Core.Policy.TransportSelection)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportSelectionBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportSelectionBuilder.EnabledTransports">
            <summary>
            A sequence of transport aliases that specifies the transport instances available for use by the entity.
            </summary>
            <remarks>@dref_details_TransportSelectionQosPolicy_enabled_transports</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportSelectionBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.TransportSelection"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TransportUnicast">
            <summary>
            Specifies a subset of transports and a port number that
            can be used by an Entity to receive data.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportUnicast.Value">
            <summary>
            A sequence of unicast communication settings.
            </summary>
            <remarks>@dref_details_TransportUnicastQosPolicy_value</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportUnicast.Default">
            <summary>Singleton containing the default value of a TransportUnicast</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportUnicast.#ctor(System.Collections.Generic.IEnumerable{Rti.Dds.Core.Policy.TransportUnicastSettings})">
            <summary>
            Creates a TransportUnicast object with a list of settings
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportUnicast.#ctor(System.Collections.Immutable.ImmutableList{Rti.Dds.Core.Policy.TransportUnicastSettings})">
            <summary>
            Creates a TransportUnicast object with a list of settings
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportUnicast.With(System.Action{System.Collections.Immutable.ImmutableList{Rti.Dds.Core.Policy.TransportUnicastSettings}.Builder})">
            <summary>
            Creates a new TransportUnicast with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a list
            builder with the current settings of this TransportUnicast and
            allows adding, removing, or replacing.
            </param>
            <returns>A new TransportUnicast with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportUnicast.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportUnicast.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportUnicast.Equals(Rti.Dds.Core.Policy.TransportUnicast)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TransportUnicastSettings">
            <summary>
            Specifies a list of unicast locators and a unicast port.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportUnicastSettings.Transports">
            <summary>
            A sequence of transport aliases that specifies the unicast interfaces on which to receive unicast traffic for the entity.
            The built-in aliases are defined in <see cref="T:Rti.Dds.Core.Policy.TransportBuiltinAlias"/>.
            </summary>
            <remarks>@dref_details_TransportUnicastSettings_t_transports</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportUnicastSettings.ReceivePort">
            <summary>
            The unicast port on which the entity can receive data.
            </summary>
            <remarks>@dref_details_TransportUnicastSettings_t_receive_port</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportUnicastSettings.Default">
            <summary>Singleton containing the default value of a TransportUnicastSettings</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportUnicastSettings.With(System.Action{Rti.Dds.Core.Policy.TransportUnicastSettingsBuilder})">
            <summary>
            Creates a new TransportUnicastSettings with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this TransportUnicastSettings.
            </param>
            <returns>A new TransportUnicastSettings with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportUnicastSettings.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportUnicastSettings.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportUnicastSettings.Equals(Rti.Dds.Core.Policy.TransportUnicastSettings)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TransportUnicastSettingsBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.TransportUnicastSettings"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportUnicastSettingsBuilder.#ctor(Rti.Dds.Core.Policy.TransportUnicastSettings)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportUnicastSettingsBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportUnicastSettingsBuilder.Transports">
            <summary>
            A sequence of transport aliases that specifies the unicast interfaces on which to receive \em unicast traffic for the entity.
            </summary>
            <remarks>@dref_details_TransportUnicastSettings_t_transports</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TransportUnicastSettingsBuilder.ReceivePort">
            <summary>
            The unicast port on which the entity can receive data.
            </summary>
            <remarks>@dref_details_TransportUnicastSettings_t_receive_port</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TransportUnicastSettingsBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.TransportUnicastSettings"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TypeConsistencyEnforcement">
            <summary>
            Defines the rules that determine whether the type used to publish a
            given <see cref="T:Rti.Dds.Topics.Topic`1"/> is consistent with that used to
            subscribe to it.
            </summary>
            <remarks>@dref_details_TypeConsistencyEnforcementQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TypeConsistencyEnforcement.Kind">
            <summary>
            Type consistency kind.
            </summary>
            <remarks>@dref_details_TypeConsistencyEnforcementQosPolicy_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TypeConsistencyEnforcement.IgnoreSequenceBounds">
            <summary>
            Controls whether sequence bounds are taken into consideration for type assignability.
            </summary>
            <remarks>@dref_details_TypeConsistencyEnforcementQosPolicy_ignore_sequence_bounds</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TypeConsistencyEnforcement.IgnoreStringBounds">
            <summary>
            Controls whether string bounds are taken into consideration for type assignability.
            </summary>
            <remarks>@dref_details_TypeConsistencyEnforcementQosPolicy_ignore_string_bounds</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TypeConsistencyEnforcement.IgnoreMemberNames">
            <summary>
            Controls whether member names are taken into consideration for type assignability.
            </summary>
            <remarks>@dref_details_TypeConsistencyEnforcementQosPolicy_ignore_member_names</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TypeConsistencyEnforcement.PreventTypeWidening">
            <summary>
            Controls whether type widening is allowed.
            </summary>
            <remarks>@dref_details_TypeConsistencyEnforcementQosPolicy_prevent_type_widening</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TypeConsistencyEnforcement.ForceTypeValidation">
            <summary>
            Controls whether type information must be available in order to complete matching between a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> and a <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <remarks>@dref_details_TypeConsistencyEnforcementQosPolicy_force_type_validation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TypeConsistencyEnforcement.IgnoreEnumLiteralNames">
            <summary>
            Controls whether enumeration constant names are taken into consideration for type assignability.
            </summary>
            <remarks>@dref_details_TypeConsistencyEnforcementQosPolicy_ignore_enum_literal_names</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TypeConsistencyEnforcement.Default">
            <summary>Singleton containing the default value of a TypeConsistencyEnforcement</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TypeConsistencyEnforcement.With(System.Action{Rti.Dds.Core.Policy.TypeConsistencyEnforcementBuilder})">
            <summary>
            Creates a new TypeConsistencyEnforcement with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this TypeConsistencyEnforcement.
            </param>
            <returns>A new TypeConsistencyEnforcement with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TypeConsistencyEnforcement.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TypeConsistencyEnforcement.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TypeConsistencyEnforcement.Equals(Rti.Dds.Core.Policy.TypeConsistencyEnforcement)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TypeConsistencyEnforcementBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.TypeConsistencyEnforcement"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TypeConsistencyEnforcementBuilder.#ctor(Rti.Dds.Core.Policy.TypeConsistencyEnforcement)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TypeConsistencyEnforcementBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TypeConsistencyEnforcementBuilder.Kind">
            <summary>
            Type consistency kind.
            </summary>
            <remarks>@dref_details_TypeConsistencyEnforcementQosPolicy_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TypeConsistencyEnforcementBuilder.IgnoreSequenceBounds">
            <summary>
            Controls whether sequence bounds are taken into consideration for type assignability.
            </summary>
            <remarks>@dref_details_TypeConsistencyEnforcementQosPolicy_ignore_sequence_bounds</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TypeConsistencyEnforcementBuilder.IgnoreStringBounds">
            <summary>
            Controls whether string bounds are taken into consideration for type assignability.
            </summary>
            <remarks>@dref_details_TypeConsistencyEnforcementQosPolicy_ignore_string_bounds</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TypeConsistencyEnforcementBuilder.IgnoreMemberNames">
            <summary>
            Controls whether member names are taken into consideration for type assignability.
            </summary>
            <remarks>@dref_details_TypeConsistencyEnforcementQosPolicy_ignore_member_names</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TypeConsistencyEnforcementBuilder.PreventTypeWidening">
            <summary>
            Controls whether type widening is allowed.
            </summary>
            <remarks>@dref_details_TypeConsistencyEnforcementQosPolicy_prevent_type_widening</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TypeConsistencyEnforcementBuilder.ForceTypeValidation">
            <summary>
            Controls whether type information must be available in order to complete matching between a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> and a <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <remarks>@dref_details_TypeConsistencyEnforcementQosPolicy_force_type_validation</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TypeConsistencyEnforcementBuilder.IgnoreEnumLiteralNames">
            <summary>
            Controls whether enumeration constant names are taken into consideration for type assignability.
            </summary>
            <remarks>@dref_details_TypeConsistencyEnforcementQosPolicy_ignore_enum_literal_names</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TypeConsistencyEnforcementBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.TypeConsistencyEnforcement"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TypeConsistencyKind">
            <summary>
            Kinds of type consistency.
            </summary>
            <remarks>@dref_details_TypeConsistencyKind</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.TypeConsistencyKind.DisallowTypeCoercion">
            <summary>
            The <see cref="T:Rti.Dds.Publication.DataWriter`1"/> and the <see cref="T:Rti.Dds.Subscription.DataReader`1"/>
            must support the same data type in order for them to communicate.
            </summary>
            <remarks>@dref_details_TypeConsistencyKind_DISALLOW_TYPE_COERCION</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.TypeConsistencyKind.AllowTypeCoercion">
            <summary>
            The <see cref="T:Rti.Dds.Publication.DataWriter`1"/> and the <see cref="T:Rti.Dds.Subscription.DataReader`1"/>
            need not support the same data type in order for them to communicate
            as long as the <see cref="T:Rti.Dds.Subscription.DataReader`1"/>'s type is
            assignable from the <see cref="T:Rti.Dds.Publication.DataWriter`1"/>'s type.
            </summary>
            <remarks>@dref_details_TypeConsistencyKind_ALLOW_TYPE_COERCION</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.TypeConsistencyKind.AutoTypeCoercion">
            <summary>
            Equal to <see cref="F:Rti.Dds.Core.Policy.TypeConsistencyKind.AllowTypeCoercion"/>.
            </summary>
            <remarks>@dref_details_TypeConsistencyKind_AUTO_TYPE_COERCION</remarks>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TypeSupport">
            <summary>
            Used to attach application-specific value(s) to a
            <see cref="T:Rti.Dds.Publication.DataWriter`1"/> or <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <remarks>@dref_details_TypeSupportQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TypeSupport.PluginData">
            <summary>
            Value to pass into the type plugin's de-/serialization function
            </summary>
            <remarks>@dref_details_TypeSupportQosPolicy_plugin_data</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TypeSupport.CdrPaddingKind">
            <summary>
            Determines whether or not the padding bytes will be set to zero during CDR serialization.
            </summary>
            <remarks>@dref_details_TypeSupportQosPolicy_cdr_padding_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TypeSupport.Default">
            <summary>Singleton containing the default value of a DataWriterProtocol</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TypeSupport.With(System.Action{Rti.Dds.Core.Policy.TypeSupportBuilder})">
            <summary>
            Creates a new TypeSupport with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this TypeSupport.
            </param>
            <returns>A new TypeSupport with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TypeSupport.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TypeSupport.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TypeSupport.Equals(Rti.Dds.Core.Policy.TypeSupport)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.TypeSupportBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.TypeSupport"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TypeSupportBuilder.#ctor(Rti.Dds.Core.Policy.TypeSupport)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TypeSupportBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TypeSupportBuilder.PluginData">
            <summary>
            Value to pass into the type plugin's de-/serialization function
            </summary>
            <remarks>@dref_details_TypeSupportQosPolicy_plugin_data</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.TypeSupportBuilder.CdrPaddingKind">
            <summary>
            Determines whether or not the padding bytes will be set to zero during CDR serialization.
            </summary>
            <remarks>@dref_details_TypeSupportQosPolicy_cdr_padding_kind</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.TypeSupportBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.TypeSupport"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.CdrPaddingKind">
            <summary>
            Determines whether or not the padding bytes will be set to zero during CDR serialization.
            </summary>
            <remarks>@dref_details_CdrPaddingKind</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.CdrPaddingKind.Zero">
            <summary>
            Padding bytes will be set to zero during CDR serialization.
            </summary>
            <remarks>@dref_details_CdrPaddingKind_ZERO_CDR_PADDING</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.CdrPaddingKind.NotSet">
            <summary>
            Padding bytes will not be set to any value during CDR serialization.
            </summary>
            <remarks>@dref_details_CdrPaddingKind_NOT_SET_CDR_PADDING</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.CdrPaddingKind.Auto">
            <summary>
            By default, <see cref="T:Rti.Dds.Domain.DomainParticipant"/>'s behavior is set
            to <see cref="F:Rti.Dds.Core.Policy.CdrPaddingKind.NotSet"/>, and <see cref="T:Rti.Dds.Publication.DataWriter`1"/>'s
            and <see cref="T:Rti.Dds.Subscription.DataReader`1"/>'s inherit the behavior from
            the <see cref="T:Rti.Dds.Domain.DomainParticipant"/>.
            </summary>
            <remarks>@dref_details_CdrPaddingKind_AUTO_CDR_PADDING</remarks>
        </member>
        <member name="T:Rti.Dds.Core.Policy.UserData">
            <summary>
            Provides an area where your application can store additional information
            related to a <see cref="T:Rti.Dds.Domain.DomainParticipant"/>,
            <see cref="T:Rti.Dds.Publication.DataWriter`1"/>
            or <see cref="T:Rti.Dds.Subscription.DataReader`1"/>
            </summary>
            <remarks>@dref_details_UserDataQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.UserData.Value">
            <summary>
            An opaque sequence of bytes.
            </summary>
            <remarks>@dref_details_UserDataQosPolicy_value</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.UserData.Default">
            <summary>Singleton containing the default value of a UserData</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.UserData.#ctor(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Creates a UserData object with a list of bytes
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.UserData.#ctor(System.Collections.Immutable.ImmutableList{System.Byte})">
            <summary>
            Creates a UserData object with a list of bytes
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.UserData.With(System.Action{System.Collections.Immutable.ImmutableList{System.Byte}.Builder})">
            <summary>
            Creates a new UserData with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            list with the current values of this object's <see cref="P:Rti.Dds.Core.Policy.UserData.Value"/>.
            </param>
            <returns>A new UserData with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.UserData.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.UserData.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.UserData.Equals(Rti.Dds.Core.Policy.UserData)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.WireProtocol">
            <summary>
            Specifies the wire-protocol-related attributes for a
            <see cref="T:Rti.Dds.Domain.DomainParticipant"/>
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.WireProtocol.RtpsAutoId">
            <summary>
            Indicates that DDS should choose an appropriate
            host, app, instance or object ID automatically.
            </summary>
            <remarks>@dref_details_WireProtocolQosPolicy_RTPS_AUTO_ID</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WireProtocol.ParticipantId">
            <summary>
            A value used to distinguish among different participants belonging to the same domain on the same host.
            </summary>
            <remarks>@dref_details_WireProtocolQosPolicy_participant_id</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WireProtocol.RtpsHostId">
            <summary>
            The RTPS Host ID of the domain participant.
            </summary>
            <remarks>@dref_details_WireProtocolQosPolicy_rtps_host_id</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WireProtocol.RtpsAppId">
            <summary>
            The RTPS App ID of the domain participant.
            </summary>
            <remarks>@dref_details_WireProtocolQosPolicy_rtps_app_id</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WireProtocol.RtpsInstanceId">
            <summary>
            The RTPS Instance ID of the <see cref="T:Rti.Dds.Domain.DomainParticipant"/>.
            </summary>
            <remarks>@dref_details_WireProtocolQosPolicy_rtps_instance_id</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WireProtocol.RtpsWellKnownPorts">
            <summary>
            Configures the RTPS well-known port mappings.
            </summary>
            <remarks>@dref_details_WireProtocolQosPolicy_rtps_well_known_ports</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WireProtocol.RtpsReservedPortMask">
            <summary>
            Specifies which well-known ports to reserve when enabling the participant.
            </summary>
            <remarks>@dref_details_WireProtocolQosPolicy_rtps_reserved_port_mask</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WireProtocol.RtpsAutoIdKind">
            <summary>
            Kind of auto mechanism used to calculate the GUID prefix.
            </summary>
            <remarks>@dref_details_WireProtocolQosPolicy_rtps_auto_id_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WireProtocol.ComputeCrc">
            <summary>
            Adds RTPS CRC submessage to every message when this field is set to `true`.
            </summary>
            <remarks>@dref_details_WireProtocolQosPolicy_compute_crc</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WireProtocol.CheckCrc">
            <summary>
            Checks if the received RTPS message is valid by comparing the computed CRC with the received RTPS CRC submessage when this field is set to `true`.
            </summary>
            <remarks>@dref_details_WireProtocolQosPolicy_check_crc</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WireProtocol.Default">
            <summary>Singleton containing the default value of a WireProtocol</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.WireProtocol.With(System.Action{Rti.Dds.Core.Policy.WireProtocolBuilder})">
            <summary>
            Creates a new WireProtocol with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this WireProtocol.
            </param>
            <returns>A new WireProtocol with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.WireProtocol.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.WireProtocol.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.WireProtocol.Equals(Rti.Dds.Core.Policy.WireProtocol)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.WireProtocolBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.WireProtocol"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.WireProtocolBuilder.#ctor(Rti.Dds.Core.Policy.WireProtocol)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.WireProtocolBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WireProtocolBuilder.ParticipantId">
            <summary>
            A value used to distinguish among different participants belonging to the same domain on the same host.
            </summary>
            <remarks>@dref_details_WireProtocolQosPolicy_participant_id</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WireProtocolBuilder.RtpsHostId">
            <summary>
            The RTPS Host ID of the domain participant.
            </summary>
            <remarks>@dref_details_WireProtocolQosPolicy_rtps_host_id</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WireProtocolBuilder.RtpsAppId">
            <summary>
            The RTPS App ID of the domain participant.
            </summary>
            <remarks>@dref_details_WireProtocolQosPolicy_rtps_app_id</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WireProtocolBuilder.RtpsInstanceId">
            <summary>
            The RTPS Instance ID of the <see cref="T:Rti.Dds.Domain.DomainParticipant"/>.
            </summary>
            <remarks>@dref_details_WireProtocolQosPolicy_rtps_instance_id</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WireProtocolBuilder.RtpsWellKnownPorts">
            <summary>
            Configures the RTPS well-known port mappings.
            </summary>
            <remarks>@dref_details_WireProtocolQosPolicy_rtps_well_known_ports</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WireProtocolBuilder.RtpsReservedPortMask">
            <summary>
            Specifies which well-known ports to reserve when enabling the participant.
            </summary>
            <remarks>@dref_details_WireProtocolQosPolicy_rtps_reserved_port_mask</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WireProtocolBuilder.RtpsAutoIdKind">
            <summary>
            Kind of auto mechanism used to calculate the GUID prefix.
            </summary>
            <remarks>@dref_details_WireProtocolQosPolicy_rtps_auto_id_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WireProtocolBuilder.ComputeCrc">
            <summary>
            Adds RTPS CRC submessage to every message when this field is set to `true`.
            </summary>
            <remarks>@dref_details_WireProtocolQosPolicy_compute_crc</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WireProtocolBuilder.CheckCrc">
            <summary>
            Checks if the received RTPS message is valid by comparing the computed CRC with the received RTPS CRC submessage when this field is set to `true`.
            </summary>
            <remarks>@dref_details_WireProtocolQosPolicy_check_crc</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.WireProtocolBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.WireProtocol"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.WireProtocolAutoKind">
            <summary>
            Mechanism to automatically calculate the GUID prefix
            (see <see cref="P:Rti.Dds.Core.Policy.WireProtocol.RtpsAutoIdKind"/>)
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Policy.WireProtocolAutoKind.FromIp">
            <summary>
            Select the IP-based algorithm.
            </summary>
            <remarks>@dref_details_WireProtocolQosPolicyAutoKind_RTPS_AUTO_ID_FROM_IP</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.WireProtocolAutoKind.FromMac">
            <summary>
            Select the MAC-based algorithm.
            </summary>
            <remarks>@dref_details_WireProtocolQosPolicyAutoKind_RTPS_AUTO_ID_FROM_MAC</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Policy.WireProtocolAutoKind.FromUuid">
            <summary>
            Select the UUID-based algorithm, which doesn't require a network interface.
            </summary>
            <remarks>@dref_details_WireProtocolQosPolicyAutoKind_RTPS_AUTO_ID_FROM_UUID</remarks>
        </member>
        <member name="T:Rti.Dds.Core.Policy.WriterDataLifecycle">
            <summary>
            Controls how a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> handles the
            lifecycle of the instances (keys) that it writes.
            </summary>
            <remarks>@dref_details_WriterDataLifecycleQosPolicy</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WriterDataLifecycle.AutodisposeUnregisteredInstances">
            <summary>
            Boolean flag that controls the behavior when the <see cref="T:Rti.Dds.Publication.DataWriter`1"/> unregisters an instance by means of the unregister operations.
            </summary>
            <remarks>@dref_details_WriterDataLifecycleQosPolicy_autodispose_unregistered_instances</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WriterDataLifecycle.AutopurgeUnregisteredInstancesDelay">
            <summary>
            @extension Maximum duration for which the <see cref="T:Rti.Dds.Publication.DataWriter`1"/> will maintain information regarding an instance once it has unregistered the instance.
            </summary>
            <remarks>@dref_details_WriterDataLifecycleQosPolicy_autopurge_unregistered_instances_delay</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WriterDataLifecycle.AutopurgeDisposedInstancesDelay">
            <summary>
            @extension Maximum duration for which the <see cref="T:Rti.Dds.Publication.DataWriter`1"/> will maintain information regarding an instance once it has disposed the instance.
            </summary>
            <remarks>@dref_details_WriterDataLifecycleQosPolicy_autopurge_disposed_instances_delay</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WriterDataLifecycle.Default">
            <summary>Singleton containing the default value of a WriterDataLifecycle</summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.WriterDataLifecycle.With(System.Action{Rti.Dds.Core.Policy.WriterDataLifecycleBuilder})">
            <summary>
            Creates a new WriterDataLifecycle with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this WriterDataLifecycle.
            </param>
            <returns>A new WriterDataLifecycle with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.Policy.WriterDataLifecycle.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.WriterDataLifecycle.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.WriterDataLifecycle.Equals(Rti.Dds.Core.Policy.WriterDataLifecycle)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Policy.WriterDataLifecycleBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.Policy.WriterDataLifecycle"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.WriterDataLifecycleBuilder.#ctor(Rti.Dds.Core.Policy.WriterDataLifecycle)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Policy.WriterDataLifecycleBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WriterDataLifecycleBuilder.AutodisposeUnregisteredInstances">
            <summary>
            Boolean flag that controls the behavior when the <see cref="T:Rti.Dds.Publication.DataWriter`1"/> unregisters an instance by means of the unregister operations.
            </summary>
            <remarks>@dref_details_WriterDataLifecycleQosPolicy_autodispose_unregistered_instances</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WriterDataLifecycleBuilder.AutopurgeUnregisteredInstancesDelay">
            <summary>
            @extension Maximum duration for which the <see cref="T:Rti.Dds.Publication.DataWriter`1"/> will maintain information regarding an instance once it has unregistered the instance.
            </summary>
            <remarks>@dref_details_WriterDataLifecycleQosPolicy_autopurge_unregistered_instances_delay</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Policy.WriterDataLifecycleBuilder.AutopurgeDisposedInstancesDelay">
            <summary>
            @extension Maximum duration for which the <see cref="T:Rti.Dds.Publication.DataWriter`1"/> will maintain information regarding an instance once it has disposed the instance.
            </summary>
            <remarks>@dref_details_WriterDataLifecycleQosPolicy_autopurge_disposed_instances_delay</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Policy.WriterDataLifecycleBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.Policy.WriterDataLifecycle"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Priority">
            <summary>
            Special priority values for policies such as
            <see cref="P:Rti.Dds.Core.Policy.ChannelSettings.Priority"/> or
            <see cref="P:Rti.Dds.Core.Policy.PublishMode.Priority"/>
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Priority.Undefined">
            <summary>
            When assigned this value, the publication priority of the data writer,
            or channel of a multi-channel data writer, will be set to the lowest
            possible value.
            </summary>
            <remarks>
            For multi-channel data writers, if either the data writer or channel
            priority is NOT set to this value, then the publication priority of
            the entity will be set to the defined value.
            </remarks>
        </member>
        <member name="F:Rti.Dds.Core.Priority.Auto">
            <summary>
            When assigned this value, the publication priority of the data writer,
            or channel of a multi-channel data writer, will be set to the largest
            priority value of any sample currently queued for publication by
            the data writer or data writer channel.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.QosPrintFormat">
            <summary>
            Used to conifgure the output of the QoS ToString APIs.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.QosPrintFormat.Indent">
            <summary>
            The amount of indent to apply to the output.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.QosPrintFormat.IsStandalone">
            <summary>
            Whether or not to include XML preamble in the output.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.QosPrintFormat.PrintPrivate">
            <summary>
            Whether or not to print internal/private QoS policies in the output.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.QosPrintFormat.#ctor">
            <summary>
            Creates the default QosPrintFormat
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.QosPrintFormat.#ctor(System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            Creates a QosPrintFormat with its 3 components
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.QosPrintFormat.Equals(System.Object)">
            <summary>
            Compares two objects.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.QosPrintFormat.Equals(Rti.Dds.Core.QosPrintFormat)">
            <summary>
            Compares two objects.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.QosPrintFormat.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.QosPrintFormat.ToString">
            <summary>
            Converts to a readable string.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.QosPrintAll">
            <summary>
            Sentinel that selects a particular ToString() overload of a QoS object.
            </summary>
            <remarks>
            For Entity QoS classes, such as <see cref="T:Rti.Dds.Domain.DomainParticipantQos"/>
            QosPrintAll.Value is a sentinel that select the ToString() overload that
            prints the entire QoS object (<see cref="M:Rti.Dds.Domain.DomainParticipantQos.ToString(Rti.Dds.Core.QosPrintAll,Rti.Dds.Core.QosPrintFormat)"/>).
            </remarks>
        </member>
        <member name="P:Rti.Dds.Core.QosPrintAll.Value">
            <summary>
            This sentinel is the only instance of <see cref="T:Rti.Dds.Core.QosPrintAll"/>.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.QosProvider">
             <summary>
             Provides access to XML-defined QoS profiles, data types, and complete
             DDS systems.
             </summary>
             <remarks>
             <para>
             A QosProvider is created with a URI that identifies a resource from where
             to load the definition of:
             - QoS profiles
             - Type definitions
             - Full XML-defined DDS systems
             </para>
             <para>
             The URI can be:
             - An XML file
             - A string representation of an XML document `str://"..."`
             - A group of several files and strings (see [URL Groups](https://community.rti.com/static/documentation/connext-dds/current/doc/manuals/connext_dds_professional/users_manual/index.htm#users_manual/URL_Groups.htm)
             in the User's Manual)
             </para>
             <para>
             The following example loads a file named `"MyProfiles.xml"` in the current
             directory. Then it retrieves the `DataReaderQos` from a `&lt;qos_profile&gt;`
             named `"MyProfile"` under a `&lt;qos_library&gt;` named `"MyLibrary"` to create a
             `DataReader`:
             </para>
             <para>
             \code
             var myQosProvider = new QosProvider("MyProfiles.xml");
             var myReader = subscriber.CreateDataReader(
                 myTopic,
                 myQosProvider.GetDataReaderQos("MyLibrary::MyProfile"));
             \endcode
             </para>
             <para>To load type definitions, see <see cref="M:Rti.Dds.Core.QosProvider.GetType(System.String)"/>.</para>
             <para>
             To create a <see cref="T:Rti.Dds.Domain.DomainParticipant"/> and its contained entities, see
             <see cref="M:Rti.Dds.Core.QosProvider.CreateParticipantFromConfig(System.String)"/>.
             </para>
             @section SelectingQosProfile Selecting a QoS profile
            
             The profile name argument is optional:
            
             \code
             var readerQos = myQosProvider.GetDataReaderQos();
             \endcode
            
             When omitted, the QosProvider looks for a profile as follows (in order of
             precedence):
             - The profile set with <see cref="P:Rti.Dds.Core.QosProvider.DefaultProfile"/>
             - The profile set in the constructor (an optional argument)
             - The `&lt;qos_profile&gt;` identified as the default profile with the attribute
             `is_default_qos=true`
             - If none of the above methods have been used, a QoS object with the
             documented default values is returned
            
             A QosProvider can be used in combination with functions such as
             <see cref="P:Rti.Dds.Publication.Publisher.DefaultDataWriterQos"/> or
             <see cref="P:Rti.Dds.Subscription.Subscriber.DefaultDataReaderQos"/>
             to set the profile that entities are created with by default:
            
             \code
             subscriber.DefaultDataReaderQos =
                 myQosProvider.GetDataReaderQos("MyLibrary::MyProfile");
            
             // reader created with the QoS in the profile "MyLibrary::MyProfile"
             var reader = subscriber.CreateDataReader(topic);
             \endcode
            
             More information about QoS Profiles can be found in the
             [QoS Profiles
             section](https://community.rti.com/static/documentation/connext-dds/current/doc/manuals/connext_dds_professional/users_manual/index.htm#users_manual/QoS_Profiles.htm),
             in the User's Manual.
            
             @section DefaultQosProvider The Default QosProvider
            
             A special QosProvider, QosProvider.Default is always available to obtain
             the QoS profiles from the default locations, such as the file
             USER_QOS_PROFILES.xml in the current directory. For example, the following
             code obtains the default `DataReaderQos`:
            
             \code
             var defaultReaderQos = QosProvider.Default.GetDatareaderQos();
             \endcode
            
             [This section](https://community.rti.com/static/documentation/connext-dds/current/doc/manuals/connext_dds_professional/users_manual/index.htm#users_manual/How_to_Load_XML_Specified_QoS_Settings.htm#xmlconfiguration_1275484337_316960%3FTocPath%3DPart%25203%253A%2520Advanced%2520Concepts%7C18.%2520Configuring%2520QoS%2520with%2520XML%7C18.5%2520How%2520to%2520Load%2520XML-Specified%2520QoS%2520Settings%7C_____0)
             in the User's Manual explains which profiles are automatically loaded by
             the default QosProvider.
            
             The profiles that QosProvider.Default loads can be configured with
             <see cref="M:Rti.Dds.Core.QosProvider.SetDefaultProviderParams(Rti.Dds.Core.Policy.Profile)"/>. This
             method should be called before QosProvider.Default is accessed.
            
             \code
             QosProvider.SetDefaultProviderParams(Profile.Default.With(p =>
             {
                 // Load MyProfiles.xml and disable USER_QOS_PROFILES.xml
                 p.UrlProfile.Add("MyProfiles.xml");
                 p.IgnoreUserProfile = true;
             }));
             \endcode
            
             QosProvider.Default also determines the default values for
             `&lt;participant_factory_qos&gt;`, which can be used to configure logging.
            
             @section BuiltinProfiles Built-in QoS Profiles
            
             Any QosProvider, including the default QosProvider, has access to the
             built-in profiles. For example, to obtain the `DataWriterQos` from the
             "strict reliable" built-in profile:
            
             \code
             var strictReliableWriterQos = QosProvider.Default.GetDataWriterQos(
                 "BuiltinQosLib::Generic.StrictReliable");
             \endcode
            
             @section TopicFilters Specifying a Topic Filter
             XML QoS definitions can specify a `topic_filter` attribute.
             Several functions (such as <see cref="M:Rti.Dds.Core.QosProvider.GetDataReaderQosWithTopicName(System.String)"/>
             receive a `topicName` argument. When these functions look for the QoS, they will
             try to match the `topicName` against the `topic_filter`s, if they are
             used. See the [Topic Filters section](https://community.rti.com/static/documentation/connext-dds/current/doc/manuals/connext_dds_professional/users_manual/index.htm#users_manual/Topic_Filters.htm)
             in the User's Manual.
            
             @see \ref DDSEntityExampleModule
             </remarks>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.#ctor(Rti.Dds.Core.Policy.Profile)">
            <summary>
            Create a QosProvider with additional configuration
            </summary>
            <param name="profilePolicy">Specifies multiple locations where to look for profiles</param>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.#ctor(System.String)">
            <summary>
            Create a QosProvider fetching the QoS configuration from a URI
            </summary>
            <param name="uri">
            A file such as `"path/to/my_config.xml"`, or
            an inline definition, `"str://\"&lt;dds&gt;...&lt;/dds&gt;\""`
            (note the quotes after `str://`)
            </param>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.#ctor(System.String,System.String)">
            <summary>
            Create a QosProvider fetching the QoS configuration from a URI
            </summary>
            <param name="uri">
            A file such as "file:///somewhere/on/disk/qos-config.xml", or
            an inline definition, "str://"&lt;dds;&gt;...&lt;/dds;&gt;""
            </param>
            <param name="profile">
            The QoS profile to set as the default, overriding any
            is_default_qos tag in the loaded XML file.
            </param>
        </member>
        <member name="P:Rti.Dds.Core.QosProvider.Default">
            <summary>
            Get the default QosProvider, a singleton that gives access to the
            QoS profiles and data types that are loaded by default.
            </summary>
            <remarks>
            <para>
            The default QosProvider automatically loads XML Qos, types and application
            profiles from several predetermined locations, such as the file USER_QOS_PROFILES.xml
            in the current working directory.
            </para>
            <para>See \ref DefaultQosProvider.</para>
            </remarks>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.SetDefaultProviderParams(Rti.Dds.Core.Policy.Profile)">
            <summary>
            This method can be called before accessing <see cref="P:Rti.Dds.Core.QosProvider.Default"/>
            to configure which profiles the default provider will load.
            </summary>
            <param name="profile">
            The configuration for <see cref="P:Rti.Dds.Core.QosProvider.Default"/>
            </param>
        </member>
        <member name="P:Rti.Dds.Core.QosProvider.ProviderParams">
            <summary>
            Get or modify this QosProvider's configuration. When the configuration
            is modified, the profiles are reloaded.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.QosProvider.DefaultProfile">
            <summary>
            @extension Get or set the profile used by default (can be null).
            </summary>
            <remarks>
            @see \ref SelectingQosProfile
            </remarks>
        </member>
        <member name="P:Rti.Dds.Core.QosProvider.DefaultLibrary">
            <summary>
            @extension Get or set the library used by default (can be null)
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.QosProvider.Disposed">
            <summary>
            Indicates whether this object has been disposed
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.Dispose">
            <summary>
            Releases the native resources used by this object. A finalizer is
            also provided.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.CreateParticipantFromConfig(System.String)">
            <summary>
            Creates a <see cref="T:Rti.Dds.Domain.DomainParticipant"/> given its configuration
            name from a description provided in an XML configuration file.
            </summary>
            <remarks>
            <para>See \ref DDSXmlAppExampleModule</para>.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.CreateParticipantFromConfig(System.String,Rti.Dds.Domain.DomainParticipantConfigParams)">
            <summary>
            Creates a <see cref="T:Rti.Dds.Domain.DomainParticipant"/> given its configuration
            name from a description provided in an XML configuration file and
            a set of parameters that allow changing some properties of such
            configuration.
            </summary>
            <remarks>@dref_details_DomainParticipantFactory_create_participant_from_config_w_params</remarks>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.GetDomainParticipantQos">
            <summary>
            Get the <see cref="T:Rti.Dds.Domain.DomainParticipantQos"/> currently associated with
            the default profile.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.GetDomainParticipantQos(System.String)">
            <summary>
            Get the <see cref="T:Rti.Dds.Domain.DomainParticipantQos"/> from a profile
            </summary>
            <param name="profile">
            The profile from which to get the DomainParticipantQos,
            for example `"MyLibrary::MyProfile"`
            </param>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.GetTopicQos(System.String)">
            <summary>
            Get the <see cref="T:Rti.Dds.Topics.TopicQos"/> from a profile
            </summary>
            <param name="profile">
            The profile from which to get the TopicQos,
            for example `"MyLibrary::MyProfile"`
            </param>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.GetTopicQos">
            <summary>
            Get the <see cref="T:Rti.Dds.Topics.TopicQos"/> currently associated with
            the default profile.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.GetTopicQosWithTopicName(System.String,System.String)">
            <summary>
            Get the <see cref="T:Rti.Dds.Topics.TopicQos"/> from a profile for a given topic.
            </summary>
            <param name="profile">
            The profile from which to get the TopicQos,
            for example `"MyLibrary::MyProfile"`
            </param>
            <param name="topicName">
            The topic name used to select a qos within the profile,
            if the `topic_filter` attribute is used.
            </param>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.GetTopicQosWithTopicName(System.String)">
            <summary>
            Get the <see cref="T:Rti.Dds.Topics.TopicQos"/> currently associated with
            the default profile for a given topic.
            </summary>
            <param name="topicName">
            The topic name used to select a qos within the profile,
            if the `topic_filter` attribute is used.
            </param>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.GetPublisherQos(System.String)">
            <summary>
            Get the <see cref="T:Rti.Dds.Publication.PublisherQos"/> from a profile
            </summary>
            <param name="profile">
            The profile from which to get the PublisherQos,
            for example `"MyLibrary::MyProfile"`
            </param>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.GetPublisherQos">
            <summary>
            Get the <see cref="T:Rti.Dds.Publication.PublisherQos"/> currently associated with
            the default profile.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.GetSubscriberQos(System.String)">
            <summary>
            Get the <see cref="T:Rti.Dds.Subscription.SubscriberQos"/> from a profile
            </summary>
            <param name="profile">
            The profile from which to get the SubscriberQos,
            for example `"MyLibrary::MyProfile"`
            </param>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.GetSubscriberQos">
            <summary>
            Get the <see cref="T:Rti.Dds.Subscription.SubscriberQos"/> currently associated with
            the default profile.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.GetDataWriterQos(System.String)">
            <summary>
            Get the <see cref="T:Rti.Dds.Publication.DataWriterQos"/> from a profile
            </summary>
            <param name="profile">
            The profile from which to get the DataWriterQos,
            for example `"MyLibrary::MyProfile"`
            </param>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.GetDataWriterQos">
            <summary>
            Get the <see cref="T:Rti.Dds.Publication.DataWriterQos"/> currently associated with
            the default profile.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.GetDataWriterQosWithTopicName(System.String,System.String)">
            <summary>
            Get the <see cref="T:Rti.Dds.Publication.DataWriterQos"/> from a profile and a given topic.
            </summary>
            <param name="profile">
            The profile from which to get the DataWriterQos,
            for example `"MyLibrary::MyProfile"`
            </param>
            <param name="topicName">
            The topic name used to select a qos within the profile,
            if the `topic_filter` attribute is used.
            </param>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.GetDataWriterQosWithTopicName(System.String)">
            <summary>
            Get the <see cref="T:Rti.Dds.Publication.DataWriterQos"/> for a given topic currently
            associated with the default profile.
            </summary>
            <param name="topicName">
            The topic name used to select a qos within the profile,
            if the `topic_filter` attribute is used.
            </param>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.GetDataReaderQos(System.String)">
            <summary>
            Get the <see cref="T:Rti.Dds.Subscription.DataReaderQos"/> from a profile.
            </summary>
            <param name="profile">
            The profile from which to get the DataReaderQos,
            for example `"MyLibrary::MyProfile"`
            </param>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.GetDataReaderQos">
            <summary>
            Get the <see cref="T:Rti.Dds.Subscription.DataReaderQos"/> currently associated with
            the default profile.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.GetDataReaderQosWithTopicName(System.String,System.String)">
            <summary>
            Get the <see cref="T:Rti.Dds.Subscription.DataReaderQos"/> from a profile for a given topic.
            </summary>
            <param name="profile">
            The profile from which to get the DataReaderQos,
            for example `"MyLibrary::MyProfile"`
            </param>
            <param name="topicName">
            The topic name used to select a qos within the profile,
            if the `topic_filter` attribute is used.
            </param>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.GetDataReaderQosWithTopicName(System.String)">
            <summary>
            Get the <see cref="T:Rti.Dds.Subscription.DataReaderQos"/> for a given topic currently
            associated with the default profile.
            </summary>
            <param name="topicName">
            The topic name used to select a qos within the profile,
            if the `topic_filter` attribute is used.
            </param>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.GetType(System.String)">
            <summary>
            Load a type from its XML definition
            </summary>
            <param name="typeName">The name of a type defined under the &lt;types&gt; tag.</param>
            <remarks>
            @see \ref DDSDynamicDataExampleModule.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.GetQosProfileLibraries">
            <summary>
            @extension Get a list of the QoS profile libraries loaded by this
            QosProvider
            </summary>
            <remarks>@dref_details_DomainParticipantFactory_get_qos_profile_libraries</remarks>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.GetQosProfiles(System.String)">
            <summary>
            @extension Get a list of the QoS profiles under a library
            </summary>
            <param name="libraryName">The library containing the profiles</param>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.GetQosProfiles">
            <summary>
            @extension Get a list of all the QoS profiles associated with this
            QosProvider.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.ReloadProfiles">
            <summary>
            Reloads the profiles by parsing the XML documents again
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.QosProvider.UnloadProfiles">
            <summary>
            Unload the profiles
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.SampleIdentity">
            <summary>
            Uniquely identifies a data sample within a DDS domain and a Topic.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.SampleIdentity.#ctor(Rti.Dds.Core.Guid@,System.Int64)">
            <summary>
            Creates a SampleIdentity with its two components
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.SampleIdentity.WriterGuid">
            <summary>
            Identifies the data source.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.SampleIdentity.SequenceNumber">
            <summary>
            The monotonically increasing 64-bit sequence number that identifies
            the sample in the data source.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.SampleIdentity.Unknown">
            <summary>
            Special value that indicates that the identity is unknown.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.SampleIdentity.Auto">
            <summary>
            Special value to indicate that a writer will automatically assign
            the identity of the sample in <see cref="M:Rti.Dds.Publication.DataWriter`1.Write(`0,Rti.Dds.Publication.WriteParams)"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.SampleIdentity.CompareTo(Rti.Dds.Core.SampleIdentity)">
            <summary>
            Compares two objects.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.SampleIdentity.Equals(Rti.Dds.Core.SampleIdentity)">
            <summary>
            Compares two objects.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.SampleIdentity.Equals(System.Object)">
            <summary>
            Compares two objects.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.SampleIdentity.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.SampleIdentity.ToString">
            <summary>
            Converts to a readable string.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.SequenceNumber">
            <summary>
            Contains constants for particular sequence numbers
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.SequenceNumber.Unknown">
            <summary>
            Unknown sequence number.
            </summary>
            <remarks>@dref_details_SequenceNumber_t_UNKNOWN</remarks>
        </member>
        <member name="F:Rti.Dds.Core.SequenceNumber.Auto">
            <summary>
            The sequence number is internally determined by \ndds
            </summary>
            <remarks>@dref_details_SequenceNumber_t_AUTO</remarks>
        </member>
        <member name="T:Rti.Dds.Core.ServiceEnvironment">
            <summary>
            The global entry point to the RTI Connext DDS API.
            </summary>
            <remarks>
            The ServiceEndpoint singleton is implicitly used when other objects
            are created or accessed. For example,
            `ServiceEnvironment.Instance.ParticipantFactory`
            returns the same object as `DomainParticipantFactory.Instance`.
            </remarks>
        </member>
        <member name="P:Rti.Dds.Core.ServiceEnvironment.Instance">
            <summary>
            The singleton instance
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.ServiceEnvironment.Version">
            <summary>
            Unique identifier for the build of the RTI Connext DDS Core Libraries
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.ServiceEnvironment.ParticipantFactory">
            <summary>
            Obtains the singleton <see cref="T:Rti.Dds.Domain.DomainParticipantFactory"/>.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.ServiceEnvironment.TypeFactory">
            <summary>
            Obtains the singleton <see cref="T:Rti.Types.Dynamic.DynamicTypeFactory"/>.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.ServiceEnvironment.CreateGuardCondition">
            <summary>
            Creates a <see cref="T:Rti.Dds.Core.GuardCondition"/>.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.ServiceEnvironment.CreateWaitSet">
            <summary>
            Creates a <see cref="T:Rti.Dds.Core.WaitSet"/>.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.ServiceEnvironment.Dispose">
            <summary>
            Forces the deletion of all global object and memory used by
            RTI Connext.
            </summary>
            <remarks>
            Calling this function is not necessary, but it can be called at
            the end of the application when a memory profiler is being used.
            </remarks>
        </member>
        <member name="P:Rti.Dds.Core.ServiceEnvironment.Internal">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.ServiceEnvironment.InternalDetails">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.ServiceEnvironment.InternalDetails.CodegenTypeFactory">
            <summary>
            Type factory used by rtiddsgen
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.ServiceEnvironment.InternalDetails.TypeSupportFactory">
            <summary>
            Type support factory used by rtiddsgen
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.ServiceEnvironment.InternalDetails.GetTypeFactory(System.Boolean)">
            <summary>
            Selects the right type factory.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Status.DataReaderCacheStatus">
            <summary>
            The status of the reader's cache.
            </summary>
            <remarks>@dref_details_DataReaderCacheStatus</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderCacheStatus.SampleCountPeak">
            <summary>
            The highest number of samples in the reader's queue over the lifetime of the reader.
            </summary>
            <remarks>@dref_details_DataReaderCacheStatus_sample_count_peak</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderCacheStatus.SampleCount">
            <summary>
            The number of samples in the reader's queue.
            </summary>
            <remarks>@dref_details_DataReaderCacheStatus_sample_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderCacheStatus.OldSourceTimestampDroppedSampleCount">
            <summary>
            The number of samples dropped as a result of receiving a sample older than the last one, using <see cref="F:Rti.Dds.Core.Policy.DestinationOrderKind.BySourceTimestamp"/>.
            </summary>
            <remarks>@dref_details_DataReaderCacheStatus_old_source_timestamp_dropped_sample_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderCacheStatus.ToleranceSourceTimestampDroppedSampleCount">
            <summary>
            The number of samples dropped as a result of receiving a sample in the future, using <see cref="F:Rti.Dds.Core.Policy.DestinationOrderKind.BySourceTimestamp"/>.
            </summary>
            <remarks>@dref_details_DataReaderCacheStatus_tolerance_source_timestamp_dropped_sample_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderCacheStatus.OwnershipDroppedSampleCount">
            <summary>
            The number of samples dropped as a result of receiving a sample from a DataWriter with a lower strength, using Exclusive Ownership.
            </summary>
            <remarks>@dref_details_DataReaderCacheStatus_ownership_dropped_sample_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderCacheStatus.ContentFilterDroppedSampleCount">
            <summary>
            The number of user samples filtered by the DataReader due to Content-Filtered Topics.
            </summary>
            <remarks>@dref_details_DataReaderCacheStatus_content_filter_dropped_sample_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderCacheStatus.TimeBasedFilterDroppedSampleCount">
            <summary>
            The number of user samples filtered by the DataReader due to <see cref="T:Rti.Dds.Core.Policy.TimeBasedFilter"/>.
            </summary>
            <remarks>@dref_details_DataReaderCacheStatus_time_based_filter_dropped_sample_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderCacheStatus.ExpiredDroppedSampleCount">
            <summary>
            The number of samples expired by the DataReader due to <see cref="T:Rti.Dds.Core.Policy.Lifespan"/> or the autopurge sample delays.
            </summary>
            <remarks>@dref_details_DataReaderCacheStatus_expired_dropped_sample_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderCacheStatus.VirtualDuplicateDroppedSampleCount">
            <summary>
            The number of virtual duplicate samples dropped by the DataReader. A sample is a virtual duplicate if it has the same identity (Virtual Writer GUID and Virtual Sequence Number) as a previously received sample.
            </summary>
            <remarks>@dref_details_DataReaderCacheStatus_virtual_duplicate_dropped_sample_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderCacheStatus.ReplacedDroppedSampleCount">
            <summary>
            The number of samples replaced by the DataReader due to <see cref="F:Rti.Dds.Core.Policy.HistoryKind.KeepLast"/> replacement.
            </summary>
            <remarks>@dref_details_DataReaderCacheStatus_replaced_dropped_sample_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderCacheStatus.WriterRemovedBatchSampleDroppedSampleCount">
            <summary>
            The number of batch samples received by the DataReader that were marked as removed by the DataWriter.
            </summary>
            <remarks>@dref_details_DataReaderCacheStatus_writer_removed_batch_sample_dropped_sample_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderCacheStatus.TotalSamplesDroppedByInstanceReplacement">
            <summary>
            The number of samples with sample state <see cref="F:Omg.Dds.Subscription.SampleState.NotRead"/> that were dropped when removing an instance due to instance replacement. See <see cref="P:Rti.Dds.Core.Policy.DataReaderResourceLimits.InstanceReplacement"/> for more details about when instances are replaced.
            </summary>
            <remarks>@dref_details_DataReaderCacheStatus_total_samples_dropped_by_instance_replacement</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderCacheStatus.AliveInstanceCount">
            <summary>
            The number of instances in the DataReader's queue with an instance state equal to <see cref="F:Omg.Dds.Subscription.InstanceState.Alive"/>.
            </summary>
            <remarks>@dref_details_DataReaderCacheStatus_alive_instance_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderCacheStatus.AliveInstanceCountPeak">
            <summary>
            The highest value of <see cref="P:Rti.Dds.Core.Status.DataReaderCacheStatus.AliveInstanceCount"/> over the lifetime of the DataReader.
            </summary>
            <remarks>@dref_details_DataReaderCacheStatus_alive_instance_count_peak</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderCacheStatus.NoWritersInstanceCount">
            <summary>
            The number of instances in the DataReader's queue with an instance state equal to <see cref="F:Omg.Dds.Subscription.InstanceState.NotAliveNoWriters"/>.
            </summary>
            <remarks>@dref_details_DataReaderCacheStatus_no_writers_instance_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderCacheStatus.NoWritersInstanceCountPeak">
            <summary>
            The highest value of <see cref="P:Rti.Dds.Core.Status.DataReaderCacheStatus.NoWritersInstanceCount"/> over the lifetime of the DataReader.
            </summary>
            <remarks>@dref_details_DataReaderCacheStatus_no_writers_instance_count_peak</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderCacheStatus.DisposedInstanceCount">
            <summary>
            The number of instances in the DataReader's queue with an instance state equal to <see cref="F:Omg.Dds.Subscription.InstanceState.NotAliveDisposed"/>.
            </summary>
            <remarks>@dref_details_DataReaderCacheStatus_disposed_instance_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderCacheStatus.DisposedInstanceCountPeak">
            <summary>
            The highest value of <see cref="P:Rti.Dds.Core.Status.DataReaderCacheStatus.DisposedInstanceCount"/> over the lifetime of the DataReader.
            </summary>
            <remarks>@dref_details_DataReaderCacheStatus_disposed_instance_count_peak</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderCacheStatus.DetachedInstanceCount">
            <summary>
            The number of minimal instance states currently being maintained in the DataReader's queue.
            </summary>
            <remarks>@dref_details_DataReaderCacheStatus_detached_instance_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderCacheStatus.DetachedInstanceCountPeak">
            <summary>
            The highest value of <see cref="P:Rti.Dds.Core.Status.DataReaderCacheStatus.DetachedInstanceCount"/> over the lifetime of the DataReader.
            </summary>
            <remarks>@dref_details_DataReaderCacheStatus_detached_instance_count_peak</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderCacheStatus.CompressedSampleCount">
            <summary>
            The number of received compressed samples by a DataWriter.
            </summary>
            <remarks>@dref_details_DataReaderCacheStatus_compressed_sample_count</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Status.DataReaderCacheStatus.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.DataReaderCacheStatus.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.DataReaderCacheStatus.Equals(Rti.Dds.Core.Status.DataReaderCacheStatus)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.DataReaderCacheStatus.ToString">
            <summary>
            Returns a readable summary of the status
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Status.DataReaderProtocolStatus">
            <summary>
            The status of a reader's internal protocol related metrics, like
            the number of samples received and rejected; and status of wire
            protocol traffic.
            </summary>
            <remarks>@dref_details_DataReaderProtocolStatus</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderProtocolStatus.ReceivedSampleCount">
            <summary>
            The number of samples received by a DataReader.
            </summary>
            <remarks>@dref_details_DataReaderProtocolStatus_received_sample_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderProtocolStatus.ReceivedSampleBytes">
            <summary>
            The number of bytes received by a DataReader.
            </summary>
            <remarks>@dref_details_DataReaderProtocolStatus_received_sample_bytes</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderProtocolStatus.DuplicateSampleCount">
            <summary>
            The number of samples from a remote DataWriter received, not for the first time, by a local DataReader.
            </summary>
            <remarks>@dref_details_DataReaderProtocolStatus_duplicate_sample_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderProtocolStatus.DuplicateSampleBytes">
            <summary>
            The number of bytes of samples from a remote DataWriter received, not for the first time, by a local DataReader.
            </summary>
            <remarks>@dref_details_DataReaderProtocolStatus_duplicate_sample_bytes</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderProtocolStatus.ReceivedHeartbeatCount">
            <summary>
            The number of Heartbeats from a remote DataWriter received by a local DataReader.
            </summary>
            <remarks>@dref_details_DataReaderProtocolStatus_received_heartbeat_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderProtocolStatus.ReceivedHeartbeatBytes">
            <summary>
            The number of bytes of Heartbeats from a remote DataWriter received by a local DataReader.
            </summary>
            <remarks>@dref_details_DataReaderProtocolStatus_received_heartbeat_bytes</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderProtocolStatus.SentAckCount">
            <summary>
            The number of ACKs sent from a local DataReader to a matching remote DataWriter.
            </summary>
            <remarks>@dref_details_DataReaderProtocolStatus_sent_ack_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderProtocolStatus.SentAckBytes">
            <summary>
            The number of bytes of ACKs sent from a local DataReader to a matching remote DataWriter.
            </summary>
            <remarks>@dref_details_DataReaderProtocolStatus_sent_ack_bytes</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderProtocolStatus.SentNackCount">
            <summary>
            The number of NACKs sent from a local DataReader to a matching remote DataWriter.
            </summary>
            <remarks>@dref_details_DataReaderProtocolStatus_sent_nack_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderProtocolStatus.SentNackBytes">
            <summary>
            The number of bytes of NACKs sent from a local DataReader to a matching remote DataWriter.
            </summary>
            <remarks>@dref_details_DataReaderProtocolStatus_sent_nack_bytes</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderProtocolStatus.ReceivedGapCount">
            <summary>
            The number of GAPs received from remote DataWriter to this DataReader.
            </summary>
            <remarks>@dref_details_DataReaderProtocolStatus_received_gap_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderProtocolStatus.ReceivedGapBytes">
            <summary>
            The number of bytes of GAPs received from remote DataWriter to this DataReader.
            </summary>
            <remarks>@dref_details_DataReaderProtocolStatus_received_gap_bytes</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderProtocolStatus.RejectedSampleCount">
            <summary>
            The number of times a sample is rejected because it cannot be accepted by a reliable DataReader.
            </summary>
            <remarks>@dref_details_DataReaderProtocolStatus_rejected_sample_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderProtocolStatus.FirstAvailableSampleSequenceNumber">
            <summary>
            Sequence number of the first available sample in a matched DataWriters reliability queue.
            </summary>
            <remarks>@dref_details_DataReaderProtocolStatus_first_available_sample_sequence_number</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderProtocolStatus.LastAvailableSampleSequenceNumber">
            <summary>
            Sequence number of the last available sample in a matched Datawriter's reliability queue.
            </summary>
            <remarks>@dref_details_DataReaderProtocolStatus_last_available_sample_sequence_number</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderProtocolStatus.LastCommittedSampleSequenceNumber">
            <summary>
            Sequence number of the newest sample received from the matched DataWriter committed to the DataReader's queue.
            </summary>
            <remarks>@dref_details_DataReaderProtocolStatus_last_committed_sample_sequence_number</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderProtocolStatus.UncommittedSampleCount">
            <summary>
            Number of received samples that are not yet available to be read or taken, due to being received out of order.
            </summary>
            <remarks>@dref_details_DataReaderProtocolStatus_uncommitted_sample_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderProtocolStatus.OutOfRangeRejectedSampleCount">
            <summary>
            The number of samples dropped by the DataReader due to received window is full and the sample is out-of-order.
            </summary>
            <remarks>@dref_details_DataReaderProtocolStatus_out_of_range_rejected_sample_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderProtocolStatus.ReceivedFragmentCount">
            <summary>
            The number of DATA_FRAG messages that have been received by this DataReader.
            </summary>
            <remarks>@dref_details_DataReaderProtocolStatus_received_fragment_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderProtocolStatus.DroppedFragmentCount">
            <summary>
            The number of DATA_FRAG messages that have been dropped by a DataReader.
            </summary>
            <remarks>@dref_details_DataReaderProtocolStatus_dropped_fragment_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderProtocolStatus.ReassembledSampleCount">
            <summary>
            The number of fragmented samples that have been reassembled by a DataReader.
            </summary>
            <remarks>@dref_details_DataReaderProtocolStatus_reassembled_sample_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderProtocolStatus.SentNackFragmentCount">
            <summary>
            The number of NACK fragments that have been sent from a DataReader to a DataWriter.
            </summary>
            <remarks>@dref_details_DataReaderProtocolStatus_sent_nack_fragment_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataReaderProtocolStatus.SentNackFragmentBytes">
            <summary>
            The number of NACK fragment bytes that have been sent from a DataReader to a DataWriter.
            </summary>
            <remarks>@dref_details_DataReaderProtocolStatus_sent_nack_fragment_bytes</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Status.DataReaderProtocolStatus.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.DataReaderProtocolStatus.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.DataReaderProtocolStatus.Equals(Rti.Dds.Core.Status.DataReaderProtocolStatus)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.DataReaderProtocolStatus.ToString">
            <summary>
            Returns a readable summary of the status
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Status.DataWriterCacheStatus">
            <summary>
            The status of the DataWriter's cache. Provides
            information on cache related metrics such as the number of samples and
            instances in the DataWriter queue.
            </summary>
            <remarks>@dref_details_DataWriterCacheStatus</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterCacheStatus.SampleCountPeak">
            <summary>
            The highest value of <see cref="P:Rti.Dds.Core.Status.DataWriterCacheStatus.SampleCount"/> over the lifetime of the DataWriter.
            </summary>
            <remarks>@dref_details_DataWriterCacheStatus_sample_count_peak</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterCacheStatus.SampleCount">
            <summary>
            The number of samples in the DataWriter's queue. This statistic includes meta-samples that represent the unregistration or disposal of an instance.
            </summary>
            <remarks>@dref_details_DataWriterCacheStatus_sample_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterCacheStatus.AliveInstanceCount">
            <summary>
            The number of instances currently in the DataWriter's queue that have an instance_state equal to <see cref="F:Omg.Dds.Subscription.InstanceState.Alive"/>.
            </summary>
            <remarks>@dref_details_DataWriterCacheStatus_alive_instance_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterCacheStatus.AliveInstanceCountPeak">
            <summary>
            The highest value of <see cref="P:Rti.Dds.Core.Status.DataWriterCacheStatus.AliveInstanceCount"/> over the lifetime of the DataWriter.
            </summary>
            <remarks>@dref_details_DataWriterCacheStatus_alive_instance_count_peak</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterCacheStatus.DisposedInstanceCount">
            <summary>
            The number of instances currently in the DataWriter's queue that have an instance_state equal to <see cref="F:Omg.Dds.Subscription.InstanceState.NotAliveDisposed"/> (due to, for example, being disposed via the <see cref="M:Rti.Dds.Publication.AnyDataWriter.DisposeInstance(Rti.Dds.Core.InstanceHandle@)"/> operation).
            </summary>
            <remarks>@dref_details_DataWriterCacheStatus_disposed_instance_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterCacheStatus.DisposedInstanceCountPeak">
            <summary>
            The highest value of <see cref="P:Rti.Dds.Core.Status.DataWriterCacheStatus.DisposedInstanceCount"/> over the lifetime of the DataWriter.
            </summary>
            <remarks>@dref_details_DataWriterCacheStatus_disposed_instance_count_peak</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterCacheStatus.UnregisteredInstanceCount">
            <summary>
            The number of instances currently in the DataWriter's queue that the DataWriter has unregistered from via the <see cref="M:Rti.Dds.Publication.AnyDataWriter.UnregisterInstance(Rti.Dds.Core.InstanceHandle@)"/> operation.
            </summary>
            <remarks>@dref_details_DataWriterCacheStatus_unregistered_instance_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterCacheStatus.UnregisteredInstanceCountPeak">
            <summary>
            The highest value of <see cref="P:Rti.Dds.Core.Status.DataWriterCacheStatus.UnregisteredInstanceCount"/> over the lifetime of the DataWriter.
            </summary>
            <remarks>@dref_details_DataWriterCacheStatus_unregistered_instance_count_peak</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Status.DataWriterCacheStatus.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.DataWriterCacheStatus.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.DataWriterCacheStatus.Equals(Rti.Dds.Core.Status.DataWriterCacheStatus)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.DataWriterCacheStatus.ToString">
            <summary>
            Returns a readable summary of the status
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Status.DataWriterProtocolStatus">
            <summary>
            The status of a writer's internal protocol related metrics, like the
            number of samples pushed and pulled; and status of wire protocol
            traffic.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.PushedSampleCount">
            <summary>
            The number of user samples pushed on write from a local DataWriter to a matching remote DataReader.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_pushed_sample_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.PushedSampleBytes">
            <summary>
            The number of bytes of user samples pushed on write from a local DataWriter to a matching remote DataReader.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_pushed_sample_bytes</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.SentHeartbeatCount">
            <summary>
            The number of Heartbeats sent between a local DataWriter and matching remote DataReader.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_sent_heartbeat_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.SentHeartbeatBytes">
            <summary>
            The number of bytes of Heartbeats sent between a local DataWriter and matching remote DataReader.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_sent_heartbeat_bytes</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.PulledSampleCount">
            <summary>
            The number of user samples pulled from local DataWriter by matching DataReaders.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_pulled_sample_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.PulledSampleBytes">
            <summary>
            The number of bytes of user samples pulled from local DataWriter by matching DataReaders.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_pulled_sample_bytes</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.ReceivedAckCount">
            <summary>
            The number of ACKs from a remote DataReader received by a local DataWriter.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_received_ack_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.ReceivedAckBytes">
            <summary>
            The number of bytes of ACKs from a remote DataReader received by a local DataWriter.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_received_ack_bytes</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.ReceivedNackCount">
            <summary>
            The number of NACKs from a remote DataReader received by a local DataWriter.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_received_nack_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.ReceivedNackBytes">
            <summary>
            The number of bytes of NACKs from a remote DataReader received by a local DataWriter.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_received_nack_bytes</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.SentGapCount">
            <summary>
            The number of GAPs sent from local DataWriter to matching remote DataReaders.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_sent_gap_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.SentGapBytes">
            <summary>
            The number of bytes of GAPs sent from local DataWriter to matching remote DataReaders.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_sent_gap_bytes</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.RejectedSampleCount">
            <summary>
            Not supported
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_rejected_sample_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.SendWindowSize">
            <summary>
            Current maximum number of outstanding samples allowed in the DataWriter's queue.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_send_window_size</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.FirstAvailableSampleSequenceNumber">
            <summary>
            The sequence number of the first available sample currently queued in the local DataWriter.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_first_available_sample_sequence_number</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.LastAvailableSampleSequenceNumber">
            <summary>
            The sequence number of the last available sample currently queued in the local DataWriter.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_last_available_sample_sequence_number</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.FirstUnacknowledgedSampleSequenceNumber">
            <summary>
            The sequence number of the first unacknowledged sample currently queued in the local DataWriter.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_first_unacknowledged_sample_sequence_number</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.FirstAvailableSampleVirtualSequenceNumber">
            <summary>
            The virtual sequence number of the first available sample currently queued in the local DataWriter.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_first_available_sample_virtual_sequence_number</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.LastAvailableSampleVirtualSequenceNumber">
            <summary>
            The virtual sequence number of the last available sample currently queued in the local DataWriter.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_last_available_sample_virtual_sequence_number</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.FirstUnacknowledgedSampleVirtualSequenceNumber">
            <summary>
            The virtual sequence number of the first unacknowledged sample currently queued in the local DataWriter.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_first_unacknowledged_sample_virtual_sequence_number</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.FirstUnacknowledgedSampleSubscriptionHandle">
            <summary>
            The handle of a remote DataReader that has not acknowledged the first unacknowledged sample of the local DataWriter.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_first_unacknowledged_sample_subscription_handle</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.FirstUnelapsedKeepDurationSampleSequenceNumber">
            <summary>
            The sequence number of the first sample whose keep duration has not yet elapsed.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_first_unelapsed_keep_duration_sample_sequence_number</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.PushedFragmentCount">
            <summary>
            The number of DATA_FRAG messages that have been pushed by this DataWriter.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_pushed_fragment_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.PushedFragmentBytes">
            <summary>
            The number of bytes of DATA_FRAG messages that have been pushed by this DataWriter.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_pushed_fragment_bytes</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.PulledFragmentCount">
            <summary>
            The number of DATA_FRAG messages that have been pulled from this DataWriter.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_pulled_fragment_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.PulledFragmentBytes">
            <summary>
            The number of bytes of DATA_FRAG messages that have been pulled from this DataWriter.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_pulled_fragment_bytes</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.ReceivedNackFragmentCount">
            <summary>
            The number of NACK_FRAG messages that have been received by this DataWriter.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_received_nack_fragment_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DataWriterProtocolStatus.ReceivedNackFragmentBytes">
            <summary>
            The number of bytes of NACK_FRAG messages that have been received by this DataWriter.
            </summary>
            <remarks>@dref_details_DataWriterProtocolStatus_received_nack_fragment_bytes</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Status.DataWriterProtocolStatus.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.DataWriterProtocolStatus.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.DataWriterProtocolStatus.Equals(Rti.Dds.Core.Status.DataWriterProtocolStatus)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.DataWriterProtocolStatus.ToString">
            <summary>
            Returns a readable summary of the status
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Status.DomainParticipantProtocolStatus">
            <summary>
            @extension The status of a participant's protocol related metrics,
            like the number of corrupted messages, change in corrupted
            messages and timestamp of the last corrupted message.
            </summary>
            <remarks>@dref_details_DomainParticipantProtocolStatus</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DomainParticipantProtocolStatus.CorruptedRtpsMessageCount">
            <summary>
            The number of corrupted RTPS messages detected by the domain participant.
            </summary>
            <remarks>@dref_details_DomainParticipantProtocolStatus_corrupted_rtps_message_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.DomainParticipantProtocolStatus.LastCorruptedMessageTimestamp">
            <summary>
            The timestamp when the last corrupted RTPS message was detected by the domain participant.
            </summary>
            <remarks>@dref_details_DomainParticipantProtocolStatus_last_corrupted_message_timestamp</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Status.DomainParticipantProtocolStatus.Equals(System.Object)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.DomainParticipantProtocolStatus.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.DomainParticipantProtocolStatus.Equals(Rti.Dds.Core.Status.DomainParticipantProtocolStatus)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.DomainParticipantProtocolStatus.ToString">
            <summary>
            Returns a readable summary of the status
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Status.InconsistentTopicStatus">
            <summary>
            Notifies of a change in the <see cref="F:Rti.Dds.Core.Status.StatusMask.InconsistentTopic"/>
            status
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Status.InconsistentTopicStatus.TotalCount">
            <summary>
            Total cumulative count of the pairs (DataReader, DataWriter) whose
            topic names match the Topic to which this status is attached and
            whose types are inconsistent according to the rules defined in
            <see cref="T:Rti.Dds.Core.Policy.TypeConsistencyEnforcement"/>
            </summary>
            <remarks>@dref_details_InconsistentTopicStatus_total_count</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Status.InconsistentTopicStatus.Equals(System.Object)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.InconsistentTopicStatus.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.InconsistentTopicStatus.Equals(Rti.Dds.Core.Status.InconsistentTopicStatus)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.InconsistentTopicStatus.ToString">
            <summary>
            Returns a readable summary of the status
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Status.LivelinessChangedStatus">
            <summary>
            Indicates that the liveliness of one or more matched
            <see cref="T:Rti.Dds.Publication.DataWriter`1"/> has changed.
            </summary>
            <remarks>@dref_details_LivelinessChangedStatus</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.LivelinessChangedStatus.AliveCount">
            <summary>
            Number of matched <see cref="T:Rti.Dds.Publication.DataWriter`1"/>
            that are currently alive.
            </summary>
            <remarks>@dref_details_LivelinessChangedStatus_alive_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.LivelinessChangedStatus.NotAliveCount">
            <summary>
            Number of matched <see cref="T:Rti.Dds.Publication.DataWriter`1"/>
            that are not currently alive.
            </summary>
            <remarks>@dref_details_LivelinessChangedStatus_not_alive_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.LivelinessChangedStatus.LastPublicationHandle">
            <summary>
            This <see cref="T:Rti.Dds.Core.InstanceHandle"/> can be used to look up which
            remote <see cref="T:Rti.Dds.Publication.DataWriter`1"/> was the last to cause
            this <see cref="T:Rti.Dds.Subscription.DataReader`1"/>'s status to change,
            using
            <see cref="M:Rti.Dds.Subscription.AnyDataReader.GetMatchedPublicationData"/>.
            </summary>
            <remarks>@dref_details_LivelinessChangedStatus</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Status.LivelinessChangedStatus.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.LivelinessChangedStatus.Equals(System.Object)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.LivelinessChangedStatus.Equals(Rti.Dds.Core.Status.LivelinessChangedStatus)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.LivelinessChangedStatus.ToString">
            <summary>
            Returns a readable summary of the status
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Status.LivelinessLostStatus">
            <summary>
            The liveliness that the <see cref="T:Rti.Dds.Publication.DataWriter`1"/> has
            committed to through its <see cref="T:Rti.Dds.Core.Policy.Liveliness"/>
            was not respected, thus <see cref="T:Rti.Dds.Subscription.DataReader`1"/> entities
            will consider the  <see cref="T:Rti.Dds.Publication.DataWriter`1"/> as no longer alive.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Status.LivelinessLostStatus.TotalCount">
            <summary>
            Total cumulative number of times that a previously-alive <see cref="T:Rti.Dds.Publication.DataWriter`1"/> became not alive due to a failure to actively signal its liveliness within the offered liveliness period.
            </summary>
            <remarks>@dref_details_LivelinessLostStatus_total_count</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Status.LivelinessLostStatus.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.LivelinessLostStatus.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.LivelinessLostStatus.Equals(Rti.Dds.Core.Status.LivelinessLostStatus)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.LivelinessLostStatus.ToString">
            <summary>
            Returns a readable summary of the status
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Status.OfferedDeadlineMissedStatus">
            <summary>
            Notifies of a change in the <see cref="F:Rti.Dds.Core.Status.StatusMask.OfferedDeadlineMissed"/>
            status
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Status.OfferedDeadlineMissedStatus.TotalCount">
            <summary>
            Total cumulative count of the number of times the DataWriter failed to write within its offered deadline.
            </summary>
            <remarks>@dref_details_OfferedDeadlineMissedStatus_total_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.OfferedDeadlineMissedStatus.LastInstanceHandle">
            <summary>
            Handle to the last instance in the DataWriter for which an offered deadline was missed.
            </summary>
            <remarks>@dref_details_OfferedDeadlineMissedStatus_last_instance_handle</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Status.OfferedDeadlineMissedStatus.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.OfferedDeadlineMissedStatus.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.OfferedDeadlineMissedStatus.Equals(Rti.Dds.Core.Status.OfferedDeadlineMissedStatus)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.OfferedDeadlineMissedStatus.ToString">
            <summary>
            Returns a readable summary of the status
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Status.OfferedIncompatibleQosStatus">
            <summary>
            A QosPolicy value was incompatible with what was requested.
            </summary>
            <remarks>@dref_details_OfferedIncompatibleQosStatus</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.OfferedIncompatibleQosStatus.TotalCount">
            <summary>
            Total cumulative number of times the concerned DataWriter discovered
            a DataReader for the same Topic, common partition with a requested
            QoS that is incompatible with that offered by the DataWriter.
            </summary>
            <remarks>@dref_details_OfferedIncompatibleQosStatus_total_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.OfferedIncompatibleQosStatus.LastPolicy">
            <summary>
            The type of one of the last policy that was found to be incompatible
            the last time an incompatibility was detected.
            </summary>
            <remarks>@dref_details_OfferedIncompatibleQosStatus_last_policy_id</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.OfferedIncompatibleQosStatus.Policies">
            <summary>
            A dictionary containing for each policy the total number of times that
            the concerned DataWriter discovered a DataReader for the same Topic
            and common partition with a requested QoS that is incompatible with
            that offered by the DataWriter.
            </summary>
            <remarks>@dref_details_OfferedIncompatibleQosStatus_policies</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Status.OfferedIncompatibleQosStatus.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.OfferedIncompatibleQosStatus.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.OfferedIncompatibleQosStatus.Equals(Rti.Dds.Core.Status.OfferedIncompatibleQosStatus)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.OfferedIncompatibleQosStatus.ToString">
            <summary>
            Returns a readable summary of the status
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Status.PublicationMatchedStatus">
            <summary>
            Notifies of a change in the <see cref="F:Rti.Dds.Core.Status.StatusMask.PublicationMatched"/>
            status
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.Status.PublicationMatchedStatus.TotalCount">
            <summary>
            The total cumulative number of times that this DataWriter discovered a "match" with a DataReader.
            </summary>
            <remarks>@dref_details_PublicationMatchedStatus_total_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.PublicationMatchedStatus.CurrentCount">
            <summary>
            The current number of DataReaders with which this DataWriter is matched.
            </summary>
            <remarks>@dref_details_PublicationMatchedStatus_current_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.PublicationMatchedStatus.CurrentCountPeak">
            <summary>
            @extension Greatest number of DataReaders that matched this DataWriter simultaneously.
            </summary>
            <remarks>@dref_details_PublicationMatchedStatus_current_count_peak</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.PublicationMatchedStatus.LastSubscriptionHandle">
            <summary>
            This InstanceHandle can be used to look up which remote DataReader was
            the last to cause this DataWriter's status to change, using
            DataWriter.GetMatchedSubscriptionData
            </summary>
            <remarks>@dref_details_PublicationMatchedStatus_last_subscription_handle</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Status.PublicationMatchedStatus.ToString">
            <summary>
            Returns a readable summary of the status
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Status.ReliableReaderActivityChangedStatus">
            <summary>
            Describes the activity (i.e. are acknowledgements forthcoming) of
            reliable readers matched to a reliable writer.
            </summary>
            <remarks>@dref_details_ReliableReaderActivityChangedStatus</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.ReliableReaderActivityChangedStatus.ActiveCount">
            <summary>
            The current number of reliable readers currently matched with this reliable writer.
            </summary>
            <remarks>@dref_details_ReliableReaderActivityChangedStatus_active_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.ReliableReaderActivityChangedStatus.InactiveCount">
            <summary>
            The number of reliable readers that have been dropped by this reliable writer because they failed to send acknowledgements in a timely fashion.
            </summary>
            <remarks>@dref_details_ReliableReaderActivityChangedStatus_inactive_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.ReliableReaderActivityChangedStatus.LastInstanceHandle">
            <summary>
            The instance handle of the last reliable remote reader to be determined inactive.
            </summary>
            <remarks>@dref_details_ReliableReaderActivityChangedStatus_last_instance_handle</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Status.ReliableReaderActivityChangedStatus.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.ReliableReaderActivityChangedStatus.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.ReliableReaderActivityChangedStatus.Equals(Rti.Dds.Core.Status.ReliableReaderActivityChangedStatus)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.ReliableReaderActivityChangedStatus.ToString">
            <summary>
            Returns a readable summary of the status
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Status.ReliableWriterCacheChangedStatus">
            <summary>
            A summary of the state of a data writer's cache of unacknowledged
            samples written.
            </summary>
            <remarks>@dref_details_ReliableWriterCacheChangedStatus</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.ReliableWriterCacheChangedStatus.EmptyReliableWriterCache">
            <summary>
            The number of times the reliable writer's cache of unacknowledged samples has become empty.
            </summary>
            <remarks>@dref_details_ReliableWriterCacheChangedStatus_empty_reliable_writer_cache</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.ReliableWriterCacheChangedStatus.FullReliableWriterCache">
            <summary>
            The number of times the reliable writer's cache, or send window, of unacknowledged samples has become full.
            </summary>
            <remarks>@dref_details_ReliableWriterCacheChangedStatus_full_reliable_writer_cache</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.ReliableWriterCacheChangedStatus.LowWatermarkReliableWriterCache">
            <summary>
            The number of times the reliable writer's cache of unacknowledged samples has fallen to the low watermark.
            </summary>
            <remarks>@dref_details_ReliableWriterCacheChangedStatus_low_watermark_reliable_writer_cache</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.ReliableWriterCacheChangedStatus.HighWatermarkReliableWriterCache">
            <summary>
            The number of times the reliable writer's cache of unacknowledged samples has risen to the high watermark.
            </summary>
            <remarks>@dref_details_ReliableWriterCacheChangedStatus_high_watermark_reliable_writer_cache</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.ReliableWriterCacheChangedStatus.UnacknowledgedSampleCount">
            <summary>
            The current number of unacknowledged samples in the writer's cache.
            </summary>
            <remarks>@dref_details_ReliableWriterCacheChangedStatus_unacknowledged_sample_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.ReliableWriterCacheChangedStatus.UnacknowledgedSampleCountPeak">
            <summary>
            The highest value that unacknowledged_sample_count has reached until now.
            </summary>
            <remarks>@dref_details_ReliableWriterCacheChangedStatus_unacknowledged_sample_count_peak</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.ReliableWriterCacheChangedStatus.ReplacedUnacknowledgedSampleCount">
            <summary>
            The number of unacknowledged samples that have been replaced in the writer's cache.
            </summary>
            <remarks>@dref_details_ReliableWriterCacheChangedStatus_replaced_unacknowledged_sample_count</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Status.ReliableWriterCacheChangedStatus.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.ReliableWriterCacheChangedStatus.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.ReliableWriterCacheChangedStatus.Equals(Rti.Dds.Core.Status.ReliableWriterCacheChangedStatus)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.ReliableWriterCacheChangedStatus.ToString">
            <summary>
            Returns a readable summary of the status
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Status.RequestedDeadlineMissedStatus">
            <summary>
            Indicates that the <see cref="T:Rti.Dds.Subscription.DataReader`1"/> did not
            receive a new sample for an data-instance within the time period set in
            the <see cref="T:Rti.Dds.Subscription.DataReader`1"/>'s
            <see cref="T:Rti.Dds.Core.Policy.Deadline"/>.
            </summary>
            <remarks>@dref_details_RequestedDeadlineMissedStatus</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.RequestedDeadlineMissedStatus.TotalCount">
            <summary>
            Cumulative number of times that the deadline was violated for any
            instance read by the <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <remarks>@dref_details_RequestedDeadlineMissedStatus_total_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.RequestedDeadlineMissedStatus.LastInstanceHandle">
            <summary>
            <see cref="T:Rti.Dds.Core.InstanceHandle"/> to the data-instance for which a
            requested deadline was missed.
            </summary>
            <remarks>@dref_details_RequestedDeadlineMissedStatus_last_instance_handle</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Status.RequestedDeadlineMissedStatus.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.RequestedDeadlineMissedStatus.Equals(System.Object)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.RequestedDeadlineMissedStatus.Equals(Rti.Dds.Core.Status.RequestedDeadlineMissedStatus)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.RequestedDeadlineMissedStatus.ToString">
            <summary>
            Returns a readable summary of the status
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Status.RequestedIncompatibleQosStatus">
            <summary>
            Indicates that the <see cref="T:Rti.Dds.Subscription.DataReader`1"/> discovered
            a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> for the same
            <see cref="T:Rti.Dds.Topics.Topic`1"/>, but that
            <see cref="T:Rti.Dds.Subscription.DataReader`1"/> had requested QoS settings
            incompatible with the ones offered by the
            <see cref="T:Rti.Dds.Publication.DataWriter`1"/>.
            </summary>
            <remarks>@dref_details_RequestedIncompatibleQosStatus</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.RequestedIncompatibleQosStatus.TotalCount">
            <summary>
            Cumulative number of times the
            <see cref="T:Rti.Dds.Subscription.DataReader`1"/> discovered a
            <see cref="T:Rti.Dds.Publication.DataWriter`1"/> for the same
            <see cref="T:Rti.Dds.Topics.Topic`1"/> with an offered QoS that is
            incompatible with that requested by the
            <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <remarks>@dref_details_RequestedIncompatibleQosStatus_total_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.RequestedIncompatibleQosStatus.LastPolicy">
            <summary>
            The type of the policy that was found to be incompatible the last
            time an incompatibility was detected.
            (Note: if there are multiple incompatible policies, only one of them
            is reported here.)
            </summary>
            <remarks>@dref_details_RequestedIncompatibleQosStatus_last_policy_id</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.RequestedIncompatibleQosStatus.Policies">
            <summary>
            A dictionary containing —for each policy— the total number of times
            that the <see cref="T:Rti.Dds.Subscription.DataReader`1"/> discovered a
            <see cref="T:Rti.Dds.Publication.DataWriter`1"/> for the same
            <see cref="T:Rti.Dds.Topics.Topic`1"/> with a offered QoS that is
            incompatible with that requested by the
            <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <remarks>@dref_details_RequestedIncompatibleQosStatus_policies</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Status.RequestedIncompatibleQosStatus.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.RequestedIncompatibleQosStatus.Equals(System.Object)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.RequestedIncompatibleQosStatus.Equals(Rti.Dds.Core.Status.RequestedIncompatibleQosStatus)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.RequestedIncompatibleQosStatus.ToString">
            <summary>
            Returns a readable summary of the status
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Status.SampleLostStatus">
            <summary>
            Indicates that one or more samples written by a matched
            <see cref="T:Rti.Dds.Publication.DataWriter`1"/> have failed to be received by
            the <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <remarks>@dref_details_SampleLostStatus</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.SampleLostStatus.TotalCount">
            <summary>
            Cumulative count of all the samples that have been lost across all
            instances of data written for the <see cref="T:Rti.Dds.Topics.Topic`1"/>.
            </summary>
            <remarks>@dref_details_SampleLostStatus_total_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.SampleLostStatus.LastReason">
            <summary>
            The reason the last sample was lost.
            </summary>
            <remarks>@dref_details_SampleLostStatus_last_reason</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Status.SampleLostStatus.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.SampleLostStatus.Equals(System.Object)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.SampleLostStatus.Equals(Rti.Dds.Core.Status.SampleLostStatus)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.SampleLostStatus.ToString">
            <summary>
            Returns a readable summary of the status
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Status.SampleLostStatusKind">
            <summary>
            Represents the reason why a sample written by a matched
            <see cref="T:Rti.Dds.Publication.DataWriter`1"/> have failed to be received
            by the <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <remarks>@dref_details_SampleLostStatusKind</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Status.SampleLostStatusKind.NotLost">
            <summary>
            The sample was not lost.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Status.SampleLostStatusKind.LostByWriter">
            <summary>
            A <see cref="T:Rti.Dds.Publication.DataWriter`1"/> removed the sample before
            being received by the <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Status.SampleLostStatusKind.LostByInstancesLimit">
            <summary>
            A resource limit on the number of instances was reached.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Status.SampleLostStatusKind.LostByRemoteWritersPerInstanceLimit">
            <summary>
            A resource limit on the number of remote writers for a single
            instance from which a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may
            read was reached.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Status.SampleLostStatusKind.LostByIncompleteCoherentSet">
            <summary>
            A sample was lost because it was part of an incomplete coherent set.
            An incomplete coherent set is a coherent set for which some of
            the samples are missing.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Status.SampleLostStatusKind.LostByLargeCoherentSet">
            <summary>
            A sample was lost because it was part of a large coherent set.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Status.SampleLostStatusKind.LostBySamplesPerRemoteWriterLimit">
            <summary>
            A resource limit on the number of samples from a given remote writer
            that a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may store was
            reached.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Status.SampleLostStatusKind.LostByVirtualWritersLimit">
            <summary>
            A resource limit on the number of virtual writers from which a
            <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may read was reached.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Status.SampleLostStatusKind.LostByRemoteWritersPerSampleLimit">
            <summary>
            A resource limit on the number of remote writers per sample was
            reached.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Status.SampleLostStatusKind.LostByAvailabilityWaitingTime">
            <summary>
            <see cref="P:Rti.Dds.Core.Policy.Availability.MaxDataAvailabilityWaitingTime"/> expired.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Status.SampleLostStatusKind.LostByRemoteWriterSamplesPerVirtualQueueLimit">
            <summary>
            A resource limit on the number of samples published by a remote
            writer on behalf of a virtual writer that a
            <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may store was reached.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Status.SampleLostStatusKind.LostByOutOfMemory">
            <summary>
            A sample was lost because there was not enough memory to store the
            sample.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Status.SampleLostStatusKind.LostByUnknownInstance">
            <summary>
            A received sample was lost because it doesn't contain enough
            information for the <see cref="T:Rti.Dds.Subscription.DataReader`1"/> to
            know what instance it is associated with.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Status.SampleLostStatusKind.LostByDeserializationFailure">
            <summary>
            A received sample was lost because it could not be deserialized.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Status.SampleLostStatusKind.LostByDecodeFailure">
            <summary>
            When using <see cref="F:Rti.Dds.Core.Policy.ReliabilityKind.BestEffort"/>:
            A received sample was lost because it could not be decoded.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Status.SampleLostStatusKind.LostBySamplesPerInstanceLimit">
            <summary>
            When using <see cref="F:Rti.Dds.Core.Policy.ReliabilityKind.BestEffort"/>:
            A resource limit on the number of samples per instance
            (<see cref="P:Rti.Dds.Core.Policy.ResourceLimits.MaxSamplesPerInstance"/>)
            was reached.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Status.SampleLostStatusKind.LostBySamplesLimit">
            <summary>
            When using <see cref="F:Rti.Dds.Core.Policy.ReliabilityKind.BestEffort"/>:
            A resource limit on the number of samples
            (<see cref="P:Rti.Dds.Core.Policy.ResourceLimits.MaxSamples"/>)
            was reached.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Status.SampleRejectedStatus">
            <summary>
            Indicates that one or more samples received from a matched
            <see cref="T:Rti.Dds.Publication.DataWriter`1"/> have been rejected by the
            <see cref="T:Rti.Dds.Subscription.DataReader`1"/> because a resource limit would
            have been exceeded.
            </summary>
            <remarks>@dref_details_SampleRejectedStatus</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.SampleRejectedStatus.TotalCount">
            <summary>
            Total cumulative count of samples rejected by the
            <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <remarks>@dref_details_SampleRejectedStatus_total_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.SampleRejectedStatus.LastReason">
            <summary>
            Reason for rejecting the last sample.
            </summary>
            <remarks>@dref_details_SampleRejectedStatus_last_reason</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.SampleRejectedStatus.LastInstanceHandle">
            <summary>
            <see cref="T:Rti.Dds.Core.InstanceHandle"/> to the data-instance for which the last
            sample was rejected.
            </summary>
            <remarks>@dref_details_SampleRejectedStatus_last_instance_handle</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Status.SampleRejectedStatus.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.SampleRejectedStatus.Equals(System.Object)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.SampleRejectedStatus.Equals(Rti.Dds.Core.Status.SampleRejectedStatus)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.SampleRejectedStatus.ToString">
            <summary>
            Returns a readable summary of the status
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Status.SampleRejectedStatusKind">
            <summary>
            Represents the reason why a sample may have been rejected by the
            <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <remarks>@dref_details_SampleRejectedStatusKind</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Status.SampleRejectedStatusKind.NotRejected">
            <summary>
            Sample was accepted.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Status.SampleRejectedStatusKind.RejectedByInstancesLimit">
            <summary>
            A resource limit on the number of instances that can be handled at
            the same time by the <see cref="T:Rti.Dds.Subscription.DataReader`1"/> was
            reached.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Status.SampleRejectedStatusKind.RejectedBySamplesLimit">
            <summary>
            A resource limit on the total number of samples was reached.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Status.SampleRejectedStatusKind.RejectedBySamplesPerInstanceLimit">
            <summary>
            A resource limit on the number of samples per instance was reached.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Status.SampleRejectedStatusKind.RejectedBySamplesPerRemoteWriterLimit">
            <summary>
            A resource limit on the number of samples that a
            <see cref="T:Rti.Dds.Subscription.DataReader`1"/> may store from a specific
            <see cref="T:Rti.Dds.Publication.DataWriter`1"/> was reached.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Status.SampleRejectedStatusKind.RejectedByRemoteWriterSamplesPerVirtualQueueLimit">
            <summary>
            A resource limit on the number of samples published by a remote
            <see cref="T:Rti.Dds.Publication.DataWriter`1"/> on behalf of a virtual
            writer that a <see cref="T:Rti.Dds.Subscription.DataReader`1"/>
            may store was reached.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Status.SampleRejectedStatusKind.RejectedByDecodeFailure">
            <summary>
            Failure to decode the sample by the <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Status.ServiceRequestAcceptedStatus">
            <summary>
            Notifies of a change in the
            <see cref="F:Rti.Dds.Core.Status.StatusMask.ServiceRequestAccepted"/> status.
            </summary>
            <remarks>@dref_details_ServiceRequestAcceptedStatus</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.ServiceRequestAcceptedStatus.TotalCount">
            <summary>
            The total cumulative number of ServiceRequests that have been accepted by a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>.
            </summary>
            <remarks>@dref_details_ServiceRequestAcceptedStatus_total_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.ServiceRequestAcceptedStatus.CurrentCount">
            <summary>
            The current number of ServiceRequests that have been accepted by this <see cref="T:Rti.Dds.Publication.DataWriter`1"/>.
            </summary>
            <remarks>@dref_details_ServiceRequestAcceptedStatus_current_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.ServiceRequestAcceptedStatus.LastRequestHandle">
            <summary>
            A handle to the last ServiceRequest that caused the <see cref="T:Rti.Dds.Publication.DataWriter`1"/>'s
            status to change.
            </summary>
            <remarks>@dref_details_ServiceRequestAcceptedStatus_last_request_handle</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.ServiceRequestAcceptedStatus.ServiceId">
            <summary>
            ID of the service to which the accepted Request belongs.
            </summary>
            <remarks>@dref_details_ServiceRequestAcceptedStatus_service_id</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Status.ServiceRequestAcceptedStatus.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.ServiceRequestAcceptedStatus.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.ServiceRequestAcceptedStatus.Equals(Rti.Dds.Core.Status.ServiceRequestAcceptedStatus)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.ServiceRequestAcceptedStatus.ToString">
            <summary>
            Returns a readable summary of the status
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Status.StatusMask">
            <summary>
            Each flag identifies a <see cref="T:Rti.Dds.Core.Entity"/> status.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Status.StatusMask.None">
            <summary>
            A mask with no status.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.Status.StatusMask.InconsistentTopic">
            <summary>
            Another topic exists with the same name but different characteristics.
            </summary>
            <remarks>@dref_details_StatusKind_INCONSISTENT_TOPIC_STATUS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Status.StatusMask.OfferedDeadlineMissed">
            <summary>
            The deadline that the <see cref="T:Rti.Dds.Publication.DataWriter`1"/> has committed through its <see cref="T:Rti.Dds.Core.Policy.Deadline"/> policy was not respected for a specific instance.
            </summary>
            <remarks>@dref_details_StatusKind_OFFERED_DEADLINE_MISSED_STATUS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Status.StatusMask.RequestedDeadlineMissed">
            <summary>
            The deadline that the <see cref="T:Rti.Dds.Subscription.DataReader`1"/> was expecting through its <see cref="T:Rti.Dds.Core.Policy.Deadline"/> was not respected for a specific instance.
            </summary>
            <remarks>@dref_details_StatusKind_REQUESTED_DEADLINE_MISSED_STATUS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Status.StatusMask.OfferedIncompatibleQos">
            <summary>
            A Qos policy value was incompatible with what was requested.
            </summary>
            <remarks>@dref_details_StatusKind_OFFERED_INCOMPATIBLE_QOS_STATUS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Status.StatusMask.RequestedIncompatibleQos">
            <summary>
            A Qos policy value was incompatible with what is offered.
            </summary>
            <remarks>@dref_details_StatusKind_REQUESTED_INCOMPATIBLE_QOS_STATUS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Status.StatusMask.SampleLost">
            <summary>
            A sample has been lost (i.e. was never received).
            </summary>
            <remarks>@dref_details_StatusKind_SAMPLE_LOST_STATUS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Status.StatusMask.SampleRejected">
            <summary>
            A (received) sample has been rejected.
            </summary>
            <remarks>@dref_details_StatusKind_SAMPLE_REJECTED_STATUS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Status.StatusMask.DataOnReaders">
            <summary>
            New data is available.
            </summary>
            <remarks>@dref_details_StatusKind_DATA_ON_READERS_STATUS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Status.StatusMask.DataAvailable">
            <summary>
            One or more new data samples have been received.
            </summary>
            <remarks>@dref_details_StatusKind_DATA_AVAILABLE_STATUS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Status.StatusMask.LivelinessLost">
            <summary>
            The liveliness that the <see cref="T:Rti.Dds.Publication.DataWriter`1"/> has committed to through its <see cref="T:Rti.Dds.Core.Policy.Liveliness"/> was not respected, thus <see cref="T:Rti.Dds.Subscription.DataReader`1"/> entities will consider the <see cref="T:Rti.Dds.Publication.DataWriter`1"/> as no longer alive.
            </summary>
            <remarks>@dref_details_StatusKind_LIVELINESS_LOST_STATUS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Status.StatusMask.LivelinessChanged">
            <summary>
            The liveliness of one or more <see cref="T:Rti.Dds.Publication.DataWriter`1"/> that were writing instances read through the <see cref="T:Rti.Dds.Subscription.DataReader`1"/> has changed. Some <see cref="T:Rti.Dds.Publication.DataWriter`1"/> have become alive or not_alive.
            </summary>
            <remarks>@dref_details_StatusKind_LIVELINESS_CHANGED_STATUS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Status.StatusMask.PublicationMatched">
            <summary>
            The <see cref="T:Rti.Dds.Publication.DataWriter`1"/> has found <see cref="T:Rti.Dds.Subscription.DataReader`1"/> that matches the <see cref="T:Rti.Dds.Topics.Topic`1"/> and has compatible QoS.
            </summary>
            <remarks>@dref_details_StatusKind_PUBLICATION_MATCHED_STATUS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Status.StatusMask.SubscriptionMatched">
            <summary>
            The <see cref="T:Rti.Dds.Subscription.DataReader`1"/> has found <see cref="T:Rti.Dds.Publication.DataWriter`1"/> that matches the <see cref="T:Rti.Dds.Topics.Topic`1"/> and has compatible QoS.
            </summary>
            <remarks>@dref_details_StatusKind_SUBSCRIPTION_MATCHED_STATUS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Status.StatusMask.ServiceRequestAccepted">
            <summary>
            @extension A service request has been received for a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>.
            </summary>
            <remarks>@dref_details_StatusKind_SERVICE_REQUEST_ACCEPTED_STATUS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Status.StatusMask.DataWriterApplicationAcknowledgementReceived">
            <summary>
            @extension A <see cref="T:Rti.Dds.Publication.DataWriter`1"/> has received an application-level acknowledgment
            for a sample.
            </summary>
            <remarks>@dref_details_StatusKind_DATA_WRITER_APPLICATION_ACKNOWLEDGMENT_STATUS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Status.StatusMask.DataWriterInstanceReplaced">
            <summary>
            @extension A <see cref="T:Rti.Dds.Publication.DataWriter`1"/> instance has been replaced.
            </summary>
            <remarks>@dref_details_StatusKind_DATA_WRITER_INSTANCE_REPLACED_STATUS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Status.StatusMask.ReliableWriterCacheChanged">
            <summary>
            @extension The number of unacknowledged samples in a reliable writer's
            cache has changed and reached a pre-defined trigger point.
            </summary>
            <remarks>@dref_details_StatusKind_RELIABLE_WRITER_CACHE_CHANGED_STATUS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Status.StatusMask.ReliableReaderActivityChanged">
            <summary>
            @extension One or more reliable readers has become active or inactive.
            </summary>
            <remarks>@dref_details_StatusKind_RELIABLE_READER_ACTIVITY_CHANGED_STATUS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Status.StatusMask.DataWriterCache">
            <summary>
            @extension The status of the writer's cache.
            </summary>
            <remarks>@dref_details_StatusKind_DATA_WRITER_CACHE_STATUS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Status.StatusMask.DataWriterProtocol">
            <summary>
            @extension The status of a writer's internal protocol related metrics.
            </summary>
            <remarks>@dref_details_StatusKind_DATA_WRITER_PROTOCOL_STATUS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Status.StatusMask.DataReaderCache">
            <summary>
            @extension The status of the reader's cache.
            </summary>
            <remarks>@dref_details_StatusKind_DATA_READER_CACHE_STATUS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Status.StatusMask.DataReaderProtocol">
            <summary>
            @extension The status of a reader's internal protocol related metrics.
            </summary>
            <remarks>@dref_details_StatusKind_DATA_READER_PROTOCOL_STATUS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Status.StatusMask.DataWriterSampleRemoved">
            <summary>
            @extension A sample has been removed from a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>.
            </summary>
            <remarks>@dref_details_StatusKind_DATA_WRITER_SAMPLE_REMOVED_STATUS</remarks>
        </member>
        <member name="F:Rti.Dds.Core.Status.StatusMask.All">
            <summary>
            A mask with all statuses
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.Status.SubscriptionMatchedStatus">
            <summary>
            Indicates that the <see cref="T:Rti.Dds.Subscription.DataReader`1"/>  discovered
            a matching <see cref="T:Rti.Dds.Publication.DataWriter`1"/>.
            </summary>
            <remarks>@dref_details_SubscriptionMatchedStatus</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.SubscriptionMatchedStatus.TotalCount">
            <summary>
            The total cumulative number of times that this DataReader
            discovered a "match" with a DataWriter.
            </summary>
            <remarks>@dref_details_SubscriptionMatchedStatus_total_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.SubscriptionMatchedStatus.CurrentCount">
            <summary>
            The current number of DataWriters with which the DataReader is matched.
            </summary>
            <remarks>@dref_details_SubscriptionMatchedStatus_current_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.SubscriptionMatchedStatus.CurrentCountPeak">
            <summary>
            @extension Greatest number of DataWriters that matched this DataReader
            simultaneously.
            </summary>
            <remarks>@dref_details_SubscriptionMatchedStatus_current_count_peak</remarks>
        </member>
        <member name="P:Rti.Dds.Core.Status.SubscriptionMatchedStatus.LastPublicationHandle">
            <summary>
            This InstanceHandle can be used to look up which remote DataWriter was
            the last to cause this DataReader's status to change, using
            <see cref="M:Rti.Dds.Subscription.AnyDataReader.GetMatchedPublicationData(Rti.Dds.Core.InstanceHandle@)"/>
            </summary>
            <remarks>@dref_details_SubscriptionMatchedStatus_last_publication_handle</remarks>
        </member>
        <member name="M:Rti.Dds.Core.Status.SubscriptionMatchedStatus.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.SubscriptionMatchedStatus.Equals(System.Object)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.SubscriptionMatchedStatus.Equals(Rti.Dds.Core.Status.SubscriptionMatchedStatus)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.Status.SubscriptionMatchedStatus.ToString">
            <summary>
            Returns a readable summary of the status
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.StatusCondition">
            <summary>
            A <see cref="T:Rti.Dds.Core.Condition"/> that is associated with each <see cref="P:Rti.Dds.Core.StatusCondition.Entity" />
            and activates when certain status changes happen to that Entity.
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.StatusCondition.Entity">
            <summary>
            Get the <see cref="P:Rti.Dds.Core.StatusCondition.Entity"/> associated with the <see cref="T:Rti.Dds.Core.StatusCondition"/>.
            </summary>
            <remarks>@dref_details_StatusCondition_get_entity</remarks>
        </member>
        <member name="P:Rti.Dds.Core.StatusCondition.EnabledStatuses">
            <summary>
            Get or set the list of statuses enabled on an <see cref="P:Rti.Dds.Core.StatusCondition.Entity"/>.
            </summary>
            <remarks>@dref_details_StatusCondition_set_enabled_statuses</remarks>
        </member>
        <member name="T:Rti.Dds.Core.TransportInfo">
            <summary>
            @extension Contains the class id and message max size of an installed transport.
            </summary>
            <remarks>@dref_details_TransportInfo_t</remarks>
        </member>
        <member name="P:Rti.Dds.Core.TransportInfo.ClassId">
            <summary>
            The class_id identifies the transport associated with the message_size_max.
            </summary>
            <remarks>@dref_details_TransportInfo_t_class_id</remarks>
        </member>
        <member name="P:Rti.Dds.Core.TransportInfo.MessageSizeMax">
            <summary>
            The maximum size of an RTPS message in bytes that can be sent or received by the transport plugin identified by the class_id.
            </summary>
            <remarks>@dref_details_TransportInfo_t_message_size_max</remarks>
        </member>
        <member name="P:Rti.Dds.Core.TransportInfo.Default">
            <summary>Singleton containing the default value of a TransportInfo</summary>
        </member>
        <member name="M:Rti.Dds.Core.TransportInfo.With(System.Action{Rti.Dds.Core.TransportInfoBuilder})">
            <summary>
            Creates a new TransportInfo with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this TransportInfo.
            </param>
            <returns>A new TransportInfo with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.TransportInfo.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.TransportInfo.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.TransportInfo.Equals(Rti.Dds.Core.TransportInfo)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.TransportInfoBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.TransportInfo"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.TransportInfoBuilder.#ctor(Rti.Dds.Core.TransportInfo)">
            <summary>
            Creates a builder with the values of an existing immutable instance
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.TransportInfoBuilder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.TransportInfoBuilder.ClassId">
            <summary>
            The class_id identifies the transport associated with the message_size_max.
            </summary>
            <remarks>@dref_details_TransportInfo_t_class_id</remarks>
        </member>
        <member name="P:Rti.Dds.Core.TransportInfoBuilder.MessageSizeMax">
            <summary>
            The maximum size of an RTPS message in bytes that can be sent or received by the transport plugin identified by the class_id.
            </summary>
            <remarks>@dref_details_TransportInfo_t_message_size_max</remarks>
        </member>
        <member name="M:Rti.Dds.Core.TransportInfoBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.TransportInfo"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.TransportClassId">
            <summary>
            Definition of the transport class id.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.TransportClassId.Invalid">
            <summary>
            Invalid.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.TransportClassId.Any">
            <summary>
            Any.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.TransportClassId.UDPv4">
            <summary>
            UDPv4.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.TransportClassId.Shmem510">
            <summary>
            Shared memory in RTI Connext 5.1.0 and earlier.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.TransportClassId.UDPv6">
            <summary>
            UDPv6.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.TransportClassId.Intra">
            <summary>
            Intra.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.TransportClassId.UDPv6510">
            <summary>
            UDPv6 in RTI Connext 5.1.0 and earlier.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.TransportClassId.DTLS">
            <summary>
            DTLS.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.TransportClassId.WAN">
            <summary>
            WAN.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.TransportClassId.TCPv4LAN">
            <summary>
            TCPv4 LAN mode.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.TransportClassId.TCPv4WAN">
            <summary>
            TCPv4 WAN mode.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.TransportClassId.TLSv4LAN">
            <summary>
            TLSv4 LAN mode.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.TransportClassId.TLSv4WAN">
            <summary>
            TLSv4 WAN mode.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.TransportClassId.ReservedRange">
            <summary>
            Reserved for additional user-defined transport plugins.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.TransportClassId.Shmem">
            <summary>
            Shared memory.
            </summary>
        </member>
        <member name="F:Rti.Dds.Core.TransportClassId.UDPv4Wan">
            <summary>
            UDPv4 WAN.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.VendorId">
            <summary>
            Type used to represent the vendor of the service implementing the RTPS protocol.
            </summary>
            <remarks>@dref_details_VendorId_t</remarks>
        </member>
        <member name="P:Rti.Dds.Core.VendorId.Value">
            <summary>
            The vendor Id.
            </summary>
            <remarks>@dref_details_VendorId_t_vendorId</remarks>
        </member>
        <member name="P:Rti.Dds.Core.VendorId.Default">
            <summary>Singleton containing the default value of a VendorId</summary>
        </member>
        <member name="M:Rti.Dds.Core.VendorId.#ctor(System.Int16)">
            <summary>
            // Creates a new object from a vendor id value
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.VendorId.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.VendorId.Equals(Rti.Dds.Core.VendorId)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.WaitSet">
            <summary>
            Allows an application to wait until one or more of the attached
            Condition objects have a trigger value of true or else until the timeout
            expires.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.WaitSet.#ctor">
            <summary>
            Creates a new WaitSet
            </summary>
            <remarks>@dref_details_WaitSet_new</remarks>
        </member>
        <member name="M:Rti.Dds.Core.WaitSet.#ctor(Rti.Dds.Core.WaitSetProperty)">
            <summary>
            Creates a new WaitSet with a non-default configuration.
            </summary>
            <remarks>@dref_details_WaitSet_new_ex</remarks>
        </member>
        <member name="P:Rti.Dds.Core.WaitSet.Conditions">
            <summary>
            Retrieves the list of attached Conditions.
            </summary>
            <remarks>@dref_details_WaitSet_get_conditions</remarks>
        </member>
        <member name="M:Rti.Dds.Core.WaitSet.AttachCondition(Rti.Dds.Core.Condition)">
            <summary>
            Attaches a Condition to the WaitSet.
            </summary>
            <remarks>@dref_details_WaitSet_attach_condition</remarks>
        </member>
        <member name="M:Rti.Dds.Core.WaitSet.DetachCondition(Rti.Dds.Core.Condition)">
            <summary>
            Detaches a Condition from the WaitSet.
            </summary>
            <remarks>@dref_details_WaitSet_detach_condition</remarks>
        </member>
        <member name="M:Rti.Dds.Core.WaitSet.Dispatch(Omg.Dds.Core.Duration)">
            <summary>
            Waits for at least one of the attached conditions to trigger and then
            calls the event handler for each of the active conditions.
            </summary>
            <remarks>
            <para>
            This is an alternative pattern to the use of Wait(). Instead of
            receiving the list of active conditions, the application associates an
            event handler to each condition before attaching it to the WaitSet.
            When this method wakes up after one or more conditions have become
            active, it calls their <see cref="E:Rti.Dds.Core.Condition.Triggered"/> event handlers
            before returning. The handlers are called by Dispatch() in the context
            of the current thread.
            </para>
            </remarks>
            <param name="maxWait">The maximum time to wait. If that time elapses
            this method returns normally without calling any of the condition
            handlers.
            </param>
            <returns>
            The number of conditions that were triggered (or 0 if the maxWait
            elapsed)
            </returns>
        </member>
        <member name="M:Rti.Dds.Core.WaitSet.Dispatch">
            <summary>
            Waits an unlimited amount of time for at least one of the attached
            conditions to trigger and then calls the event handlers of the
            active conditions.
            </summary>
            <returns>The number of conditions that were triggered</returns>
        </member>
        <member name="M:Rti.Dds.Core.WaitSet.Wait(Omg.Dds.Core.Duration)">
            <summary>
            Allows an application thread to wait for the occurrence of certain conditions.
            </summary>
            <remarks>@dref_details_WaitSet_wait</remarks>
        </member>
        <member name="M:Rti.Dds.Core.WaitSet.Wait">
            <summary>
            Allows an application thread to wait for the occurrence of certain conditions.
            It waits an infinite amount of time.
            </summary>
            <remarks>@dref_details_WaitSet_wait</remarks>
        </member>
        <member name="M:Rti.Dds.Core.WaitSet.Dispose">
            <summary>
            Releases the native resources used by this WaitSet. A finalizer is
            also provided, so it is not necessary to call Dispose.
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.WaitSetProperty">
            <summary>
            Specifies how a <see cref="T:Rti.Dds.Core.WaitSet"/> behaves when multiple
            conditions are triggered.
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.WaitSetProperty.#ctor(System.Int32,Omg.Dds.Core.Duration)">
            <summary>
            Creates a new WaitSetProperty with the given parameters
            </summary>
            <param name="maxEventCount">The value for <see cref="P:Rti.Dds.Core.WaitSetProperty.MaxEventCount"/></param>
            <param name="maxEventDelay">The value for <see cref="P:Rti.Dds.Core.WaitSetProperty.MaxEventDelay"/></param>
        </member>
        <member name="P:Rti.Dds.Core.WaitSetProperty.MaxEventCount">
            <summary>
            Maximum number of trigger events to cause a <see cref="T:Rti.Dds.Core.WaitSet"/> to awaken.
            </summary>
            <remarks>@dref_details_WaitSetProperty_t_max_event_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.WaitSetProperty.MaxEventDelay">
            <summary>
            Maximum delay from occurrence of first trigger event to cause a <see cref="T:Rti.Dds.Core.WaitSet"/> to awaken.
            </summary>
            <remarks>@dref_details_WaitSetProperty_t_max_event_delay</remarks>
        </member>
        <member name="P:Rti.Dds.Core.WaitSetProperty.Default">
            <summary>Singleton containing the default value of a WaitSetProperty</summary>
        </member>
        <member name="M:Rti.Dds.Core.WaitSetProperty.With(System.Action{Rti.Dds.Core.WaitSetPropertyBuilder})">
            <summary>
            Creates a new WaitSetProperty with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            object with the current values of this WaitSetProperty.
            </param>
            <returns>A new WaitSetProperty with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Core.WaitSetProperty.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.WaitSetProperty.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Core.WaitSetProperty.Equals(Rti.Dds.Core.WaitSetProperty)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Core.WaitSetPropertyBuilder">
            <summary>
            A modifiable type used to create an immutable <see cref="T:Rti.Dds.Core.WaitSetProperty"/>
            </summary>
        </member>
        <member name="P:Rti.Dds.Core.WaitSetPropertyBuilder.MaxEventCount">
            <summary>
            Maximum number of trigger events to cause a <see cref="T:Rti.Dds.Core.WaitSet"/> to awaken.
            </summary>
            <remarks>@dref_details_WaitSetProperty_t_max_event_count</remarks>
        </member>
        <member name="P:Rti.Dds.Core.WaitSetPropertyBuilder.MaxEventDelay">
            <summary>
            Maximum delay from occurrence of first trigger event to cause a <see cref="T:Rti.Dds.Core.WaitSet"/> to awaken.
            </summary>
            <remarks>@dref_details_WaitSetProperty_t_max_event_delay</remarks>
        </member>
        <member name="M:Rti.Dds.Core.WaitSetPropertyBuilder.Build">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Core.WaitSetProperty"/> immutable object from this one.
            </summary>
        </member>
        <member name="T:Rti.Dds.Domain.DomainParticipant">
            <summary>
            Container for all other <see cref="T:Rti.Dds.Core.Entity" /> objects.
            </summary>
            <remarks>@dref_details_DomainParticipant</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipant.InternalTaskDispatcher">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Domain.DomainParticipant"/>.
            </summary>
            <remarks>@dref_details_DomainParticipantFactory_create_participant</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.#ctor(System.Int32,Rti.Dds.Domain.DomainParticipantQos,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Domain.DomainParticipant"/>.
            </summary>
            <remarks>@dref_details_DomainParticipantFactory_create_participant</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipant.ImplicitSubscriber">
            <summary>
            @extension Returns the implicit <see cref="T:Rti.Dds.Subscription.Subscriber"/>.
            If an implicit Subscriber does not already exist, this creates one.
            </summary>
            <remarks>@dref_details_DomainParticipant_get_implicit_subscriber</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipant.ImplicitPublisher">
            <summary>
            @extension Returns the implicit <see cref="T:Rti.Dds.Publication.Publisher"/>.
            If an implicit Publisher does not already exist, this creates one.
            </summary>
            <remarks>@dref_details_DomainParticipant_get_implicit_publisher</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipant.BuiltinSubscriber">
            <summary>
            Returns the built-in <see cref="T:Rti.Dds.Subscription.Subscriber"/>.
            </summary>
            <remarks>
            <para>
            The built-in Subscriber contains the following DataReaders used for discovery:
            - DataReader&lt;Rti.Dds.Topics.SubscriptionBuiltinTopicData&gt; (topic name:  <see cref="F:Rti.Dds.Subscription.Subscriber.SubscriptionBuiltinTopicName"/>)
            - DataReader&lt;Rti.Dds.Topics.PublicationBuiltinTopicData&gt; (topic name:  <see cref="F:Rti.Dds.Subscription.Subscriber.PublicationBuiltinTopicName"/>)
            - DataReader&lt;Rti.Dds.Topics.TopicBuiltinTopicData&gt; (topic name:  <see cref="F:Rti.Dds.Subscription.Subscriber.TopicBuiltinTopicName"/>)
            - DataReader&lt;Rti.Dds.Topics.ParticipantBuiltinTopicData&gt; (topic name:  <see cref="F:Rti.Dds.Subscription.Subscriber.ParticipantBuiltinTopicName"/>)
            </para>
            <para>Use <see cref="M:Rti.Dds.Subscription.Subscriber.LookupDataReader(System.String)"/> to get access to these readers.</para>
            <para>See \ref DDSDiscoveryExampleModule</para>
            <para>@dref_details_DomainParticipant_get_builtin_subscriber</para>
            </remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipant.DomainId">
            <summary>
            Gets this participant's domain id
            </summary>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipant.Qos">
            <summary>
            Get or change the QoS of this DomainParticipant.
            </summary>
            <remarks>@dref_details_DomainParticipant_set_qos</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipant.DefaultPublisherQos">
            <summary>
            Get or change the default <see cref="T:Rti.Dds.Publication.PublisherQos"/>.
            </summary>
            <remarks>@dref_details_DomainParticipant_get_default_publisher_qos</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipant.DefaultSubscriberQos">
            <summary>
            Get or change the default <see cref="T:Rti.Dds.Subscription.SubscriberQos"/>.
            </summary>
            <remarks>@dref_details_DomainParticipant_get_default_subscriber_qos</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipant.DefaultTopicQos">
            <summary>
            Get or change the default <see cref="T:Rti.Dds.Topics.TopicQos"/>.
            </summary>
            <remarks>@dref_details_DomainParticipant_get_default_topic_qos</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipant.DefaultDataReaderQos">
            <summary>
            Get or change the default <see cref="T:Rti.Dds.Subscription.DataReaderQos"/>.
            </summary>
            <remarks>@dref_details_DomainParticipant_get_default_datareader_qos</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipant.DefaultDataWriterQos">
            <summary>
            Get or change the default <see cref="T:Rti.Dds.Publication.DataWriterQos"/>.
            </summary>
            <remarks>@dref_details_DomainParticipant_get_default_datawriter_qos</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.CreateTopic``1(System.String)">
            <summary>
            Creates a <see cref="T:Rti.Dds.Topics.Topic`1"/> with default Qos.
            </summary>
            <remarks>@dref_details_DomainParticipant_create_topic</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.CreateTopic``1(System.String,System.String)">
            <summary>
            Creates a <see cref="T:Rti.Dds.Topics.Topic`1"/> with a different registered type name
            and default Qos.
            </summary>
            <remarks>@dref_details_DomainParticipant_create_topic</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.CreateTopic``1(System.String,Rti.Dds.Topics.TopicQos)">
            <summary>
            Creates a <see cref="T:Rti.Dds.Topics.Topic`1"/> with the given Qos.
            </summary>
            <remarks>@dref_details_DomainParticipant_create_topic</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.CreateTopic``1(System.String,System.String,Rti.Dds.Topics.TopicQos)">
            <summary>
            Creates a <see cref="T:Rti.Dds.Topics.Topic`1"/> with a different registered type name
            and the given Qos.
            </summary>
            <remarks>@dref_details_DomainParticipant_create_topic</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.CreateTopic(System.String,System.Type)">
            <summary>
            Creates a <see cref="T:Rti.Dds.Topics.Topic`1"/> specifying its type reflectively
            </summary>
            <remarks>@dref_details_DomainParticipant_create_topic</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.CreateTopic(System.String,Rti.Types.Dynamic.DynamicType)">
            <summary>
            Creates a dynamically-typed Topic with default qos
            </summary>
            <remarks>@dref_details_DomainParticipant_create_topic</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.CreateTopic(System.String,Rti.Types.Dynamic.DynamicType,Rti.Dds.Topics.TopicQos)">
            <summary>
            Creates a dynamically-typed Topic with default qos
            </summary>
            <remarks>@dref_details_DomainParticipant_create_topic</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.RegisterType(System.String,Rti.Types.Dynamic.DynamicType)">
            <summary>
            Allows registering a dynamic type with a name different than
            <see cref="P:Rti.Types.Dynamic.DynamicType.Name"/>
            </summary>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.RegisterType(System.String,Rti.Types.Dynamic.DynamicType,Rti.Types.Dynamic.TypeSerializationProperty)">
            <summary>
            Allows registering a dynamic type with a name different than
            <see cref="P:Rti.Types.Dynamic.DynamicType.Name"/> and with additional serialization properties
            </summary>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.CreateContentFilteredTopic``1(System.String,Rti.Dds.Topics.Topic{``0},Rti.Dds.Subscription.Filter)">
            <summary>
            Creates a <see cref="T:Rti.Dds.Topics.ContentFilteredTopic`1"/> which can be used to do
            content-based subscriptions.
            </summary>
            <remarks>@dref_details_DomainParticipant_create_contentfilteredtopic</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.CreateContentFilteredTopic(System.String,Rti.Dds.Topics.IAnyTopic,Rti.Dds.Subscription.Filter)">
            <summary>
            Creates a <see cref="T:Rti.Dds.Topics.ContentFilteredTopic`1"/> reflectively using
            the type of the relatedTopic.
            </summary>
            <remarks>@dref_details_DomainParticipant_create_contentfilteredtopic</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.LookupTopicDescription(System.String)">
            <summary>
            Looks up an existing, locally created <see cref="T:Rti.Dds.Topics.TopicDescription"/>,
            based on its name.
            </summary>
            <returns>The topic description if it exists or null otherwise</returns>
            <remarks>@dref_details_DomainParticipant_lookup_topicdescription</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.LookupPublisher(System.String)">
            <summary>
            @extension Looks up a <see cref="T:Rti.Dds.Publication.Publisher"/> by its <see cref="P:Rti.Dds.Publication.PublisherQos.PublisherName"/>
            within this DomainParticipant.
            </summary>
            <returns>The publisher if it exists or null otherwise</returns>
            <remarks>@dref_details_DomainParticipant_lookup_publisher_by_name</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.LookupSubscriber(System.String)">
            <summary>
            @extension Looks up a <see cref="T:Rti.Dds.Subscription.Subscriber"/> by its <see cref="P:Rti.Dds.Subscription.SubscriberQos.SubscriberName"/>
            within this <see cref="T:Rti.Dds.Domain.DomainParticipant"/>.
            </summary>
            <returns>The subscriber if it exists or null otherwise</returns>
            <remarks>@dref_details_DomainParticipant_lookup_subscriber_by_name</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.LookupDataReader``1(System.String)">
            <summary>
            @extension Looks up a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> by its
            <see cref="P:Rti.Dds.Subscription.DataReaderQos.SubscriptionName"/> within this DomainParticipant.
            </summary>
            <returns>The DataReader if it exists or null otherwise</returns>
            <remarks>@dref_details_DomainParticipant_lookup_datareader_by_name</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.LookupDataReader(System.String)">
            <summary>
            @extension Looks up a <see cref="T:Rti.Dds.Subscription.AnyDataReader"/> by its <see cref="P:Rti.Dds.Subscription.DataReaderQos.SubscriptionName"/>
            within this DomainParticipant.
            </summary>
            <returns>The DataReader if it exists or null otherwise</returns>
            <remarks>@dref_details_DomainParticipant_lookup_datareader_by_name</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.LookupDataWriter``1(System.String)">
            <summary>
            @extension Looks up a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> by its <see cref="P:Rti.Dds.Publication.DataWriterQos.PublicationName"/>
            within this DomainParticipant.
            </summary>
            <returns>The DataWriter if it exists or null otherwise</returns>
            <remarks>@dref_details_DomainParticipant_lookup_datawriter_by_name</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.LookupDataWriter(System.String)">
            <summary>
            @extension Looks up a <see cref="T:Rti.Dds.Publication.AnyDataWriter"/> by its <see cref="P:Rti.Dds.Publication.DataWriterQos.PublicationName"/>
            within this DomainParticipant.
            </summary>
            <returns>The DataWriter if it exists or null otherwise</returns>
            <remarks>@dref_details_DomainParticipant_lookup_datawriter_by_name</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.IsTypeRegistered(System.String)">
            <summary>
            @extension Checks if the <see cref="T:Rti.Types.Dynamic.DynamicType"/> associated with
            the provided typeName is registered with this DomainParticipant.
            </summary>
            <returns>True if the <see cref="T:Rti.Types.Dynamic.DynamicType"/> is registered</returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.GetDynamicType(System.String)">
            <summary>
            @extension Returns the <see cref="T:Rti.Types.Dynamic.DynamicType"/> registered with
            the provided typeName.
            </summary>
            <returns>The corresponding <see cref="T:Rti.Types.Dynamic.DynamicType"/>, or null if no type with that typeName is registered.</returns>
            <remarks>@dref_details_DomainParticipant_get_typecode</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.ResumeEndpointDiscovery(Rti.Dds.Core.InstanceHandle)">
            <summary>
            @extension Initiates endpoint discovery with the <see cref="T:Rti.Dds.Domain.DomainParticipant"/>
            identified by the provided <see cref="T:Rti.Dds.Core.InstanceHandle"/>.
            </summary>
            <remarks>@dref_details_DomainParticipant_resume_endpoint_discovery</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipant.CurrentTime">
            <summary>
            Returns the current time using this DomainParticipant's clock
            </summary>
            <remarks>@dref_details_DomainParticipant_get_current_time</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipant.Topics">
            <summary>
            Retrieve all the Topics created from this DomainParticipant
            </summary>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipant.ContentFilteredTopics">
            <summary>
            Retrieve all the ContentFilteredTopics created from this DomainParticipant
            </summary>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipant.Subscribers">
            <summary>
            Retrieve all the <see cref="T:Rti.Dds.Subscription.Subscriber"/> created from this <see cref="T:Rti.Dds.Domain.DomainParticipant"/>
            </summary>
            <returns>An iterable list of all of the Subscribers created from the DomainParticipant</returns>
            <remarks>@dref_details_DomainParticipant_get_subscribers</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipant.Publishers">
            <summary>
            Retrieve all the <see cref="T:Rti.Dds.Publication.Publisher"/> created from this <see cref="T:Rti.Dds.Domain.DomainParticipant"/>
            </summary>
            <returns>An iterable list of all of the Publishers created from the DomainParticipant</returns>
            <remarks>@dref_details_DomainParticipant_get_publishers</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipant.DiscoveredParticipants">
            <summary>
            Retrieve all the <see cref="T:Rti.Dds.Domain.DomainParticipant"/> that have been discovered by this <see cref="T:Rti.Dds.Domain.DomainParticipant"/>
            </summary>
            <returns>An iterable list of all of the discovered DomainParticipants</returns>
            <remarks>@dref_details_DomainParticipant_get_discovered_participants</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipant.DiscoveredTopics">
            <summary>
            Retrieve all the topics that have been discovered by
            this <see cref="T:Rti.Dds.Domain.DomainParticipant"/>. The returned instance handles
            can be passed to <see cref="M:Rti.Dds.Domain.DomainParticipant.GetDiscoveredTopicData(Rti.Dds.Core.InstanceHandle@)"/>.
            </summary>
            <returns>The instance handles identifying the discovered topics.</returns>
            <remarks>@dref_details_DomainParticipant_get_discovered_topics</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.GetDiscoveredTopicData(Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Retrieves information on a <see cref="T:Rti.Dds.Topics.Topic`1"/> that has been discovered.
            </summary>
            <remarks>@dref_details_DomainParticipant_get_discovered_topic_data</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.GetDiscoveredTopicData">
            <summary>
            Retrieves the information on all <see cref="T:Rti.Dds.Topics.Topic`1"/>s that have been discovered.
            </summary>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.GetDiscoveredParticipantData(Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Retrieves information on a <see cref="T:Rti.Dds.Domain.DomainParticipant"/> that has been discovered.
            </summary>
            <remarks>@dref_details_DomainParticipant_get_discovered_participant_data</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.GetDiscoveredParticipantData">
            <summary>
            Retrieves the information on all <see cref="T:Rti.Dds.Domain.DomainParticipant"/>s that have been discovered.
            </summary>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipant.DomainParticipantProtocolStatus">
            <summary>
            Returns the <see cref="P:Rti.Dds.Domain.DomainParticipant.DomainParticipantProtocolStatus"/>.
            </summary>
            <returns>The <see cref="P:Rti.Dds.Domain.DomainParticipant.DomainParticipantProtocolStatus"/> of this <see cref="T:Rti.Dds.Domain.DomainParticipant"/>.</returns>
            <remarks>@dref_details_DomainParticipant_get_participant_protocol_status</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.CreatePublisher">
            <summary>
            Creates a <see cref="T:Rti.Dds.Publication.Publisher"/> using the default <see cref="T:Rti.Dds.Publication.PublisherQos"/>
            that will be attached and belong to this <see cref="T:Rti.Dds.Domain.DomainParticipant"/>.
            </summary>
            <returns>The created <see cref="T:Rti.Dds.Publication.Publisher"/>.</returns>
            <remarks>@dref_details_DomainParticipant_create_publisher</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.CreatePublisher(Rti.Dds.Publication.PublisherQos)">
            <summary>
            Creates a <see cref="T:Rti.Dds.Publication.Publisher"/> using the provided <see cref="T:Rti.Dds.Publication.PublisherQos"/>
            that will be attached and belong to this <see cref="T:Rti.Dds.Domain.DomainParticipant"/>.
            </summary>
            <returns>The created <see cref="T:Rti.Dds.Publication.Publisher"/>.</returns>
            <remarks>@dref_details_DomainParticipant_create_publisher</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.CreateSubscriber">
            <summary>
            Creates a <see cref="T:Rti.Dds.Subscription.Subscriber"/> using the default <see cref="T:Rti.Dds.Subscription.SubscriberQos"/>
            that will be attached and belong to this <see cref="T:Rti.Dds.Domain.DomainParticipant"/>.
            </summary>
            <returns>The created <see cref="T:Rti.Dds.Subscription.Subscriber"/>.</returns>
            <remarks>@dref_details_DomainParticipant_create_subscriber</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.CreateSubscriber(Rti.Dds.Subscription.SubscriberQos)">
            <summary>
            Creates a <see cref="T:Rti.Dds.Subscription.Subscriber"/> using the provided <see cref="T:Rti.Dds.Subscription.SubscriberQos"/>
            that will be attached and belong to this <see cref="T:Rti.Dds.Domain.DomainParticipant"/>.
            </summary>
            <returns>The created <see cref="T:Rti.Dds.Subscription.Subscriber"/></returns>.
            <remarks>@dref_details_DomainParticipant_create_subscriber</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.AssertLiveliness">
            <summary>
            Manually asserts liveliness on this <see cref="T:Rti.Dds.Domain.DomainParticipant"/>.
            </summary>
            <remarks>@dref_details_DomainParticipant_assert_liveliness</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.AddPeer(System.String)">
            <summary>
            Add the peer, described by the provided string, to the list of peers
            that this <see cref="T:Rti.Dds.Domain.DomainParticipant"/> will try to contact.
            </summary>
            <remarks>@dref_details_DomainParticipant_add_peer</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.RemovePeer(System.String)">
            <summary>
            Remove the peer, described by the provided string, from the list of peers
            that this <see cref="T:Rti.Dds.Domain.DomainParticipant"/> will try to contact.
            </summary>
            <remarks>@dref_details_DomainParticipant_remove_peer</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.IgnoreParticipant(Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Ignore the remote <see cref="T:Rti.Dds.Domain.DomainParticipant"/> corresponding to
            the provided <see cref="T:Rti.Dds.Core.InstanceHandle"/>.
            </summary>
            <remarks>@dref_details_DomainParticipant_ignore_participant</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.IgnorePublication(Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Ignore the remote publication corresponding to
            the provided <see cref="T:Rti.Dds.Core.InstanceHandle"/>.
            </summary>
            <remarks>@dref_details_DomainParticipant_ignore_publication</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.IgnoreSubscription(Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Ignore the remote subscription corresponding to
            the provided <see cref="T:Rti.Dds.Core.InstanceHandle"/>.
            </summary>
            <remarks>@dref_details_DomainParticipant_ignore_subscription</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.IgnoreTopic(Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Ignore the remote <see cref="T:Rti.Dds.Topics.Topic`1"/> corresponding to
            the provided <see cref="T:Rti.Dds.Core.InstanceHandle"/>.
            </summary>
            <remarks>@dref_details_DomainParticipant_ignore_topic</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.ContainsEntity(Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Check if the <see cref="T:Rti.Dds.Core.Entity"/> described by the provided
            <see cref="T:Rti.Dds.Core.InstanceHandle"/> belongs to this
            <see cref="T:Rti.Dds.Domain.DomainParticipant"/>.
            </summary>
            <returns>True if the Entity was created by this DomainParticipant.</returns>
            <remarks>@dref_details_DomainParticipant_contains_entity</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.DisposeContainedEntities">
            <summary>
            Dispose all of the entities created by this <see cref="T:Rti.Dds.Domain.DomainParticipant"/>.
            </summary>
            <remarks>@dref_details_DomainParticipant_delete_contained_entities</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.ResetEvents(Rti.Dds.Core.Status.StatusMask)">
            <summary>
            Stop notifying of events not selected in the newMask and remove
            their event handlers.
            </summary>
            <param name="newMask">
            Selects which events will continue to receive notifications.
            Events not included in the status mask will no longer be notified.
            Use StatusMask.None to remove all event handlers.
            </param>
            <remarks>
            @warning This method has no effect on a DomainParticipant.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipant.ToString">
            <summary>
            Provides a short string representation of the DomainParticipant,
            including its domain ID and ParticipantName (if set).
            </summary>
        </member>
        <member name="T:Rti.Dds.Domain.DomainParticipantConfigParams">
            <summary>
            Allows configuring <see cref="M:Rti.Dds.Core.QosProvider.CreateParticipantFromConfig(System.String,Rti.Dds.Domain.DomainParticipantConfigParams)"/>.
            </summary>
            <remarks>@dref_details_DomainParticipantConfigParams</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantConfigParams.DomainId">
            <summary>
            Domain ID from which the <see cref="T:Rti.Dds.Domain.DomainParticipant"/> is created.
            </summary>
            <remarks>@dref_details_DomainParticipantConfigParams_domain_id</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantConfigParams.ParticipantName">
            <summary>
            Name assigned to the <see cref="T:Rti.Dds.Domain.DomainParticipant"/>
            </summary>
            <remarks>@dref_details_DomainParticipantConfigParams_participant_name</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantConfigParams.ParticipantQosLibraryName">
            <summary>
            QoS library name containing the QoS profile from which the <see cref="T:Rti.Dds.Domain.DomainParticipant"/> is created.
            </summary>
            <remarks>@dref_details_DomainParticipantConfigParams_participant_qos_library_name</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantConfigParams.ParticipantQosProfileName">
            <summary>
            QoS profile name from which the <see cref="T:Rti.Dds.Domain.DomainParticipant"/> is created.
            </summary>
            <remarks>@dref_details_DomainParticipantConfigParams_participant_qos_profile_name</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantConfigParams.DomainEntityQosLibraryName">
            <summary>
            QoS library name containing the QoS profile from which the all the entities defined under the participant configuration are created.
            </summary>
            <remarks>@dref_details_DomainParticipantConfigParams_domain_entity_qos_library_name</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantConfigParams.DomainEntityQosProfileName">
            <summary>
            QoS profile name from which the all the entities defined under the participant configuration are created.
            </summary>
            <remarks>@dref_details_DomainParticipantConfigParams_domain_entity_qos_profile_name</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantConfigParams.#ctor">
            <summary>
            Creates a new instance with the default configuration.
            </summary>
            <remarks>@dref_details_DomainParticipantConfigParams_INITIALIZER</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantConfigParams.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantConfigParams.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantConfigParams.Equals(Rti.Dds.Domain.DomainParticipantConfigParams)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Dds.Domain.DomainParticipantFactory">
            <summary>
            Singleton that manages the creation of <see cref="T:Rti.Dds.Domain.DomainParticipant"/> objects.
            </summary>
            <remarks>@dref_details_DomainParticipantFactory</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantFactory.Instance">
            <summary>
            Gets the singleton instance of this class.
            </summary>
            <remarks>@dref_details_DomainParticipantFactory_get_instance</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantFactory.Qos">
            <summary>
            Get or set the QoS.
            </summary>
            <remarks>@dref_details_DomainParticipantFactory_get_qos</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantFactory.DefaultParticipantQos">
            <summary>
            Gets or sets the default <see cref="T:Rti.Dds.Domain.DomainParticipantQos"/>
            </summary>
            <remarks>@dref_details_DomainParticipantFactory_set_default_participant_qos</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantFactory.Participants">
            <summary>
            Returns all the participants the DomainParticipantFactory has.
            </summary>
            <remarks>@dref_details_DomainParticipantFactory_get_participants</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantFactory.Disposed">
            <summary>
            Indicates whether this object has been disposed
            </summary>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantFactory.Dispose">
            <summary>
            Releases global resources used by the middleware.
            </summary>
            <remarks>
            <para>
            In most cases calling this function is not necessary. However,
            some memory-check tools may flag this native heap memory as unreclaimed.
            So this method provides a way to clean up that memory at the end of
            the application.
            </para>
            <para>@pre All participants created from the factory have been deleted.</para>
            <para>
            @post All resources belonging to the factory have been reclaimed.
            A new call to <see cref="P:Rti.Dds.Domain.DomainParticipantFactory.Instance"/> will return a new lifecycle of
            the singleton.
            </para>
            </remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantFactory.CreateParticipant(System.Int32)">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Domain.DomainParticipant"/> with default QoS.
            </summary>
            <param name="domainId">The domain id to join</param>
            <remarks>@dref_details_DomainParticipantFactory_create_participant</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantFactory.CreateParticipant(System.Int32,Rti.Dds.Domain.DomainParticipantQos)">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Domain.DomainParticipant"/> with the given QoS.
            </summary>
            <param name="domainId">The domain id to join</param>
            <param name="qos">The QoS to configure the DomainParticipant</param>
            <remarks>@dref_details_DomainParticipantFactory_create_participant</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantFactory.CreateParticipant(System.Int32,Rti.Dds.Domain.DomainParticipantQos,System.Action{Rti.Dds.Domain.DomainParticipant})">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Domain.DomainParticipant"/> with the given QoS.
            </summary>
            <param name="domainId">The domain id to join</param>
            <param name="qos">The QoS to configure the DomainParticipant</param>
            <param name="preEnableAction">
            An action that allows performing operations on the DomainParticipant right
            before it is enabled. For example, if the application needs to
            receive information about all discovered entities, looking up the
            readers for the built-in topics in <see cref="P:Rti.Dds.Domain.DomainParticipant.BuiltinSubscriber"/>
            should be done before the DomainParticipant is enabled.
            </param>
            <remarks>@dref_details_DomainParticipantFactory_create_participant</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantFactory.LookupParticipant(System.Int32)">
            <summary>
            Looks up a <see cref="T:Rti.Dds.Domain.DomainParticipant"/> by domain ID
            </summary>
            <remarks>@dref_details_DomainParticipantFactory_lookup_participant</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantFactory.LookupParticipant(System.String)">
            <summary>
            Looks up a <see cref="T:Rti.Dds.Domain.DomainParticipant"/> by its <see cref="P:Rti.Dds.Domain.DomainParticipantQos.ParticipantName"/>
            </summary>
            <remarks>@dref_details_DomainParticipantFactory_lookup_participant_by_name</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantFactory.RegisterTypeSupport``1">
            <summary>
            Provides the name that an XML application can use to refer to a C# type
            </summary>
            <typeparam name="T">The type to register. The type is registered with the name typeof(T).Name</typeparam>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantFactory.RegisterTypeSupport``1(System.String)">
            <summary>
            Provides the name that an XML application can use to refer to a C# type
            </summary>
            <param name="name">The name to register this type with. It must be the same name used in the XML tag register_type</param>
            <typeparam name="T">The type to register</typeparam>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantFactory.RegisterNamespace(System.Reflection.Assembly,System.String)">
            <summary>
            Specifies a namespace where <see cref="M:Rti.Dds.Core.QosProvider.CreateParticipantFromConfig(System.String)"/>
            can look for the definition of C# types referenced from XML-defined
            applications.
            </summary>
            <param name="assembly">The assembly where the namespace is located</param>
            <param name="namespace">
            The namespace within the assembly where the QosProvider can look
            for types. Nested namespaces are also included.
            </param>
        </member>
        <member name="T:Rti.Dds.Domain.DomainParticipantFactoryQos">
            <summary>
            QoS policies supported by the <see cref="T:Rti.Dds.Domain.DomainParticipantFactory"/>.
            </summary>
            <remarks>@dref_details_DomainParticipantFactoryQos </remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantFactoryQos.EntityFactory">
            <summary>
            Gets the value of EntityFactory
            </summary>
            <remarks>@dref_details_DomainParticipantFactoryQos_entity_factory</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantFactoryQos.ResourceLimits">
            <summary>
            Gets the value of ResourceLimits
            </summary>
            <remarks>@dref_details_DomainParticipantFactoryQos_resource_limits</remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantFactoryQos.CreateDefault">
            <summary>
            Gets the value of Logging
            </summary>
            <remarks>@dref_details_DomainParticipantFactoryQos_logging</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantFactoryQos.Default">
            <summary>Singleton containing the default value of a DomainParticipantFactoryQos</summary>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantFactoryQos.WithEntityFactory(Rti.Dds.Core.Policy.EntityFactory)">
            <summary>
            Creates a copy of this DomainParticipantFactoryQos instance with a new value for EntityFactory
            </summary>
            <param name="value">The new value for EntityFactory</param>
            <returns>A copy with a new value for EntityFactory</returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantFactoryQos.WithResourceLimits(Rti.Dds.Core.Policy.SystemResourceLimits)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantFactoryQos.ResourceLimits"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantFactoryQos.WithResourceLimits(System.Action{Rti.Dds.Core.Policy.SystemResourceLimitsBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantFactoryQos.ResourceLimits"/> policy as
            configured by a build action.
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantFactoryQos.Equals(System.Object)">
            <summary>
            Compares all the policies for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantFactoryQos.GetHashCode">
            <summary>
            Returns the hash code by combining that of each policy
            </summary>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantFactoryQos.Equals(Rti.Dds.Domain.DomainParticipantFactoryQos)">
            <summary>
            Compares all the policies for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantFactoryQos.ToString">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <remarks>
            The output is formatted using the default values for the
            <see cref="T:Rti.Dds.Core.QosPrintFormat"/> and only QoS policies which differ
            from the documented default are included.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantFactoryQos.ToString(Rti.Dds.Core.QosPrintFormat)">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <param name="format">The baseQos profile.</param>
            <remarks>
            This overload accepts a value for the baseQos. Only the differences
            between the <see cref="T:Rti.Dds.Domain.DomainParticipantFactoryQos"/> object being printed and
            the baseQos are included in the output.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantFactoryQos.ToString(Rti.Dds.Domain.DomainParticipantFactoryQos,Rti.Dds.Core.QosPrintFormat)">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <param name="baseQos">The baseQos profile.</param>
            <param name="format">the format used to configure the output. If not
            supplied the output is formatted using the default format.</param>
            <remarks>
            This overload accepts a value for the baseQos. Only the differences
            between the <see cref="T:Rti.Dds.Domain.DomainParticipantFactoryQos"/> object being printed and
            the baseQos are included in the output.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantFactoryQos.ToString(Rti.Dds.Core.QosPrintAll,Rti.Dds.Core.QosPrintFormat)">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <param name="baseQos">Used to indicate that the entire QoS object
            should be included in the output. The only value which should
            be provided for this argument is QosPrintAll.Value</param>
            <param name="format">The format used to configure the output. If not
            supplied, the output is formatted using the default format.</param>
            <remarks>
            This overload accepts a parameter of type <see cref="T:Rti.Dds.Core.QosPrintAll"/>.
            Unlike the other ToString overloads, the entire QoS object will be
            included in the output.
            </remarks>
        </member>
        <member name="T:Rti.Dds.Domain.DomainParticipantQos">
            <summary>
            QoS policies supported by a <see cref="T:Rti.Dds.Domain.DomainParticipant"/>.
            </summary>
            <remarks>@dref_details_DomainParticipantQos</remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantQos.Default">
            <summary>
            Singleton containing the documented default value of a DomainParticipantQos
            </summary>
            <remarks>
            This is a static value containing the documented default values for each policy.
            In most cases, you should use <see cref="P:Rti.Dds.Domain.DomainParticipantFactory.DefaultParticipantQos"/>,
            to get the runtime default value that takes into consideration the
            current configuration.
            </remarks>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantQos.UserData">
            <summary>
            Gets the <see cref="P:Rti.Dds.Domain.DomainParticipantQos.UserData"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantQos.EntityFactory">
            <summary>
            Gets the <see cref="P:Rti.Dds.Domain.DomainParticipantQos.EntityFactory"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantQos.WireProtocol">
            <summary>
            Gets the <see cref="P:Rti.Dds.Domain.DomainParticipantQos.WireProtocol"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantQos.TransportBuiltin">
            <summary>
            Gets the <see cref="P:Rti.Dds.Domain.DomainParticipantQos.TransportBuiltin"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantQos.TransportUnicast">
            <summary>
            Gets the <see cref="P:Rti.Dds.Domain.DomainParticipantQos.TransportUnicast"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantQos.Discovery">
            <summary>
            Gets the <see cref="P:Rti.Dds.Domain.DomainParticipantQos.Discovery"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantQos.ResourceLimits">
            <summary>
            Gets the <see cref="T:Rti.Dds.Core.Policy.DomainParticipantResourceLimits"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantQos.Event">
            <summary>
            Gets the <see cref="P:Rti.Dds.Domain.DomainParticipantQos.Event"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantQos.ReceiverPool">
            <summary>
            Gets the <see cref="P:Rti.Dds.Domain.DomainParticipantQos.ReceiverPool"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantQos.Database">
            <summary>
            Gets the <see cref="P:Rti.Dds.Domain.DomainParticipantQos.Database"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantQos.DiscoveryConfig">
            <summary>
            Gets the <see cref="P:Rti.Dds.Domain.DomainParticipantQos.DiscoveryConfig"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantQos.ExclusiveArea">
            <summary>
            Gets the <see cref="P:Rti.Dds.Domain.DomainParticipantQos.ExclusiveArea"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantQos.Property">
            <summary>
            Gets the <see cref="P:Rti.Dds.Domain.DomainParticipantQos.Property"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantQos.ParticipantName">
            <summary>
            Gets the <see cref="P:Rti.Dds.Domain.DomainParticipantQos.ParticipantName"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Domain.DomainParticipantQos.Service">
            <summary>
            Gets the <see cref="P:Rti.Dds.Domain.DomainParticipantQos.Service"/> policy.
            </summary>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithEntityFactory(Rti.Dds.Core.Policy.EntityFactory)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.EntityFactory"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithUserData(Rti.Dds.Core.Policy.UserData)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.UserData"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithWireProtocol(Rti.Dds.Core.Policy.WireProtocol)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.WireProtocol"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithWireProtocol(System.Action{Rti.Dds.Core.Policy.WireProtocolBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.WireProtocol"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithTransportBuiltin(Rti.Dds.Core.Policy.TransportBuiltin)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.TransportBuiltin"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithTransportBuiltin(System.Action{Rti.Dds.Core.Policy.TransportBuiltinBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.TransportBuiltin"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithTransportUnicast(Rti.Dds.Core.Policy.TransportUnicast)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.TransportUnicast"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithTransportUnicast(System.Action{System.Collections.Immutable.ImmutableList{Rti.Dds.Core.Policy.TransportUnicastSettings}.Builder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.TransportUnicast"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithDiscovery(Rti.Dds.Core.Policy.Discovery)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.Discovery"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithDiscovery(System.Action{Rti.Dds.Core.Policy.DiscoveryBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.Discovery"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithDatabase(Rti.Dds.Core.Policy.Database)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.Database"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithDatabase(System.Action{Rti.Dds.Core.Policy.DatabaseBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.Database"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithDiscoveryConfig(Rti.Dds.Core.Policy.DiscoveryConfig)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.DiscoveryConfig"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithDiscoveryConfig(System.Action{Rti.Dds.Core.Policy.DiscoveryConfigBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.DiscoveryConfig"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithResourceLimits(Rti.Dds.Core.Policy.DomainParticipantResourceLimits)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.ResourceLimits"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithResourceLimits(System.Action{Rti.Dds.Core.Policy.DomainParticipantResourceLimitsBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.ResourceLimits"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithEvent(Rti.Dds.Core.Policy.Event)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.Event"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithEvent(System.Action{Rti.Dds.Core.Policy.EventBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.Event"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithReceiverPool(Rti.Dds.Core.Policy.ReceiverPool)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.ReceiverPool"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithReceiverPool(System.Action{Rti.Dds.Core.Policy.ReceiverPoolBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.ReceiverPool"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithParticipantName(Rti.Dds.Core.Policy.EntityName)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.ParticipantName"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithParticipantName(System.Action{Rti.Dds.Core.Policy.EntityNameBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.ParticipantName"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithProperty(Rti.Dds.Core.Policy.Property)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.Property"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithProperty(System.Action{System.Collections.Immutable.ImmutableDictionary{System.String,Rti.Dds.Core.Policy.Property.Entry}.Builder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.Property"/> policy as
            configured by a build action
            </summary>
            <param name="build">
            A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithExclusiveArea(Rti.Dds.Core.Policy.ExclusiveArea)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.ExclusiveArea"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithExclusiveArea(System.Action{Rti.Dds.Core.Policy.ExclusiveAreaBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.ExclusiveArea"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithService(Rti.Dds.Core.Policy.Service)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.Service"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.WithService(System.Action{Rti.Dds.Core.Policy.ServiceBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Domain.DomainParticipantQos.Service"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.Equals(Rti.Dds.Domain.DomainParticipantQos)">
            <summary>
            Compares all the policies for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.GetHashCode">
            <summary>
            Returns the hash code by combining that of each policy
            </summary>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.ToString">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <remarks>
            The output is formatted using the default values for the
            <see cref="T:Rti.Dds.Core.QosPrintFormat"/> and only QoS policies which differ
            from the documented default are included.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.ToString(Rti.Dds.Core.QosPrintFormat)">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <param name="format">The baseQos profile.</param>
            <remarks>
            This overload accepts a value for the baseQos. Only the differences
            between the <see cref="T:Rti.Dds.Domain.DomainParticipantQos"/> object being printed and
            the baseQos are included in the output.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.ToString(Rti.Dds.Domain.DomainParticipantQos,Rti.Dds.Core.QosPrintFormat)">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <param name="baseQos">The baseQos profile.</param>
            <param name="format">the format used to configure the output. If not
            supplied the output is formatted using the default format.</param>
            <remarks>
            This overload accepts a value for the baseQos. Only the differences
            between the <see cref="T:Rti.Dds.Domain.DomainParticipantQos"/> object being printed and
            the baseQos are included in the output.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Domain.DomainParticipantQos.ToString(Rti.Dds.Core.QosPrintAll,Rti.Dds.Core.QosPrintFormat)">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <param name="baseQos">Used to indicate that the entire QoS object
            should be included in the output. The only value which should
            be provided for this argument is QosPrintAll.Value</param>
            <param name="format">The format used to configure the output. If not
            supplied, the output is formatted using the default format.</param>
            <remarks>
            This overload accepts a parameter of type <see cref="T:Rti.Dds.Core.QosPrintAll"/>.
            Unlike the other ToString overloads, the entire QoS object will be
            included in the output.
            </remarks>
        </member>
        <member name="T:Rti.Dds.Topics.AnyContentFilteredTopic">
            <summary>
            The abstract base of a typed <see cref="T:Rti.Dds.Topics.ContentFilteredTopic`1"/>.
            Provides type-independent methods and properties.
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.AnyContentFilteredTopic.Name">
            <summary>
            Name used to create the content-filtered topic
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.AnyContentFilteredTopic.TypeName">
            <summary>
            Name of the data type associated with this content-filtered topic
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.AnyContentFilteredTopic.DomainParticipant">
            <summary>
            The DomainParticipant that contains this content-filtered topic
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.AnyContentFilteredTopic.FilterExpression">
            <summary>
            The filter expression
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.AnyContentFilteredTopic.FilterParameters">
            <summary>
            The filter parameters when the expression is parameterized.
            </summary>
            <remarks>
            The parameters can be modified to change what data readers associated
            to this topic will receive.
            </remarks>
        </member>
        <member name="P:Rti.Dds.Topics.AnyContentFilteredTopic.Filter">
            <summary>
            The Filter object contains both the expression and the parameters,
            as well as the filter class name, if applicable.
            </summary>
            <remarks>
            The filter can be modified to change what data readers associated
            to this topic will receive.
            </remarks>
        </member>
        <member name="P:Rti.Dds.Topics.AnyContentFilteredTopic.Disposed">
            <summary>
            Whether the <see cref="M:Rti.Dds.Topics.AnyContentFilteredTopic.Dispose"/> method has been called.
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.AnyContentFilteredTopic.AppendToExpressionParameter(System.Int32,System.String)">
            <summary>
            @extension Appends a string term to the specified parameter string.
            </summary>
            <remarks>@dref_details_ContentFilteredTopic_append_to_expression_parameter</remarks>
        </member>
        <member name="M:Rti.Dds.Topics.AnyContentFilteredTopic.RemoveFromExpressionParameter(System.Int32,System.String)">
            <summary>
            @extension Removes a string term from the specified parameter string.
            </summary>
            <remarks>@dref_details_ContentFilteredTopic_remove_from_expression_parameter</remarks>
        </member>
        <member name="M:Rti.Dds.Topics.AnyContentFilteredTopic.Dispose">
            <summary>
            Destroys this object and the resources it uses.
            </summary>
        </member>
        <member name="T:Rti.Dds.Topics.BuiltinTopicKey">
            <summary>
            The key type of the built-in topic types.
            </summary>
            <remarks>@dref_details_BuiltinTopicKey_t</remarks>
        </member>
        <member name="M:Rti.Dds.Topics.BuiltinTopicKey.FromGuid(Rti.Dds.Core.Guid@)">
            <summary>
            Creates a BuiltinTopicKey object from a GUID.
            </summary>
            <remarks>
            This method can be used to retrieve a <see cref="T:Rti.Dds.Topics.BuiltinTopicKey"/>
            object from an <see cref="T:Rti.Dds.Core.InstanceHandle"/>
            using <see cref="M:Rti.Dds.Core.Guid.FromInstanceHandle(Rti.Dds.Core.InstanceHandle@)"/>.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Topics.BuiltinTopicKey.Equals(Rti.Dds.Topics.BuiltinTopicKey)">
            <summary>
            Compares this instance handle with another handle for equality.
            </summary>
            <remarks>@dref_details_BuiltinTopicKey_t_equals</remarks>
        </member>
        <member name="M:Rti.Dds.Topics.BuiltinTopicKey.Equals(System.Object)">
            <summary>
            Compares this instance handle with another handle for equality.
            </summary>
            <remarks>@dref_details_BuiltinTopicKey_t_equals</remarks>
        </member>
        <member name="M:Rti.Dds.Topics.BuiltinTopicKey.GetHashCode">
            <summary>
            Generates a hash code from this BuiltinTopicKey.
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.BuiltinTopicKey.ToString">
            <summary>
            Returns a string representation of this BuiltinTopicKey
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.BuiltinTopicKey.ToArray">
            <summary>
            Converts this key to a byte array.
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.BuiltinTopicKey.FromArray(System.Byte[])">
            <summary>
            Creates an instance from the bytes in a 16-byte array
            </summary>
        </member>
        <member name="T:Rti.Dds.Topics.ContentFilteredTopic`1">
            <summary>
            Specialization of <see cref="T:Rti.Dds.Topics.ITopicDescription"/> that allows
            for content-based subscriptions.
            </summary>
            <typeparam name="T">The topic-type</typeparam>
            <remarks>@dref_details_ContentFilteredTopic</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.ContentFilteredTopic`1.RelatedTopic">
            <summary>
            Gets the topic associated with this content-filtered topic.
            </summary>
            <remarks>@dref_details_ContentFilteredTopic_get_related_topic</remarks>
        </member>
        <member name="M:Rti.Dds.Topics.ContentFilteredTopic`1.ToString">
            <summary>
            Provides basic information about this content-filtered topic
            </summary>
        </member>
        <member name="T:Rti.Dds.Topics.IAnyTopic">
            <summary>
            The base of a typed <see cref="T:Rti.Dds.Topics.Topic`1"/>. Provides type-independent
            methods and properties.
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.IAnyTopic.InconsistentTopicStatus">
            <summary>
            Retrieve the <see cref="F:Rti.Dds.Core.Status.StatusMask.InconsistentTopic" />
            status.
            </summary>
            <remarks>@dref_details_Topic_get_inconsistent_topic_status</remarks>
        </member>
        <member name="E:Rti.Dds.Topics.IAnyTopic.InconsistentTopic">
            <summary>
            Event triggered when the <see cref="F:Rti.Dds.Core.Status.StatusMask.InconsistentTopic" />
            status changes.
            </summary>
        </member>
        <member name="T:Rti.Dds.Topics.InconsistentTopicEventHandler">
            <summary>
            Delegate type of the handler for the
            <see cref="F:Rti.Dds.Core.Status.StatusMask.InconsistentTopic"/> status.
            </summary>
            <remarks>@dref_details_DataWriterListener_on_publication_matched</remarks>
        </member>
        <member name="T:Rti.Dds.Topics.ISerializer`1">
            <summary>
            Allows serializing and deserializing IDL types as byte buffers
            </summary>
            <typeparam name="T">A type generated from IDL</typeparam>
            <remarks>
            <para>
            To create an ISerializer, use <see cref="M:Rti.Dds.Topics.TypeSupport`1.CreateSerializer(System.Int16)"/>.
            </para>
            <para>
            @warning The ISerializer methods are not thread-safe. To use them in multiple
            threads, either protect them or create a different ISerializer per thread
            </para>
            <para>
            This type is IDisposable, but it automatically calls Dispose() in its
            destructor.
            </para>
            <para>
            This interface has **extension methods**, see \ref SerializerExtensions.
            </para>
            <para>
            @see \ref DDSIdlTypesExampleModule
            </para>
            </remarks>
        </member>
        <member name="M:Rti.Dds.Topics.ISerializer`1.Serialize(`0)">
            <summary>
            Serializes a data sample into a byte array
            </summary>
            <param name="sample">A data sample</param>
            <returns>A new byte array containing the serialized data</returns>
        </member>
        <member name="M:Rti.Dds.Topics.ISerializer`1.Serialize(`0,System.Byte*,System.Int32)">
            <summary>
            Serializes a data sample into a byte array
            </summary>
            <param name="sample">A data sample</param>
            <param name="buffer">A byte buffer with enough space to contain the serialized data</param>
            <param name="length">
            The available length of the byte buffer. This operation throws
            DdsException if the data doesn't fit. You can obtain the exact size
            required for this sample with <see cref="M:Rti.Dds.Topics.ISerializer`1.GetSerializedSampleSize(`0)"/>
            or a size that is guaranteed to suffice for any sample of this type
            with <see cref="M:Rti.Dds.Topics.ISerializer`1.GetSerializedSampleMaxSize"/>.
            </param>
            <returns>The actual number of bytes that were serialized</returns>
        </member>
        <member name="M:Rti.Dds.Topics.ISerializer`1.Deserialize(System.Byte[])">
            <summary>
            Deserializes a data sample from a byte array
            </summary>
            <param name="buffer">A byte array containing the serialized data</param>
            <returns>A new data sample created by deserializing the buffer</returns>
        </member>
        <member name="M:Rti.Dds.Topics.ISerializer`1.Deserialize(System.Byte*,System.Int32)">
            <summary>
            Deserializes a data sample from a byte buffer
            </summary>
            <param name="buffer">A byte buffer containing the serialized data</param>
            <param name="length">The length of the byte buffer</param>
            <returns>A new data sample created by deserializing the buffer</returns>
        </member>
        <member name="M:Rti.Dds.Topics.ISerializer`1.GetSerializedSampleMaxSize">
            <summary>
            Calculates the maximum number of bytes that any data sample of type
            `T` may take in serialized form.
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.ISerializer`1.GetSerializedSampleMinSize">
            <summary>
            Calculates the minimum number of bytes that any data sample of type
            `T` may take in serialized form.
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.ISerializer`1.GetSerializedSampleSize(`0)">
            <summary>
            Calculates the exact number of bytes that a given data sample takes in
            serialized form.
            </summary>
            <param name="sample">The data sample</param>
            <returns>The number of bytes that the sample needs to be serialized</returns>
        </member>
        <member name="M:Rti.Dds.Topics.ISerializer`1.ToDynamicData(`0)">
            <summary>
            Converts a T sample into a DynamicData sample.
            </summary>
            <param name="sample">The sample to convert</param>
            <returns>A copy of sample as a DynamicData object</returns>
        </member>
        <member name="M:Rti.Dds.Topics.ISerializer`1.FromDynamicData(Rti.Types.Dynamic.DynamicData)">
            <summary>
            Converts a DynamicData sample into a T sample.
            </summary>
            <param name="sample">The sample to convert</param>
            <returns>A copy of sample as an instance of type T</returns>
            <remarks>
            This method requires that sample.Type and TSupport.Instance.DynamicType
            be equal.
            </remarks>
        </member>
        <member name="T:Rti.Dds.Topics.ITopicDescription">
            <summary>
            Common interface for <see cref="T:Rti.Dds.Topics.Topic`1"/> and
            <see cref="T:Rti.Dds.Topics.ContentFilteredTopic`1"/>
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.ITopicDescription.DomainParticipant">
            <summary>
            The DomainParticipant that created this topic
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.ITopicDescription.Name">
            <summary>
            The name given to this topic
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.ITopicDescription.TypeName">
            <summary>
            The name of the type associated with this topic.
            </summary>
        </member>
        <member name="T:Rti.Dds.Topics.ITypePlugin">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="T:Rti.Dds.Topics.ParticipantBuiltinTopicData">
            <summary>
            Entry created when a <see cref="T:Rti.Dds.Domain.DomainParticipant"/> is discovered.
            </summary>
            <remarks>@dref_details_ParticipantBuiltinTopicData</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.ParticipantBuiltinTopicData.Key">
            <summary>
            DCPS key to distinguish entries.
            </summary>
            <remarks>@dref_details_ParticipantBuiltinTopicData_key</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.ParticipantBuiltinTopicData.UserData">
            <summary>
            Policy of the corresponding DomainParticipant.
            </summary>
            <remarks>@dref_details_ParticipantBuiltinTopicData_user_data</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.ParticipantBuiltinTopicData.Property">
            <summary>
            @extension Name value pair properties to be stored with domain participant
            </summary>
            <remarks>@dref_details_ParticipantBuiltinTopicData_property</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.ParticipantBuiltinTopicData.RtpsProtocolVersion">
            <summary>
            @extension Version number of the RTPS wire protocol used.
            </summary>
            <remarks>@dref_details_ParticipantBuiltinTopicData_rtps_protocol_version</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.ParticipantBuiltinTopicData.RtpsVendorId">
            <summary>
            @extension ID of vendor implementing the RTPS wire protocol.
            </summary>
            <remarks>@dref_details_ParticipantBuiltinTopicData_rtps_vendor_id</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.ParticipantBuiltinTopicData.DdsBuiltinEndpoints">
            <summary>
            @extension Bitmap of builtin endpoints supported by the participant.
            </summary>
            <remarks>@dref_details_ParticipantBuiltinTopicData_dds_builtin_endpoints</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.ParticipantBuiltinTopicData.DefaultUnicastLocators">
            <summary>
            @extension Unicast locators used when individual entities do not specify unicast locators.
            </summary>
            <remarks>@dref_details_ParticipantBuiltinTopicData_default_unicast_locators</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.ParticipantBuiltinTopicData.ProductVersion">
            <summary>
            @extension This is a vendor specific parameter. It gives the current version for rti-dds.
            </summary>
            <remarks>@dref_details_ParticipantBuiltinTopicData_product_version</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.ParticipantBuiltinTopicData.ParticipantName">
            <summary>
            @extension The participant name and role name.
            </summary>
            <remarks>@dref_details_ParticipantBuiltinTopicData_participant_name</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.ParticipantBuiltinTopicData.DomainId">
            <summary>
            @extension Domain ID associated with the discovered participant.
            </summary>
            <remarks>@dref_details_ParticipantBuiltinTopicData_domain_id</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.ParticipantBuiltinTopicData.TransportInfos">
            <summary>
            @extension A sequence of <see cref="T:Rti.Dds.Core.TransportInfo"/> containing information about each of the installed transports of the discovered participant.
            </summary>
            <remarks>@dref_details_ParticipantBuiltinTopicData_transport_info</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.ParticipantBuiltinTopicData.ReachabilityLeaseDuration">
            <summary>
            @extension Locator reachability lease duration.
            </summary>
            <remarks>@dref_details_ParticipantBuiltinTopicData_reachability_lease_duration</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.ParticipantBuiltinTopicData.Default">
            <summary>Singleton containing the default value of a ParticipantBuiltinTopicData</summary>
        </member>
        <member name="M:Rti.Dds.Topics.ParticipantBuiltinTopicData.#ctor(Rti.Dds.Topics.BuiltinTopicKey@)">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Topics.ParticipantBuiltinTopicData"/> using a
            <see cref="T:Rti.Dds.Topics.BuiltinTopicKey"/>.
            </summary>
            <remarks>
            The rest of elements are not initialized.
            This constructor can be used to create a key holder for
            <see cref="M:Rti.Dds.Subscription.DataReader`1.LookupInstance(`0)"/>.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Topics.ParticipantBuiltinTopicData.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.ParticipantBuiltinTopicData.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.ParticipantBuiltinTopicData.Equals(Rti.Dds.Topics.ParticipantBuiltinTopicData)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.ParticipantBuiltinTopicData.ToString">
            <summary>
            Returns a readable summary of the data
            </summary>
        </member>
        <member name="T:Rti.Dds.Topics.PrintFormatProperty">
            <summary>
            A collection of attributes used to configure how data samples
            will be formatted when converted to a string.
            </summary>
            <remarks>
            @see <see cref="M:Rti.Types.Dynamic.DynamicData.ToString(Rti.Dds.Topics.PrintFormatProperty)"/>.
            @see <see cref="M:Rti.Dds.Topics.TypeSupport`1.ToString(`0,Rti.Dds.Topics.PrintFormatProperty)"/>
            </remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PrintFormatProperty.Kind">
            <summary>
            The kind of format to be used when converting a data sample to a string.
            </summary>
            <remarks>@dref_details_PrintFormatProperty_kind</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PrintFormatProperty.PrettyPrint">
            <summary>
            Choose whether to print a data sample in a more readable format or to eliminate all white space.
            </summary>
            <remarks>@dref_details_PrintFormatProperty_pretty_print</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PrintFormatProperty.EnumAsInt">
            <summary>
            Choose whether to print enum values as integers or as strings.
            </summary>
            <remarks>@dref_details_PrintFormatProperty_enum_as_int</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PrintFormatProperty.IncludeRootElements">
            <summary>
            Choose whether or not to include the root elements of the print format in the output string.
            </summary>
            <remarks>@dref_details_PrintFormatProperty_include_root_elements</remarks>
        </member>
        <member name="M:Rti.Dds.Topics.PrintFormatProperty.Equals(System.Object)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.PrintFormatProperty.GetHashCode">
            <summary>
            Calculates a hash code.
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.PrintFormatProperty.Equals(Rti.Dds.Topics.PrintFormatProperty)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="T:Rti.Dds.Topics.PrintFormatKind">
            <summary>
            Formats available when converting data samples to string representations.
            </summary>
        </member>
        <member name="F:Rti.Dds.Topics.PrintFormatKind.Default">
            <summary>
            Print in a human-readable format (specific to RTI Connext)
            </summary>
        </member>
        <member name="F:Rti.Dds.Topics.PrintFormatKind.Xml">
            <summary>
            Print in XML format
            </summary>
        </member>
        <member name="F:Rti.Dds.Topics.PrintFormatKind.Json">
            <summary>
            Print in JSON format
            </summary>
        </member>
        <member name="T:Rti.Dds.Topics.PublicationBuiltinTopicData">
            <summary>
            Entry created when a <see cref="T:Rti.Dds.Publication.DataWriter`1"/>
            is discovered in association with its <see cref="T:Rti.Dds.Publication.Publisher"/>.
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.Key">
            <summary>
            Gets the value of Key
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_key</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.ParticipantKey">
            <summary>
            Gets the value of ParticipantKey
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_participant_key</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.TopicName">
            <summary>
            Gets the value of TopicName
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_topic_name</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.TypeName">
            <summary>
            Gets the value of TypeName
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_type_name</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.Durability">
            <summary>
            Gets the value of Durability
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_durability</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.DurabilityService">
            <summary>
            Gets the value of DurabilityService
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_durability_service</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.Deadline">
            <summary>
            Gets the value of Deadline
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_deadline</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.LatencyBudget">
            <summary>
            Gets the value of LatencyBudget
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_latency_budget</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.Liveliness">
            <summary>
            Gets the value of Liveliness
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_liveliness</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.Reliability">
            <summary>
            Gets the value of Reliability
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_reliability</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.Lifespan">
            <summary>
            Gets the value of Lifespan
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_lifespan</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.UserData">
            <summary>
            Gets the value of UserData
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_user_data</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.Ownership">
            <summary>
            Gets the value of Ownership
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_ownership</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.OwnershipStrength">
            <summary>
            Gets the value of OwnershipStrength
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_ownership_strength</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.DestinationOrder">
            <summary>
            Gets the value of DestinationOrder
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_destination_order</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.Presentation">
            <summary>
            Gets the value of Presentation
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_presentation</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.Partition">
            <summary>
            Gets the value of Partition
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_partition</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.TopicData">
            <summary>
            Gets the value of TopicData
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_topic_data</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.GroupData">
            <summary>
            Gets the value of GroupData
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_group_data</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.Representation">
            <summary>
            Gets the value of Representation
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_representation</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.DataTags">
            <summary>
            Gets the value of DataTags
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_data_tags</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.DynamicType">
            <summary>
            Gets the value of DynamicType
            </summary>
            <value>The type information if available, or null if it's not available</value>
            <remarks>@dref_details_PublicationBuiltinTopicData_type_code</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.PublisherKey">
            <summary>
            Gets the value of PublisherKey
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_publisher_key</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.Property">
            <summary>
            Gets the value of Property
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_property</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.UnicastLocators">
            <summary>
            Gets the value of UnicastLocators
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_unicast_locators</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.VirtualGuid">
            <summary>
            Gets the value of VirtualGuid
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_virtual_guid</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.Service">
            <summary>
            Gets the value of Service
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_service</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.RtpsProtocolVersion">
            <summary>
            Gets the value of RtpsProtocolVersion
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_rtps_protocol_version</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.RtpsVendorId">
            <summary>
            Gets the value of RtpsVendorId
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_rtps_vendor_id</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.ProductVersion">
            <summary>
            Gets the value of ProductVersion
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_product_version</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.LocatorFilter">
            <summary>
            Gets the value of LocatorFilter
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_locator_filter</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.DisablePositiveAcks">
            <summary>
            Gets the value of DisablePositiveAcks
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_disable_positive_acks</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.PublicationBuiltinTopicData.PublicationName">
            <summary>
            Gets the value of PublicationName
            </summary>
            <remarks>@dref_details_PublicationBuiltinTopicData_publication_name</remarks>
        </member>
        <member name="M:Rti.Dds.Topics.PublicationBuiltinTopicData.#ctor(Rti.Dds.Topics.BuiltinTopicKey@)">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Topics.PublicationBuiltinTopicData"/> using a
            <see cref="T:Rti.Dds.Topics.BuiltinTopicKey"/>.
            </summary>
            <remarks>
            The rest of elements are not initialized.
            This constructor can be used to create a key holder for
            <see cref="M:Rti.Dds.Subscription.DataReader`1.LookupInstance(`0)"/>.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Topics.PublicationBuiltinTopicData.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.PublicationBuiltinTopicData.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.PublicationBuiltinTopicData.Equals(Rti.Dds.Topics.PublicationBuiltinTopicData)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.PublicationBuiltinTopicData.ToString">
            <summary>
            Returns a readable summary of the data
            </summary>
        </member>
        <member name="T:Rti.Dds.Topics.SubscriptionBuiltinTopicData">
            <summary>
            Entry created when a <see cref="T:Rti.Dds.Subscription.DataReader`1"/>
            is discovered in association with its <see cref="T:Rti.Dds.Subscription.Subscriber"/>.
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.Key">
            <summary>
            DCPS key to distinguish entries
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_key</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.ParticipantKey">
            <summary>
            DCPS key of the participant to which the DataReader belongs.
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_participant_key</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.TopicName">
            <summary>
            Name of the related <see cref="T:Rti.Dds.Topics.Topic`1"/>.
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_topic_name</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.TypeName">
            <summary>
            Name of the type attached to the <see cref="T:Rti.Dds.Topics.Topic`1"/>.
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_type_name</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.Durability">
            <summary>
            Policy of the corresponding DataReader
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_durability</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.Deadline">
            <summary>
            Policy of the corresponding DataReader
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_deadline</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.LatencyBudget">
            <summary>
            Policy of the corresponding DataReader
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_latency_budget</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.Liveliness">
            <summary>
            Policy of the corresponding DataReader
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_liveliness</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.Reliability">
            <summary>
            Policy of the corresponding DataReader
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_reliability</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.Ownership">
            <summary>
            Policy of the corresponding DataReader
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_ownership</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.DestinationOrder">
            <summary>
            Policy of the corresponding DataReader
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_destination_order</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.UserData">
            <summary>
            Policy of the corresponding DataReader
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_user_data</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.TimeBasedFilter">
            <summary>
            Policy of the corresponding DataReader
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_time_based_filter</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.Presentation">
            <summary>
            Policy of the Subscriber to which the DataReader belongs
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_presentation</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.Partition">
            <summary>
            Policy of the Subscriber to which the DataReader belongs
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_partition</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.TopicData">
            <summary>
            Policy of the related Topic
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_topic_data</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.GroupData">
            <summary>
            Policy of the Subscriber to which the DataReader belongs
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_group_data</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.TypeConsistency">
            <summary>
            Policy of the corresponding DataReader
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_type_consistency</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.Representation">
            <summary>
            Data representation policy of the corresponding DataReader
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_representation</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.DataTags">
            <summary>
            Tags of the corresponding DataReader
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_data_tags</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.DynamicType">
            <summary>
            @extension Type code information of the corresponding Topic
            </summary>
            <value>The type information if available, or null if it's not available</value>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_type_code</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.SubscriberKey">
            <summary>
            @extension DCPS key of the subscriber to which the DataReader belongs.
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_subscriber_key</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.Property">
            <summary>
            @extension Properties of the corresponding DataReader.
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_property</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.UnicastLocators">
            <summary>
            @extension Custom unicast locators that the endpoint can specify. The default locators will be used if this is not specified.
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_unicast_locators</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.MulticastLocators">
            <summary>
            @extension Custom multicast locators that the endpoint can specify. The default locators will be used if this is not specified.
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_multicast_locators</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.ContentFilterProperty">
            <summary>
            @extension This field provides all the required information to enable content filtering on the Writer side.
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_content_filter_property</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.VirtualGuid">
            <summary>
            @extension Virtual GUID associated with the DataReader.
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_virtual_guid</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.Service">
            <summary>
            @extension Policy of the corresponding DataReader.
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_service</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.RtpsProtocolVersion">
            <summary>
            @extension Version number of the RTPS wire protocol used.
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_rtps_protocol_version</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.RtpsVendorId">
            <summary>
            @extension ID of vendor implementing the RTPS wire protocol.
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_rtps_vendor_id</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.ProductVersion">
            <summary>
            @extension This is a vendor specific parameter. It gives the current version of \ndds
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_product_version</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.DisablePositiveAcks">
            <summary>
            @extension This is a vendor specific parameter. Determines whether the corresponding DataReader sends positive acknowledgments for reliability.
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_disable_positive_acks</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.SubscriptionBuiltinTopicData.SubscriptionName">
            <summary>
            @extension The subscription name and role name.
            </summary>
            <remarks>@dref_details_SubscriptionBuiltinTopicData_subscription_name</remarks>
        </member>
        <member name="M:Rti.Dds.Topics.SubscriptionBuiltinTopicData.#ctor(Rti.Dds.Topics.BuiltinTopicKey@)">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Topics.SubscriptionBuiltinTopicData"/> using a
            <see cref="T:Rti.Dds.Topics.BuiltinTopicKey"/>.
            </summary>
            <remarks>
            The rest of elements are not initialized.
            This constructor can be used to create a key holder for
            <see cref="M:Rti.Dds.Subscription.DataReader`1.LookupInstance(`0)"/>.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Topics.SubscriptionBuiltinTopicData.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.SubscriptionBuiltinTopicData.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.SubscriptionBuiltinTopicData.Equals(Rti.Dds.Topics.SubscriptionBuiltinTopicData)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.SubscriptionBuiltinTopicData.ToString">
            <summary>
            Returns a readable summary of the data
            </summary>
        </member>
        <member name="T:Rti.Dds.Topics.Topic`1">
            <summary>
            The most basic description of the data to be published
            and subscribed.
            </summary>
            <typeparam name="T">
            The type for this topic. Valid types are:
            - C# classes generated from IDL, such as \ref Example.MyType,
            - A built-in type (available without code generation): <see cref="T:Rti.Types.Builtin.StringTopicType"/>, <see cref="T:Rti.Types.Builtin.OctetsTopicType"/>,
            - <see cref="T:Rti.Types.Dynamic.DynamicData"/> (this is returned by <see cref="M:Rti.Dds.Domain.DomainParticipant.CreateTopic(System.String,Rti.Types.Dynamic.DynamicType)"/>)
            </typeparam>
            <remarks>@dref_details_Topic</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.Topic`1.Qos">
            <summary>
            Get or change the QoS of this DomainParticipant.
            </summary>
            <remarks>@dref_details_DomainParticipant_set_qos</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.Topic`1.DomainParticipant">
            <summary>
            The DomainParticipant that contains this topic.
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.Topic`1.Name">
            <summary>
            The name given to this topic
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.Topic`1.TypeName">
            <summary>
            The name of the type associated with this topic.
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.Topic`1.ToString">
            <summary>
            Displays basic information about this topic
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.Topic`1.InconsistentTopicStatus">
            <summary>
            Retrieve the <see cref="F:Rti.Dds.Core.Status.StatusMask.InconsistentTopic" />
            status.
            </summary>
            <remarks>@dref_details_Topic_get_inconsistent_topic_status</remarks>
        </member>
        <member name="E:Rti.Dds.Topics.Topic`1.InconsistentTopic">
            <summary>
            Event triggered when the <see cref="F:Rti.Dds.Core.Status.StatusMask.InconsistentTopic" />
            status changes.
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.Topic`1.ResetEvents(Rti.Dds.Core.Status.StatusMask)">
            <summary>
            Stop notifying of events and remove their event handlers
            </summary>
            <param name="eventsToRemove">
            Selects which events will stop receiving notifications.
            Use StatusMask.All to remove all event handlers.
            </param>
        </member>
        <member name="T:Rti.Dds.Topics.TopicBuiltinTopicData">
            <summary>
            Entry created when a <see cref="T:Rti.Dds.Topics.Topic`1"/> object is discovered.
            </summary>
            <remarks>@dref_details_TopicBuiltinTopicData</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.TopicBuiltinTopicData.Key">
            <summary>
            DCPS key to distinguish entries.
            </summary>
            <remarks>@dref_details_TopicBuiltinTopicData_key</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.TopicBuiltinTopicData.Name">
            <summary>
            Name of the <see cref="T:Rti.Dds.Topics.Topic`1"/>.
            </summary>
            <remarks>@dref_details_TopicBuiltinTopicData_name</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.TopicBuiltinTopicData.TypeName">
            <summary>
            Name of the type attached to the <see cref="T:Rti.Dds.Topics.Topic`1"/>.
            </summary>
            <remarks>@dref_details_TopicBuiltinTopicData_type_name</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.TopicBuiltinTopicData.Durability">
            <summary>
            durability policy of the corresponding Topic
            </summary>
            <remarks>@dref_details_TopicBuiltinTopicData_durability</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.TopicBuiltinTopicData.DurabilityService">
            <summary>
            durability service policy of the corresponding Topic
            </summary>
            <remarks>@dref_details_TopicBuiltinTopicData_durability_service</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.TopicBuiltinTopicData.Deadline">
            <summary>
            Policy of the corresponding Topic
            </summary>
            <remarks>@dref_details_TopicBuiltinTopicData_deadline</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.TopicBuiltinTopicData.LatencyBudget">
            <summary>
            Policy of the corresponding Topic
            </summary>
            <remarks>@dref_details_TopicBuiltinTopicData_latency_budget</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.TopicBuiltinTopicData.Liveliness">
            <summary>
            Policy of the corresponding Topic
            </summary>
            <remarks>@dref_details_TopicBuiltinTopicData_liveliness</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.TopicBuiltinTopicData.Reliability">
            <summary>
            Policy of the corresponding Topic
            </summary>
            <remarks>@dref_details_TopicBuiltinTopicData_reliability</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.TopicBuiltinTopicData.TransportPriority">
            <summary>
            Policy of the corresponding Topic
            </summary>
            <remarks>@dref_details_TopicBuiltinTopicData_transport_priority</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.TopicBuiltinTopicData.Lifespan">
            <summary>
            Policy of the corresponding Topic
            </summary>
            <remarks>@dref_details_TopicBuiltinTopicData_lifespan</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.TopicBuiltinTopicData.DestinationOrder">
            <summary>
            Policy of the corresponding Topic
            </summary>
            <remarks>@dref_details_TopicBuiltinTopicData_destination_order</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.TopicBuiltinTopicData.History">
            <summary>
            Policy of the corresponding Topic
            </summary>
            <remarks>@dref_details_TopicBuiltinTopicData_history</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.TopicBuiltinTopicData.ResourceLimits">
            <summary>
            Policy of the corresponding Topic
            </summary>
            <remarks>@dref_details_TopicBuiltinTopicData_resource_limits</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.TopicBuiltinTopicData.Ownership">
            <summary>
            Policy of the corresponding Topic
            </summary>
            <remarks>@dref_details_TopicBuiltinTopicData_ownership</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.TopicBuiltinTopicData.TopicData">
            <summary>
            Policy of the corresponding Topic
            </summary>
            <remarks>@dref_details_TopicBuiltinTopicData_topic_data</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.TopicBuiltinTopicData.Representation">
            <summary>
            Data representation policy of the corresponding Topic
            </summary>
            <remarks>@dref_details_TopicBuiltinTopicData_representation</remarks>
        </member>
        <member name="M:Rti.Dds.Topics.TopicBuiltinTopicData.#ctor(Rti.Dds.Topics.BuiltinTopicKey@)">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Topics.TopicBuiltinTopicData"/> using a
            <see cref="T:Rti.Dds.Topics.BuiltinTopicKey"/>.
            </summary>
            <remarks>
            The rest of elements are not initialized.
            This constructor can be used to create a key holder for
            <see cref="M:Rti.Dds.Subscription.DataReader`1.LookupInstance(`0)"/>.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Topics.TopicBuiltinTopicData.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.TopicBuiltinTopicData.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.TopicBuiltinTopicData.Equals(Rti.Dds.Topics.TopicBuiltinTopicData)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.TopicBuiltinTopicData.ToString">
            <summary>
            Returns a readable summary of the data
            </summary>
        </member>
        <member name="T:Rti.Dds.Topics.TopicQos">
            <summary>
            QoS policies supported by a <see cref="T:Rti.Dds.Topics.Topic`1"/>.
            </summary>
            <remarks>@dref_details_TopicQos</remarks>
        </member>
        <member name="P:Rti.Dds.Topics.TopicQos.Default">
            <summary>
            Singleton containing the documented default value of a TopicQos
            </summary>
            <remarks>
            This is a static value containing the documented default values for each policy.
            Use <see cref="P:Rti.Dds.Domain.DomainParticipant.DefaultTopicQos"/> for the runtime
            default value that takes into consideration the current configuration.
            </remarks>
        </member>
        <member name="P:Rti.Dds.Topics.TopicQos.TopicData">
            <summary>
            Gets the <see cref="P:Rti.Dds.Topics.TopicQos.TopicData"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.TopicQos.Durability">
            <summary>
            Gets the <see cref="P:Rti.Dds.Topics.TopicQos.Durability"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.TopicQos.DurabilityService">
            <summary>
            Gets the <see cref="P:Rti.Dds.Topics.TopicQos.DurabilityService"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.TopicQos.Deadline">
            <summary>
            Gets the <see cref="P:Rti.Dds.Topics.TopicQos.Deadline"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.TopicQos.LatencyBudget">
            <summary>
            Gets the <see cref="P:Rti.Dds.Topics.TopicQos.LatencyBudget"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.TopicQos.Liveliness">
            <summary>
            Gets the <see cref="P:Rti.Dds.Topics.TopicQos.Liveliness"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.TopicQos.Reliability">
            <summary>
            Gets the <see cref="P:Rti.Dds.Topics.TopicQos.Reliability"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.TopicQos.DestinationOrder">
            <summary>
            Gets the <see cref="P:Rti.Dds.Topics.TopicQos.DestinationOrder"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.TopicQos.History">
            <summary>
            Gets the <see cref="P:Rti.Dds.Topics.TopicQos.History"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.TopicQos.ResourceLimits">
            <summary>
            Gets the <see cref="P:Rti.Dds.Topics.TopicQos.ResourceLimits"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.TopicQos.TransportPriority">
            <summary>
            Gets the <see cref="P:Rti.Dds.Topics.TopicQos.TransportPriority"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.TopicQos.Lifespan">
            <summary>
            Gets the <see cref="P:Rti.Dds.Topics.TopicQos.Lifespan"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.TopicQos.Ownership">
            <summary>
            Gets the <see cref="P:Rti.Dds.Topics.TopicQos.Ownership"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.TopicQos.Representation">
            <summary>
            Gets the <see cref="T:Rti.Dds.Core.Policy.DataRepresentation"/> policy.
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithTopicData(Rti.Dds.Core.Policy.TopicData)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.TopicData"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithTopicData(System.Action{System.Collections.Immutable.ImmutableList{System.Byte}.Builder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.TopicData"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithDurability(Rti.Dds.Core.Policy.Durability)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.Durability"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithDurability(System.Action{Rti.Dds.Core.Policy.DurabilityBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.Durability"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithDurabilityService(Rti.Dds.Core.Policy.DurabilityService)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.DurabilityService"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithDurabilityService(System.Action{Rti.Dds.Core.Policy.DurabilityServiceBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.DurabilityService"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithDeadline(Rti.Dds.Core.Policy.Deadline)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.Deadline"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithDeadline(System.Action{Rti.Dds.Core.Policy.DeadlineBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.Deadline"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithLatencyBudget(Rti.Dds.Core.Policy.LatencyBudget)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.LatencyBudget"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithLatencyBudget(System.Action{Rti.Dds.Core.Policy.LatencyBudgetBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.LatencyBudget"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithLiveliness(Rti.Dds.Core.Policy.Liveliness)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.Liveliness"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithLiveliness(System.Action{Rti.Dds.Core.Policy.LivelinessBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.Liveliness"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithReliability(Rti.Dds.Core.Policy.Reliability)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.Reliability"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithReliability(System.Action{Rti.Dds.Core.Policy.ReliabilityBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.Reliability"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithDestinationOrder(Rti.Dds.Core.Policy.DestinationOrder)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.DestinationOrder"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithDestinationOrder(System.Action{Rti.Dds.Core.Policy.DestinationOrderBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.DestinationOrder"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithHistory(Rti.Dds.Core.Policy.History)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.History"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithHistory(System.Action{Rti.Dds.Core.Policy.HistoryBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.History"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithResourceLimits(Rti.Dds.Core.Policy.ResourceLimits)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.ResourceLimits"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithResourceLimits(System.Action{Rti.Dds.Core.Policy.ResourceLimitsBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.ResourceLimits"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithTransportPriority(Rti.Dds.Core.Policy.TransportPriority)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.TransportPriority"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithTransportPriority(System.Action{Rti.Dds.Core.Policy.TransportPriorityBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.TransportPriority"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithLifespan(Rti.Dds.Core.Policy.Lifespan)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.Lifespan"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithLifespan(System.Action{Rti.Dds.Core.Policy.LifespanBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.Lifespan"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithOwnership(Rti.Dds.Core.Policy.Ownership)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.Ownership"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithOwnership(System.Action{Rti.Dds.Core.Policy.OwnershipBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Topics.TopicQos.Ownership"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithRepresentation(Rti.Dds.Core.Policy.DataRepresentation)">
            <summary>
            Creates an instance with a new <see cref="T:Rti.Dds.Core.Policy.DataRepresentation"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.WithRepresentation(System.Action{Rti.Dds.Core.Policy.DataRepresentationBuilder})">
            <summary>
            Creates a new instance with a new <see cref="T:Rti.Dds.Core.Policy.DataRepresentation"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.ToDataWriterQos">
            <summary>
            Creates a DataWriterQos object with the policies of this TopicQos.
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.ToDataReaderQos">
            <summary>
            Creates a DataReaderQos object with the policies of this TopicQos.
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.Equals(Rti.Dds.Topics.TopicQos)">
            <summary>
            Compares all the policies for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.GetHashCode">
            <summary>
            Returns the hash code by combining that of each policy
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.Equals(System.Object)">
            <summary>
            Compares all the policies for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.ToString">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <remarks>
            The output is formatted using the default values for the
            <see cref="T:Rti.Dds.Core.QosPrintFormat"/> and only QoS policies which differ
            from the documented default are included.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.ToString(Rti.Dds.Core.QosPrintFormat)">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <param name="format">The baseQos profile.</param>
            <remarks>
            This overload accepts a value for the baseQos. Only the differences
            between the <see cref="T:Rti.Dds.Topics.TopicQos"/> object being printed and
            the baseQos are included in the output.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.ToString(Rti.Dds.Topics.TopicQos,Rti.Dds.Core.QosPrintFormat)">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <param name="baseQos">The baseQos profile.</param>
            <param name="format">the format used to configure the output. If not
            supplied the output is formatted using the default format.</param>
            <remarks>
            This overload accepts a value for the baseQos. Only the differences
            between the <see cref="T:Rti.Dds.Topics.TopicQos"/> object being printed and
            the baseQos are included in the output.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Topics.TopicQos.ToString(Rti.Dds.Core.QosPrintAll,Rti.Dds.Core.QosPrintFormat)">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <param name="baseQos">Used to indicate that the entire QoS object
            should be included in the output. The only value which should
            be provided for this argument is QosPrintAll.Value</param>
            <param name="format">The format used to configure the output. If not
            supplied, the output is formatted using the default format.</param>
            <remarks>
            This overload accepts a parameter of type <see cref="T:Rti.Dds.Core.QosPrintAll"/>.
            Unlike the other ToString overloads, the entire QoS object will be
            included in the output.
            </remarks>
        </member>
        <member name="T:Rti.Dds.Topics.ITypeSupport">
            <summary>
            Base interface that provides support operations for IDL-generated types
            </summary>
        </member>
        <member name="P:Rti.Dds.Topics.ITypeSupport.DynamicType">
            <summary>
            The DynamicType that describes the IDL type.
            </summary>
        </member>
        <member name="T:Rti.Dds.Topics.TypeSupport`1">
            <summary>
            Base class for IDL-generated type support classes. It allows getting the
            <see cref="P:Rti.Dds.Topics.TypeSupport`1.DynamicType"/> that describes the type `T`.
            </summary>
            <typeparam name="T">The IDL type managed by this TypeSupport</typeparam>
        </member>
        <member name="M:Rti.Dds.Topics.TypeSupport`1.#ctor(Rti.Dds.Topics.ITypePlugin,System.Lazy{Rti.Types.Dynamic.DynamicType})">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.TypeSupport`1.CreateSerializer(System.Int16)">
            <summary>
            Creates an ISerializer that allows serializing and deserializing data as byte arrays.
            </summary>
            <param name="dataRepresentation">
            The binary format that the serializer will use. The supported options are
            <see cref="F:Rti.Dds.Core.Policy.DataRepresentation.Xcdr"/> (default) and
            <see cref="F:Rti.Dds.Core.Policy.DataRepresentation.Xcdr2"/>
            </param>
        </member>
        <member name="M:Rti.Dds.Topics.TypeSupport`1.ToString(`0)">
            <summary>
            Converts a data sample into a readable string.
            </summary>
            <param name="sample">The data sample to stringify</param>
            <returns>A string representation of the data sample</returns>
        </member>
        <member name="M:Rti.Dds.Topics.TypeSupport`1.ToString(`0,Rti.Dds.Topics.PrintFormatProperty)">
            <summary>
            Converts a data sample into a string representation such as XML or JSON
            according to the specified formatting options.
            </summary>
            <param name="sample">The data sample to stringify</param>
            <param name="format">The format options</param>
            <returns>A string representation of the data sample</returns>
        </member>
        <member name="P:Rti.Dds.Topics.TypeSupport`1.DynamicType">
            <summary>
            The DynamicType that describes the IDL type T.
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.TypeSupport`1.GetDynamicTypeInternal(System.Boolean)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.TypeSupport`1.RegisterType(Rti.Dds.Domain.DomainParticipant,System.String)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.TypeSupport`1.GetAttribute``1(System.String)">
            <summary>
            Gets an Attribute (such as <see cref="T:Omg.Types.KeyAttribute"/>)
            from a property of this TypeSupport's type, T.
            </summary>
            <param name="propertyName">The name of a property of the type T</param>
            <typeparam name="TAttribute">The attribute type such as <see cref="T:Omg.Types.KeyAttribute"/></typeparam>
            <returns>The attribute definition if this property has it or null if it doesn't.</returns>
            <exception cref="T:System.ArgumentException">If the property doesn't exist in this type</exception>
            <remarks>
            Some IDL annotations are mapped to C# attributes. This helper
            method can retrieve these attributes using C# reflection.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Topics.TypeSupport`1.Dispose">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:Rti.Dds.Topics.TypeSupportHelper">
            <summary>
            Provides static functions to reflectively find the TypeSupport class for
            a given IDL type.
            </summary>
        </member>
        <member name="M:Rti.Dds.Topics.TypeSupportHelper.GetTypeSupportForType(System.Type)">
            <summary>
            Returns the TypeSupport class associated with a given IDL-based type.
            </summary>
        </member>
        <member name="T:Rti.Dds.Publication.AcknowledgmentInfo">
            <summary>
            Information about an application-acknowledged sample.
            </summary>
            <remarks>@dref_details_AcknowledgmentInfo_subscription_handle</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.AcknowledgmentInfo.SubscriptionHandle">
            <summary>
            Subscription handle of the acknowledging <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <remarks>@dref_details_AcknowledgmentInfo_subscription_handle</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.AcknowledgmentInfo.SampleIdentity">
            <summary>
            Identity of the sample being acknowledged.
            </summary>
            <remarks>@dref_details_AcknowledgmentInfo_sample_identity</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.AcknowledgmentInfo.Cookie">
            <summary>
            Cookie of the acknowledged sample.
            </summary>
            <remarks>@dref_details_AcknowledgmentInfo_cookie</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.AcknowledgmentInfo.ValidResponseData">
            <summary>
            Flag indicating validity of the user response data in the acknowledgment.
            </summary>
            <remarks>@dref_details_AcknowledgmentInfo_valid_response_data</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.AcknowledgmentInfo.ResponseData">
            <summary>
            User data payload of application-level acknowledgment message.
            </summary>
            <remarks>@dref_details_AcknowledgmentInfo_response_data</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.AcknowledgmentInfo.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:Rti.Dds.Publication.AcknowledgmentInfo.Equals(System.Object)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Rti.Dds.Publication.AcknowledgmentInfo.Equals(Rti.Dds.Publication.AcknowledgmentInfo)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="T:Rti.Dds.Publication.AnyDataWriter">
            <summary>
            The base of a typed <see cref="T:Rti.Dds.Publication.DataWriter`1"/>. Provides type-independent
            methods and properties.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.AnyDataWriter.TopicUntyped">
            <summary>
            Returns the type-erased <see cref="T:Rti.Dds.Topics.Topic`1"/> associated with this
            DataWriter.
            </summary>
            <value>Returns <see cref="P:Rti.Dds.Publication.DataWriter`1.Topic"/> </value>
        </member>
        <member name="P:Rti.Dds.Publication.AnyDataWriter.Qos">
            <summary>
            Gets or sets the writer QoS.
            </summary>
            <remarks>@dref_details_DataWriter_set_qos</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.AnyDataWriter.Publisher">
            <summary>
            This operation returns the Publisher to which the DataWriter belongs.
            </summary>
            <remarks>@dref_details_DataWriter_get_publisher</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.AnyDataWriter.MatchedSubscriptions">
            <summary>
            Retrieves the list of subscriptions currently "associated" with this
            DataWriter.
            </summary>
            <remarks>@dref_details_DataWriter_get_matched_subscriptions</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.AnyDataWriter.LivelinessLostStatus">
            <summary>
            Accesses the <see cref="F:Rti.Dds.Core.Status.StatusMask.LivelinessLost"/> status.
            </summary>
            <remarks>@dref_details_DataWriter_get_liveliness_lost_status</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.AnyDataWriter.OfferedDeadlineMissedStatus">
            <summary>
            Accesses the <see cref="F:Rti.Dds.Core.Status.StatusMask.PublicationMatched"/> status.
            </summary>
            <remarks>@dref_details_DataWriter_get_offered_deadline_missed_status</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.AnyDataWriter.OfferedIncompatibleQosStatus">
            <summary>
            Accesses the <see cref="F:Rti.Dds.Core.Status.StatusMask.OfferedIncompatibleQos"/> status.
            </summary>
            <remarks>@dref_details_DataWriter_get_offered_incompatible_qos_status</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.AnyDataWriter.PublicationMatchedStatus">
            <summary>
            Accesses the <see cref="F:Rti.Dds.Core.Status.StatusMask.PublicationMatched"/> status.
            </summary>
            <remarks>@dref_details_DataWriter_get_publication_matched_status</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.AnyDataWriter.DataWriterProtocolStatus">
            <summary>
            Retrieve the <see cref="F:Rti.Dds.Core.Status.StatusMask.DataWriterProtocol" />
            status.
            </summary>
            <remarks>@dref_details_DataWriter_get_datawriter_protocol_status</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.AnyDataWriter.DataWriterCacheStatus">
            <summary>
            Retrieve the <see cref="F:Rti.Dds.Core.Status.StatusMask.DataWriterCache" />
            status.
            </summary>
            <remarks>@dref_details_DataWriter_get_datawriter_cache_status</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.AnyDataWriter.ReliableReaderActivityChangedStatus">
            <summary>
            Retrieve the <see cref="F:Rti.Dds.Core.Status.StatusMask.ReliableReaderActivityChanged" />
            status.
            </summary>
            <remarks>@dref_details_DataWriter_get_reliable_reader_activity_changed_status</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.AnyDataWriter.ReliableWriterCacheChangedStatus">
            <summary>
            Retrieve the <see cref="F:Rti.Dds.Core.Status.StatusMask.ReliableWriterCacheChanged" />
            status.
            </summary>
            <remarks>@dref_details_DataWriter_get_reliable_writer_cache_changed_status</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.AnyDataWriter.ServiceRequestAcceptedStatus">
            <summary>
            Retrieve the <see cref="F:Rti.Dds.Core.Status.StatusMask.ServiceRequestAccepted" />
            status.
            </summary>
            <remarks>@dref_details_DataWriter_get_service_request_accepted_status</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.AnyDataWriter.WriteUntyped(System.Object)">
            <summary>
            Calls <see cref="M:Rti.Dds.Publication.DataWriter`1.Write(`0)"/>, but allows doing so in
            a context where <c>T</c> is not known.
            </summary>
            <param name="sample">
            The data to write. Its runtime type must be the type of the actual
            <see cref="T:Rti.Dds.Publication.DataWriter`1"/>. Otherwise this operation throws
            <see cref="T:System.InvalidCastException"/>.
            </param>
        </member>
        <member name="M:Rti.Dds.Publication.AnyDataWriter.WriteUntyped(System.Object,Rti.Dds.Publication.WriteParams)">
            <summary>
            Calls <see cref="M:Rti.Dds.Publication.DataWriter`1.Write(`0,Rti.Dds.Publication.WriteParams)"/>, but allows
            doing so in a context where <c>T</c> is not known.
            </summary>
            <param name="sample">
            The data to write. Its runtime type must be the type of the actual
            <see cref="T:Rti.Dds.Publication.DataWriter`1"/>. Otherwise this operation throws
            <see cref="T:System.InvalidCastException"/>.
            </param>
            <param name="writeParams">Configures the write operation</param>
        </member>
        <member name="M:Rti.Dds.Publication.AnyDataWriter.RegisterInstanceUntyped(System.Object)">
            <summary>
            Calls <see cref="M:Rti.Dds.Publication.DataWriter`1.RegisterInstance(`0)"/>, but allows
            doing so in a context where <c>T</c> is not known.
            </summary>
            <param name="sample">
            The instance to register. Its runtime type must be the type of the actual
            <see cref="T:Rti.Dds.Publication.DataWriter`1"/>. Otherwise this operation throws
            <see cref="T:System.InvalidCastException"/>.
            </param>
        </member>
        <member name="M:Rti.Dds.Publication.AnyDataWriter.RegisterInstanceUntyped(System.Object,Rti.Dds.Publication.WriteParams)">
            <summary>
            Calls <see cref="M:Rti.Dds.Publication.DataWriter`1.RegisterInstance(`0,Rti.Dds.Publication.WriteParams)"/>, but allows
            doing so in a context where <c>T</c> is not known.
            </summary>
            <param name="sample">
            The instance to register. Its runtime type must be the type of the actual
            <see cref="T:Rti.Dds.Publication.DataWriter`1"/>. Otherwise this operation throws
            <see cref="T:System.InvalidCastException"/>.
            </param>
            <param name="parameters">Configures the register operation</param>
        </member>
        <member name="M:Rti.Dds.Publication.AnyDataWriter.DisposeInstance(Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Requests the middleware to delete the instance.
            </summary>
            <remarks>@dref_details_FooDataWriter_dispose</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.AnyDataWriter.DisposeInstance(Rti.Dds.Publication.WriteParams)">
            <summary>
            Requests the middleware to delete the instance.
            </summary>
            <remarks>@dref_details_FooDataWriter_dispose</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.AnyDataWriter.UnregisterInstance(Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Reverses the action of <see cref="M:Rti.Dds.Publication.AnyDataWriter.RegisterInstanceUntyped(System.Object)"/>.
            </summary>
            <remarks>@dref_details_FooDataWriter_unregister_instance</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.AnyDataWriter.UnregisterInstance(Rti.Dds.Publication.WriteParams)">
            <summary>
            Provides additional parameters to <see cref="M:Rti.Dds.Publication.AnyDataWriter.UnregisterInstance(Rti.Dds.Core.InstanceHandle@)"/>.
            </summary>
            <remarks>@dref_details_FooDataWriter_unregister_instance</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.AnyDataWriter.LookupInstanceUntyped(System.Object)">
            <summary>
            Allows calling <see cref="M:Rti.Dds.Publication.DataWriter`1.LookupInstance(`0)"/> in a
            context where the type is not known.
            </summary>
            <returns>
            The <see cref="T:Rti.Dds.Core.InstanceHandle"/> corresponding to the provided keyholder.
            The runtime type of the keyholder must match that of the actual
            <see cref="T:Rti.Dds.Publication.DataWriter`1"/> otherwise this operation throws
            <see cref="T:System.InvalidCastException"/>.
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.AnyDataWriter.GetKeyValueUntyped(System.Object,Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Allows calling <see cref="M:Rti.Dds.Publication.DataWriter`1.GetKeyValue(`0,Rti.Dds.Core.InstanceHandle@)"/> in a
            context where the type is not known.
            </summary>
            <returns>
            The key values corresponding to the provided instance handle.
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.AnyDataWriter.GetMatchedSubscriptionData(Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Retrieves the information on a subscription that is currently
            "associated" with this DataWriter.
            </summary>
            <remarks>@dref_details_DataWriter_get_matched_subscription_data</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.AnyDataWriter.GetMatchedSubscriptionData">
            <summary>
            Retrieves the information on all subscriptions that are currently
            "associated" with this DataWriter.
            </summary>
        </member>
        <member name="M:Rti.Dds.Publication.AnyDataWriter.GetMatchedSubscriptionParticipantData(Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Retrieves the information on the discovered <see cref="T:Rti.Dds.Domain.DomainParticipant"/>
            associated with the subscription that is currently matching with the <see cref="T:Rti.Dds.Publication.DataWriter`1"/>
            </summary>
            <remarks>@dref_details_DataWriter_get_matched_subscription_participant_data</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.AnyDataWriter.IsMatchedSubscriptionActive(Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Check if a subscription currently matched with a
            <see cref="T:Rti.Dds.Publication.DataWriter`1"/> is active.
            </summary>
            <remarks>@dref_details_DataWriter_is_matched_subscription_active</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.AnyDataWriter.GetMatchedSubscriptionLocators">
            <summary>
            Retrieves a list of <see cref="T:Rti.Dds.Core.Locator"/> for subscriptions currently
            matched with the <see cref="T:Rti.Dds.Publication.DataWriter`1"/>.
            </summary>
            <remarks>@dref_details_DataWriter_get_matched_subscription_locators</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.AnyDataWriter.WaitForAcknowledgments(Omg.Dds.Core.Duration)">
            <summary>
            Blocks the calling thread until all data written by a reliable writer
            is acknowledged, or until the maxWait expires.
            </summary>
            <remarks>@dref_details_DataWriter_wait_for_acknowledgments</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.AnyDataWriter.WaitForAsynchronousPublishing(Omg.Dds.Core.Duration)">
            <summary>
            @extension Blocks the calling thread until asynchronous sending is completed.
            </summary>
            <remarks>@dref_details_DataWriter_wait_for_asynchronous_publishing</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.AnyDataWriter.IsSampleAppAcknowledged(Rti.Dds.Core.SampleIdentity@)">
            <summary>
            Indicates if a sample has been acknowledged by the subscribing
            applications.
            </summary>
            <remarks>@dref_details_DataWriter_is_sample_app_acknowledged</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.AnyDataWriter.AssertLiveliness">
            <summary>
            This operation manually asserts the liveliness of this DataWriter
            </summary>
            <remarks>@dref_details_DataWriter_assert_liveliness</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.AnyDataWriter.GetMatchedSubscriptionDataWriterProtocolStatus(Rti.Dds.Core.InstanceHandle@)">
            <summary>
            @extension Get the protocol status for this DataWriter, per matched subscription identified by the subscriptionHandle.
            </summary>
            <remarks>@dref_details_DataWriter_get_matched_subscription_datawriter_protocol_status</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.AnyDataWriter.GetMatchedSubscriptionDataWriterProtocolStatus(Rti.Dds.Core.Locator)">
            <summary>
            @extension Get the protocol status for this DataWriter, per matched subscription identified by the locator.
            </summary>
            <remarks>@dref_details_DataWriter_get_matched_subscription_datawriter_protocol_status_by_locator</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.AnyDataWriter.Flush">
            <summary>
            @extension Flushes the batch in progress in the context of the calling thread.
            </summary>
            <remarks>@dref_details_DataWriter_flush</remarks>
        </member>
        <member name="E:Rti.Dds.Publication.AnyDataWriter.LivelinessLost">
            <summary>
            Event triggered when the <see cref="F:Rti.Dds.Core.Status.StatusMask.LivelinessLost" />
            status changes.
            </summary>
        </member>
        <member name="E:Rti.Dds.Publication.AnyDataWriter.OfferedIncompatibleQos">
            <summary>
            Event triggered when the <see cref="F:Rti.Dds.Core.Status.StatusMask.OfferedIncompatibleQos" />
            status changes.
            </summary>
        </member>
        <member name="E:Rti.Dds.Publication.AnyDataWriter.OfferedDeadlineMissed">
            <summary>
            Event triggered when the <see cref="F:Rti.Dds.Core.Status.StatusMask.OfferedDeadlineMissed" />
            status changes.
            </summary>
        </member>
        <member name="E:Rti.Dds.Publication.AnyDataWriter.PublicationMatched">
            <summary>
            Event triggered when the <see cref="F:Rti.Dds.Core.Status.StatusMask.PublicationMatched" />
            status changes
            </summary>
        </member>
        <member name="E:Rti.Dds.Publication.AnyDataWriter.ReliableReaderActivityChanged">
            <summary>
            Event triggered when the <see cref="F:Rti.Dds.Core.Status.StatusMask.ReliableReaderActivityChanged" />
            status changes.
            </summary>
        </member>
        <member name="E:Rti.Dds.Publication.AnyDataWriter.ReliableWriterCacheChanged">
            <summary>
            Event triggered when the <see cref="F:Rti.Dds.Core.Status.StatusMask.ReliableWriterCacheChanged" />
            status changes.
            </summary>
        </member>
        <member name="E:Rti.Dds.Publication.AnyDataWriter.ServiceRequestAccepted">
            <summary>
            Event triggered when the <see cref="F:Rti.Dds.Core.Status.StatusMask.ServiceRequestAccepted" />
            status changes.
            </summary>
        </member>
        <member name="E:Rti.Dds.Publication.AnyDataWriter.ApplicationAcknowledgementReceived">
            <summary>
            Event triggered when the <see cref="F:Rti.Dds.Core.Status.StatusMask.DataWriterApplicationAcknowledgementReceived" />
            status changes.
            </summary>
        </member>
        <member name="E:Rti.Dds.Publication.AnyDataWriter.InstanceReplaced">
            <summary>
            Event triggered when the <see cref="F:Rti.Dds.Core.Status.StatusMask.DataWriterInstanceReplaced" />
            status changes.
            </summary>
        </member>
        <member name="E:Rti.Dds.Publication.AnyDataWriter.SampleRemoved">
            <summary>
            Event triggered when the <see cref="F:Rti.Dds.Core.Status.StatusMask.DataWriterSampleRemoved" />
            status changes.
            </summary>
        </member>
        <member name="M:Rti.Dds.Publication.AnyDataWriter.ResetEvents(Rti.Dds.Core.Status.StatusMask)">
            <summary>
            Stop notifying of certain events and remove their event handlers
            </summary>
            <param name="eventsToRemove">
            Selects which events will stop receiving notifications.
            Use StatusMask.All to remove all event handlers.
            </param>
        </member>
        <member name="T:Rti.Dds.Publication.LivelinessLostEventHandler">
            <summary>
            Delegate type of the handler for the
            <see cref="F:Rti.Dds.Core.Status.StatusMask.LivelinessLost"/> status.
            </summary>
        </member>
        <member name="T:Rti.Dds.Publication.OfferedIncompatibleQosEventHandler">
            <summary>
            Delegate type of the handler for the
            <see cref="F:Rti.Dds.Core.Status.StatusMask.OfferedIncompatibleQos"/> status.
            </summary>
        </member>
        <member name="T:Rti.Dds.Publication.OfferedDeadlineMissedEventHandler">
            <summary>
            Delegate type of the handler for the
            <see cref="F:Rti.Dds.Core.Status.StatusMask.OfferedDeadlineMissed"/> status.
            </summary>
        </member>
        <member name="T:Rti.Dds.Publication.PublicationMatchedEventHandler">
            <summary>
            Delegate type of the handler for the
            <see cref="F:Rti.Dds.Core.Status.StatusMask.PublicationMatched"/> status.
            </summary>
        </member>
        <member name="T:Rti.Dds.Publication.ReliableReaderActivityChangedEventHandler">
            <summary>
            Delegate type of the handler for the
            <see cref="F:Rti.Dds.Core.Status.StatusMask.ReliableReaderActivityChanged"/> status.
            </summary>
        </member>
        <member name="T:Rti.Dds.Publication.ReliableWriterCacheChangedEventHandler">
            <summary>
            Delegate type of the handler for the
            <see cref="F:Rti.Dds.Core.Status.StatusMask.ReliableWriterCacheChanged"/> status.
            </summary>
        </member>
        <member name="T:Rti.Dds.Publication.ServiceRequestAcceptedEventHandler">
            <summary>
            Delegate type of the handler for the
            <see cref="F:Rti.Dds.Core.Status.StatusMask.ServiceRequestAccepted"/> status.
            </summary>
        </member>
        <member name="T:Rti.Dds.Publication.ApplicationAcknowledgementReceivedEventHandler">
            <summary>
            Delegate type of the handler for the
            <see cref="F:Rti.Dds.Core.Status.StatusMask.DataWriterApplicationAcknowledgementReceived"/> status.
            </summary>
        </member>
        <member name="T:Rti.Dds.Publication.InstanceReplacedEventHandler">
            <summary>
            Delegate type of the handler for the
            <see cref="F:Rti.Dds.Core.Status.StatusMask.DataWriterInstanceReplaced"/> status.
            </summary>
        </member>
        <member name="T:Rti.Dds.Publication.SampleRemovedEventHandler">
            <summary>
            Delegate type of the handler for the
            <see cref="F:Rti.Dds.Core.Status.StatusMask.DataWriterSampleRemoved"/> status.
            </summary>
        </member>
        <member name="T:Rti.Dds.Publication.DataWriter`1">
            <summary>
            Allows an application to set the value of the data to be published
            under a given <see cref="T:Rti.Dds.Topics.Topic`1"/>.
            </summary>
            <remarks>
            @dref_details_DataWriter
            </remarks>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriter`1.Publisher">
            <summary>
            Returns the Publisher to which the DataWriter belongs.
            </summary>
            <remarks>@dref_details_DataWriter_get_publisher</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriter`1.Topic">
            <summary>
            Returns the Topic associated with this DataWriter.
            </summary>
            <remarks>@dref_details_DataWriter_get_topic</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriter`1.TopicUntyped">
            <summary>
            Returns <see cref="P:Rti.Dds.Publication.DataWriter`1.Topic"/>
            </summary>
            <remarks>@dref_details_DataWriter_get_topic</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriter`1.Write(`0)">
            <summary>
            Modifies the value of a data instance.
            </summary>
            <remarks>@dref_details_FooDataWriter_write</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriter`1.Write(`0,Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Modifies the value of a data instance.
            </summary>
            <remarks>
            <para>
            When writing multiple updates for the same instance, it is
            recommended to first call <see cref="M:Rti.Dds.Publication.DataWriter`1.RegisterInstance(`0)"/>
            and use the instance handle to call this method. In this case this
            method is more efficient than <see cref="M:Rti.Dds.Publication.DataWriter`1.Write(`0)"/>.
            </para>
            <para>@dref_details_FooDataWriter_write</para>
            </remarks>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriter`1.Write(`0,Rti.Dds.Publication.WriteParams)">
            <summary>
            Modifies the value of a data instance and specifies additional parameters.
            </summary>
            <remarks>@dref_details_FooDataWriter_write_w_params</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriter`1.WriteUntyped(System.Object)">
            <summary>
            Calls <see cref="M:Rti.Dds.Publication.DataWriter`1.Write(`0)"/>, but allows doing so as an
            <see cref="T:Rti.Dds.Publication.AnyDataWriter"/> in a context where T is not known.
            </summary>
            <param name="sample">
            The data to write. Its runtime type must be T. Otherwise this
            operation throws <see cref="T:System.InvalidCastException"/>.
            </param>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriter`1.WriteUntyped(System.Object,Rti.Dds.Publication.WriteParams)">
            <summary>
            Calls <see cref="M:Rti.Dds.Publication.DataWriter`1.Write(`0,Rti.Dds.Publication.WriteParams)"/>, but allows doing so as an
            <see cref="T:Rti.Dds.Publication.AnyDataWriter"/> in a context where T is not known.
            </summary>
            <param name="sample">
            The data to write. Its runtime type must be T. Otherwise this
            operation throws <see cref="T:System.InvalidCastException"/>.
            </param>
            <param name="parameters">Configures the write operation</param>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriter`1.RegisterInstance(`0)">
            <summary>
            Informs the middleware that the application will be modifying a particular instance.
            </summary>
            <remarks>@dref_details_FooDataWriter_register_instance</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriter`1.RegisterInstance(`0,Rti.Dds.Publication.WriteParams)">
            <summary>
            Informs DDS that the application will be modifying a particular instance.
            </summary>
            <remarks>@dref_details_FooDataWriter_register_instance</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriter`1.RegisterInstanceUntyped(System.Object)">
            <summary>
            Calls <see cref="M:Rti.Dds.Publication.DataWriter`1.RegisterInstance(`0)"/>, but allows
            doing so in a context where <c>T</c> is not known.
            </summary>
            <param name="sample">
            The instance to register. Its runtime type must be the type of the actual
            <see cref="T:Rti.Dds.Publication.DataWriter`1"/>. Otherwise this operation throws
            <see cref="T:System.InvalidCastException"/>.
            </param>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriter`1.RegisterInstanceUntyped(System.Object,Rti.Dds.Publication.WriteParams)">
            <summary>
            Calls <see cref="M:Rti.Dds.Publication.DataWriter`1.RegisterInstance(`0,Rti.Dds.Publication.WriteParams)"/>, but allows
            doing so in a context where <c>T</c> is not known.
            </summary>
            <param name="sample">
            The instance to register. Its runtime type must be the type of the actual
            <see cref="T:Rti.Dds.Publication.DataWriter`1"/>. Otherwise this operation throws
            <see cref="T:System.InvalidCastException"/>.
            </param>
            <param name="parameters">Configures the register operation</param>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriter`1.LookupInstance(`0)">
            <summary>
            Retrieve the InstanceHandle that corresponds to an instance key value.
            </summary>
            <remarks>@dref_details_FooDataWriter_lookup_instance</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriter`1.LookupInstanceUntyped(System.Object)">
            <summary>
            Calls <see cref="M:Rti.Dds.Publication.DataWriter`1.LookupInstance(`0)"/>, but allows doing so as an
            <see cref="T:Rti.Dds.Publication.AnyDataWriter"/> in a context where T is not known.
            </summary>
            <param name="keyHolder">
            The key fields of the instance to lookup.
            The runtime type of keyHolder must be T. Otherwise this
            operation throws <see cref="T:System.InvalidCastException"/>.
            </param>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriter`1.GetKeyValue(`0,Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Retrieve the instance key that corresponds to an InstanceHandle.
            </summary>
            <param name="keyHolder">(output) A placeholder to populate the key members</param>
            <param name="instanceHandle">Identifies the key to look up</param>
            <returns>Returns the argument keyHolder</returns>
            <remarks>@dref_details_FooDataWriter_get_key_value</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriter`1.GetKeyValueUntyped(System.Object,Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Calls <see cref="M:Rti.Dds.Publication.DataWriter`1.GetKeyValue(`0,Rti.Dds.Core.InstanceHandle@)"/>, but allows doing so
            as an <see cref="T:Rti.Dds.Publication.AnyDataWriter"/> in a context where T is not known.
            </summary>
            <param name="keyHolder">
            The obtained key values.
            </param>
            <param name="instanceHandle">
            The <see cref="T:Rti.Dds.Core.InstanceHandle"/> corresponding to the instance whose
            key values we want to obtain.
            The runtime type of keyHolder must be T. Otherwise this
            operation throws <see cref="T:System.InvalidCastException"/>.
            </param>
            <returns>
            The obtained key values.
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriter`1.CreateData">
            <summary>
            Creates a data sample for the type of this DataWriter.
            </summary>
            <remarks>@dref_details_FooDataWriter_create_data</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriter`1.ToString">
            <summary>
            Provides a readable summary of information about this DataWriter.
            </summary>
        </member>
        <member name="T:Rti.Dds.Publication.DataWriterQos">
            <summary>
            Container of the QoS policies that a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> supports
            </summary>
            <remarks>@dref_details_DataReaderQos</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.Durability">
            <summary>
            Gets the <see cref="P:Rti.Dds.Publication.DataWriterQos.Durability"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.DurabilityService">
            <summary>
            Gets the <see cref="P:Rti.Dds.Publication.DataWriterQos.DurabilityService"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.Deadline">
            <summary>
            Gets the <see cref="P:Rti.Dds.Publication.DataWriterQos.Deadline"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.LatencyBudget">
            <summary>
            Gets the <see cref="P:Rti.Dds.Publication.DataWriterQos.LatencyBudget"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.Liveliness">
            <summary>
            Gets the <see cref="P:Rti.Dds.Publication.DataWriterQos.Liveliness"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.Reliability">
            <summary>
            Gets the <see cref="P:Rti.Dds.Publication.DataWriterQos.Reliability"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.DestinationOrder">
            <summary>
            Gets the <see cref="P:Rti.Dds.Publication.DataWriterQos.DestinationOrder"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.History">
            <summary>
            Gets the <see cref="P:Rti.Dds.Publication.DataWriterQos.History"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.ResourceLimits">
            <summary>
            Gets the <see cref="P:Rti.Dds.Publication.DataWriterQos.ResourceLimits"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.TransportPriority">
            <summary>
            Gets the <see cref="P:Rti.Dds.Publication.DataWriterQos.TransportPriority"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.Lifespan">
            <summary>
            Gets the <see cref="P:Rti.Dds.Publication.DataWriterQos.Lifespan"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.UserData">
            <summary>
            Gets the <see cref="P:Rti.Dds.Publication.DataWriterQos.UserData"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.Ownership">
            <summary>
            Gets the <see cref="P:Rti.Dds.Publication.DataWriterQos.Ownership"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.OwnershipStrength">
            <summary>
            Gets the <see cref="P:Rti.Dds.Publication.DataWriterQos.OwnershipStrength"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.WriterDataLifecycle">
            <summary>
            Gets the <see cref="P:Rti.Dds.Publication.DataWriterQos.WriterDataLifecycle"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.Representation">
            <summary>
            Gets the <see cref="T:Rti.Dds.Core.Policy.DataRepresentation"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.DataTags">
            <summary>
            Gets the <see cref="P:Rti.Dds.Publication.DataWriterQos.DataTags"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.WriterResourceLimits">
            <summary>
            @extension Gets the <see cref="T:Rti.Dds.Core.Policy.DataWriterResourceLimits"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.Protocol">
            <summary>
            @extension Gets the <see cref="T:Rti.Dds.Core.Policy.DataWriterProtocol"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.TransportSelection">
            <summary>
            @extension Gets the <see cref="P:Rti.Dds.Publication.DataWriterQos.TransportSelection"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.Unicast">
            <summary>
            @extension Gets the <see cref="T:Rti.Dds.Core.Policy.TransportUnicast"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.PublishMode">
            <summary>
            @extension Gets the <see cref="P:Rti.Dds.Publication.DataWriterQos.PublishMode"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.Property">
            <summary>
            @extension Gets the <see cref="P:Rti.Dds.Publication.DataWriterQos.Property"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.Service">
            <summary>
            @extension Gets the <see cref="P:Rti.Dds.Publication.DataWriterQos.Service"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.Batch">
            <summary>
            @extension Gets the <see cref="P:Rti.Dds.Publication.DataWriterQos.Batch"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.MultiChannel">
            <summary>
            @extension Gets the <see cref="P:Rti.Dds.Publication.DataWriterQos.MultiChannel"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.Availability">
            <summary>
            @extension Gets the <see cref="P:Rti.Dds.Publication.DataWriterQos.Availability"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.PublicationName">
            <summary>
            @extension Gets the <see cref="T:Rti.Dds.Core.Policy.EntityName"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.TopicQueryDispatch">
            <summary>
            @extension Gets the <see cref="P:Rti.Dds.Publication.DataWriterQos.TopicQueryDispatch"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.TypeSupport">
            <summary>
            @extension Gets the <see cref="P:Rti.Dds.Publication.DataWriterQos.TypeSupport"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.DataWriterQos.Default">
            <summary>
            Singleton containing the documented default value of a DataWriterQos
            </summary>
            <remarks>
            This is a static value containing the documented default values for each policy.
            Use <see cref="P:Rti.Dds.Domain.DomainParticipant.DefaultDataWriterQos"/> for the runtime
            default value that takes into consideration the current configuration.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithDurability(Rti.Dds.Core.Policy.Durability)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.Durability"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithDurability(System.Action{Rti.Dds.Core.Policy.DurabilityBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.Durability"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithDurabilityService(Rti.Dds.Core.Policy.DurabilityService)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.DurabilityService"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithDurabilityService(System.Action{Rti.Dds.Core.Policy.DurabilityServiceBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.DurabilityService"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithDeadline(Rti.Dds.Core.Policy.Deadline)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.Deadline"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithDeadline(System.Action{Rti.Dds.Core.Policy.DeadlineBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.Deadline"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithLatencyBudget(Rti.Dds.Core.Policy.LatencyBudget)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.LatencyBudget"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithLatencyBudget(System.Action{Rti.Dds.Core.Policy.LatencyBudgetBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.LatencyBudget"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithLiveliness(Rti.Dds.Core.Policy.Liveliness)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.Liveliness"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithLiveliness(System.Action{Rti.Dds.Core.Policy.LivelinessBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.Liveliness"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithReliability(Rti.Dds.Core.Policy.Reliability)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.Reliability"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithReliability(System.Action{Rti.Dds.Core.Policy.ReliabilityBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.Reliability"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithDestinationOrder(Rti.Dds.Core.Policy.DestinationOrder)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.DestinationOrder"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithDestinationOrder(System.Action{Rti.Dds.Core.Policy.DestinationOrderBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.DestinationOrder"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithHistory(Rti.Dds.Core.Policy.History)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.History"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithHistory(System.Action{Rti.Dds.Core.Policy.HistoryBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.History"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithResourceLimits(Rti.Dds.Core.Policy.ResourceLimits)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.ResourceLimits"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithResourceLimits(System.Action{Rti.Dds.Core.Policy.ResourceLimitsBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.ResourceLimits"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithTransportPriority(Rti.Dds.Core.Policy.TransportPriority)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.TransportPriority"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithTransportPriority(System.Action{Rti.Dds.Core.Policy.TransportPriorityBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.TransportPriority"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithLifespan(Rti.Dds.Core.Policy.Lifespan)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.Lifespan"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithLifespan(System.Action{Rti.Dds.Core.Policy.LifespanBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.Lifespan"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithUserData(Rti.Dds.Core.Policy.UserData)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.UserData"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithUserData(System.Action{System.Collections.Immutable.ImmutableList{System.Byte}.Builder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.UserData"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithOwnership(Rti.Dds.Core.Policy.Ownership)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.Ownership"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithOwnership(System.Action{Rti.Dds.Core.Policy.OwnershipBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.Ownership"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithOwnershipStrength(Rti.Dds.Core.Policy.OwnershipStrength)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.OwnershipStrength"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithOwnershipStrength(System.Action{Rti.Dds.Core.Policy.OwnershipStrengthBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.OwnershipStrength"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithWriterDataLifecycle(Rti.Dds.Core.Policy.WriterDataLifecycle)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.WriterDataLifecycle"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithWriterDataLifecycle(System.Action{Rti.Dds.Core.Policy.WriterDataLifecycleBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.WriterDataLifecycle"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithRepresentation(Rti.Dds.Core.Policy.DataRepresentation)">
            <summary>
            Creates an instance with a new <see cref="T:Rti.Dds.Core.Policy.DataRepresentation"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithRepresentation(System.Action{Rti.Dds.Core.Policy.DataRepresentationBuilder})">
            <summary>
            Creates a new instance with a new <see cref="T:Rti.Dds.Core.Policy.DataRepresentation"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithDataTags(Rti.Dds.Core.Policy.DataTags)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.DataTags"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithDataTags(System.Action{System.Collections.Immutable.ImmutableDictionary{System.String,System.String}.Builder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.DataTags"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithWriterResourceLimits(Rti.Dds.Core.Policy.DataWriterResourceLimits)">
            <summary>
            Creates an instance with a new <see cref="T:Rti.Dds.Core.Policy.DataWriterResourceLimits"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithWriterResourceLimits(System.Action{Rti.Dds.Core.Policy.DataWriterResourceLimitsBuilder})">
            <summary>
            Creates a new instance with a new <see cref="T:Rti.Dds.Core.Policy.DataWriterResourceLimits"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithProtocol(Rti.Dds.Core.Policy.DataWriterProtocol)">
            <summary>
            Creates an instance with a new <see cref="T:Rti.Dds.Core.Policy.DataWriterProtocol"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithProtocol(System.Action{Rti.Dds.Core.Policy.DataWriterProtocolBuilder})">
            <summary>
            Creates a new instance with a new <see cref="T:Rti.Dds.Core.Policy.DataWriterProtocol"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithTransportSelection(Rti.Dds.Core.Policy.TransportSelection)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.TransportSelection"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithTransportSelection(System.Action{Rti.Dds.Core.Policy.TransportSelectionBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.TransportSelection"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithUnicast(Rti.Dds.Core.Policy.TransportUnicast)">
            <summary>
            Creates an instance with a new <see cref="T:Rti.Dds.Core.Policy.TransportUnicast"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithUnicast(System.Action{System.Collections.Immutable.ImmutableList{Rti.Dds.Core.Policy.TransportUnicastSettings}.Builder})">
            <summary>
            Creates a new instance with a new <see cref="T:Rti.Dds.Core.Policy.TransportUnicast"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithPublishMode(Rti.Dds.Core.Policy.PublishMode)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.PublishMode"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithPublishMode(System.Action{Rti.Dds.Core.Policy.PublishModeBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.PublishMode"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithProperty(Rti.Dds.Core.Policy.Property)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.Property"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithProperty(System.Action{System.Collections.Immutable.ImmutableDictionary{System.String,Rti.Dds.Core.Policy.Property.Entry}.Builder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.Property"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithService(Rti.Dds.Core.Policy.Service)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.Service"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithService(System.Action{Rti.Dds.Core.Policy.ServiceBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.Service"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithBatch(Rti.Dds.Core.Policy.Batch)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.Batch"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithBatch(System.Action{Rti.Dds.Core.Policy.BatchBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.Batch"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithMultiChannel(Rti.Dds.Core.Policy.MultiChannel)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.MultiChannel"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithMultiChannel(System.Action{Rti.Dds.Core.Policy.MultiChannelBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.MultiChannel"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithAvailability(Rti.Dds.Core.Policy.Availability)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.Availability"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithAvailability(System.Action{Rti.Dds.Core.Policy.AvailabilityBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.Availability"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithPublicationName(Rti.Dds.Core.Policy.EntityName)">
            <summary>
            Creates an instance with a new <see cref="T:Rti.Dds.Core.Policy.EntityName"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithPublicationName(System.Action{Rti.Dds.Core.Policy.EntityNameBuilder})">
            <summary>
            Creates a new instance with a new <see cref="T:Rti.Dds.Core.Policy.EntityName"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithTopicQueryDispatch(Rti.Dds.Core.Policy.TopicQueryDispatch)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.TopicQueryDispatch"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithTopicQueryDispatch(System.Action{Rti.Dds.Core.Policy.TopicQueryDispatchBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.TopicQueryDispatch"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithTypeSupport(Rti.Dds.Core.Policy.TypeSupport)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.TypeSupport"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.WithTypeSupport(System.Action{Rti.Dds.Core.Policy.TypeSupportBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.DataWriterQos.TypeSupport"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.FromTopicQos(Rti.Dds.Topics.TopicQos)">
            <summary>
            Creates a DataWriterQos object with the policies of a TopicQos object.
            </summary>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.Equals(Rti.Dds.Publication.DataWriterQos)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.ToString">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <remarks>
            The output is formatted using the default values for the
            <see cref="T:Rti.Dds.Core.QosPrintFormat"/> and only QoS policies which differ
            from the documented default are included.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.ToString(Rti.Dds.Core.QosPrintFormat)">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <param name="format">The baseQos profile.</param>
            <remarks>
            This overload accepts a value for the baseQos. Only the differences
            between the <see cref="T:Rti.Dds.Publication.DataWriterQos"/> object being printed and
            the baseQos are included in the output.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.ToString(Rti.Dds.Publication.DataWriterQos,Rti.Dds.Core.QosPrintFormat)">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <param name="baseQos">The baseQos profile.</param>
            <param name="format">the format used to configure the output. If not
            supplied the output is formatted using the default format.</param>
            <remarks>
            This overload accepts a value for the baseQos. Only the differences
            between the <see cref="T:Rti.Dds.Publication.DataWriterQos"/> object being printed and
            the baseQos are included in the output.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Publication.DataWriterQos.ToString(Rti.Dds.Core.QosPrintAll,Rti.Dds.Core.QosPrintFormat)">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <param name="baseQos">Used to indicate that the entire QoS object
            should be included in the output. The only value which should
            be provided for this argument is QosPrintAll.Value</param>
            <param name="format">The format used to configure the output. If not
            supplied, the output is formatted using the default format.</param>
            <remarks>
            This overload accepts a parameter of type <see cref="T:Rti.Dds.Core.QosPrintAll"/>.
            Unlike the other ToString overloads, the entire QoS object will be
            included in the output.
            </remarks>
        </member>
        <member name="T:Rti.Dds.Publication.Publisher">
            <summary>
            A publisher is the object responsible for the actual dissemination of
            publications.
            </summary>
            <remarks>@dref_details_Publisher</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.Publisher.DefaultDataWriterQos">
            <summary>
            Get or change the default <see cref="T:Rti.Dds.Publication.DataWriterQos"/> used by
            </summary>
            <remarks>@dref_details_Publisher_get_default_datawriter_qos</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.Publisher.DataWriters">
            <summary>
            Retrieve all the writers created by this publisher
            </summary>
            <remarks>@dref_details_Publisher_get_all_datawriters</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.Publisher.LookupDataWriter``1(System.String)">
            <summary>
            Retrieves a writer for a specific topic.
            </summary>
            <returns>The writer if it exists or null if it doesn't</returns>
            <remarks>@dref_details_Publisher_lookup_datawriter</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.Publisher.LookupDataWriter(System.String)">
            <summary>
            Retrieves a writer for a specific topic.
            </summary>
            <returns>The writer if it exists or null if it doesn't</returns>
            <remarks>@dref_details_Publisher_lookup_datawriter</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.Publisher.LookupDataWriterByName(System.String)">
            <summary>
            Retrieves a writer by its name
            </summary>
            <remarks>@dref_details_Publisher_lookup_datawriter_by_name</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.Publisher.Qos">
            <summary>
            Gets or sets the publisher QoS.
            </summary>
            <remarks>@dref_details_Publisher_set_qos</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.Publisher.DomainParticipant">
            <summary>
            Returns the <see cref="P:Rti.Dds.Publication.Publisher.DomainParticipant"/> to which this publisher
            belongs.
            </summary>
            <remarks>@dref_details_Publisher_get_participant</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.Publisher.CreateDataWriter``1(Rti.Dds.Topics.Topic{``0})">
            <summary>
            Creates a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> that will be attached and belong
            to this publisher.
            </summary>
            <remarks>@dref_details_Publisher_create_datawriter</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.Publisher.CreateDataWriter``1(Rti.Dds.Topics.Topic{``0},Rti.Dds.Publication.DataWriterQos)">
            <summary>
            Creates a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> that will be attached and belong
            to this publisher.
            </summary>
            <remarks>@dref_details_Publisher_create_datawriter</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.Publisher.CreateDataWriter``1(Rti.Dds.Topics.Topic{``0},System.Action{Rti.Dds.Publication.DataWriter{``0}})">
            <summary>
            Creates a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> that will be attached and belong
            to this publisher.
            </summary>
            <param name="topic">The <see cref="T:Rti.Dds.Topics.Topic`1"/> that
            the writer will be associated with.
            </param>
            <param name="preEnableAction">An action that allows adding handlers
            to writer events before the writer is enabled.
            </param>
        </member>
        <member name="M:Rti.Dds.Publication.Publisher.CreateDataWriter``1(Rti.Dds.Topics.Topic{``0},Rti.Dds.Publication.DataWriterQos,System.Action{Rti.Dds.Publication.DataWriter{``0}})">
            <summary>
            Creates a <see cref="T:Rti.Dds.Publication.DataWriter`1"/> that will be attached and belong
            to this publisher.
            </summary>
            <param name="topic">The <see cref="T:Rti.Dds.Topics.Topic`1"/> that
            the writer will be associated with.
            </param>
            <param name="qos">The quality of service</param>
            <param name="preEnableAction">An action that allows adding handlers
            to writer events before the writer is enabled.
            </param>
        </member>
        <member name="M:Rti.Dds.Publication.Publisher.CreateDataWriter(Rti.Dds.Topics.IAnyTopic,Rti.Dds.Publication.DataWriterQos)">
            <summary>
            Creates a DataWriter that will be attached and belong to this Publisher,
            without knowing the type at compile time.
            </summary>
        </member>
        <member name="M:Rti.Dds.Publication.Publisher.CreateDataWriter(Rti.Dds.Topics.IAnyTopic)">
            <summary>
            Creates a DataWriter that will be attached and belong to this Publisher,
            without knowing the type at compile time.
            </summary>
        </member>
        <member name="M:Rti.Dds.Publication.Publisher.DisposeContainedEntities">
            <summary>
            Disposes all the entities that were created by this <see cref="T:Rti.Dds.Publication.Publisher"/>.
            </summary>
            <remarks>@dref_details_Publisher_delete_contained_entities</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.Publisher.ResetEvents(Rti.Dds.Core.Status.StatusMask)">
            <summary>
            Stop notifying of events not selected in the newMask and remove
            their event handlers.
            </summary>
            <param name="newMask">
            Selects which events will continue to receive notifications.
            Events not included in the status mask will no longer be notified.
            Use StatusMask.None to remove all event handlers.
            </param>
            <remarks>
            @warning This method has no effect on a Publisher.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Publication.Publisher.BeginCoherentChanges">
            <summary>
            Indicates that a coherent set of modifications is going to be performed
            using <see cref="T:Rti.Dds.Publication.DataWriter`1"/> objects belonging to this publisher.
            </summary>
            <returns>An object whose disposal indicates the end of the coherent set</returns>
            <example>
            <code>
            using (publisher.BeginCoherentChanges())
            {
                writer1.Write(sample1);
                writer1.Write(sample2);
                writer2.Write(sample3); // writer1 and writer2 belong to publisher
            } // end of coherent set
            </code>
            </example>
            <remarks>@dref_details_Publisher_begin_coherent_changes</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.Publisher.EndCoherentChanges">
            <summary>
            Ends a coherent set of changes
            (alternative to <see cref="M:Rti.Dds.Publication.CoherentSet.Dispose"/>)
            </summary>
            <remarks>@dref_details_Publisher_end_coherent_changes</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.Publisher.SuspendPublications">
            <summary>
            Indicates that the application is about to make multiple
            modifications using <see cref="T:Rti.Dds.Publication.DataWriter`1"/> objects belonging
            this publisher.
            </summary>
            <returns>An object whose disposal indicates the end of the suspension</returns>
            <remarks>@dref_details_Publisher_suspend_publications</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.Publisher.ResumePublications">
            <summary>
            Indicates that the application has completed the multiple changes
            initiated by the previous call to <see cref="M:Rti.Dds.Publication.Publisher.SuspendPublications"/>
            (alternative to <see cref="M:Rti.Dds.Publication.SuspendedPublication.Dispose"/>)
            </summary>
            <remarks>@dref_details_Publisher_resume_publications</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.Publisher.WaitForAcknowledgments(Omg.Dds.Core.Duration)">
            <summary>
            Blocks the calling thread until all data written by the Publisher's reliable DataWriters is acknowledged, or until timeout expires.
            </summary>
            <remarks>@dref_details_Publisher_wait_for_acknowledgments</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.Publisher.WaitForAsynchronousPublishing(Omg.Dds.Core.Duration)">
            <summary>
            @extension Blocks the calling thread until asynchronous sending is complete.
            </summary>
            <remarks>@dref_details_Publisher_wait_for_asynchronous_publishing</remarks>
        </member>
        <member name="T:Rti.Dds.Publication.CoherentSet">
            <summary>
            A disposable object returned when a coherent set begins with
            <see cref="M:Rti.Dds.Publication.Publisher.BeginCoherentChanges"/> and whose
            <see cref="M:Rti.Dds.Publication.CoherentSet.Dispose"/> method ends it.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.CoherentSet.RelatedPublisher">
            <summary>
            The publisher that started this coherent set
            </summary>
        </member>
        <member name="M:Rti.Dds.Publication.CoherentSet.Dispose">
            <summary>
            Ends this coherent set
            </summary>
        </member>
        <member name="T:Rti.Dds.Publication.SuspendedPublication">
            <summary>
            A disposable object returned when a publication is temporarily suspended
            with <see cref="M:Rti.Dds.Publication.Publisher.SuspendPublications"/> and whose
            <see cref="M:Rti.Dds.Publication.SuspendedPublication.Dispose"/> method resumes it.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.SuspendedPublication.RelatedPublisher">
            <summary>
            The publisher that was suspended
            </summary>
        </member>
        <member name="M:Rti.Dds.Publication.SuspendedPublication.Dispose">
            <summary>
            Ends the temporary suspension (resumes it)
            </summary>
        </member>
        <member name="T:Rti.Dds.Publication.PublisherQos">
            <summary>
            QoS policies supported by a <see cref="T:Rti.Dds.Publication.Publisher"/>.
            </summary>
            <remarks>@dref_details_PublisherQos</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.PublisherQos.Default">
            <summary>
            Singleton containing the documented default value of a PublisherQos
            </summary>
            <remarks>
            This is a static value containing the documented default values for each policy.
            Use <see cref="P:Rti.Dds.Domain.DomainParticipant.DefaultPublisherQos"/> for the runtime
            default value that takes into consideration the current configuration.
            </remarks>
        </member>
        <member name="P:Rti.Dds.Publication.PublisherQos.Presentation">
            <summary>
            Gets the <see cref="P:Rti.Dds.Publication.PublisherQos.Presentation"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.PublisherQos.Partition">
            <summary>
            Gets the <see cref="P:Rti.Dds.Publication.PublisherQos.Partition"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.PublisherQos.GroupData">
            <summary>
            Gets the <see cref="P:Rti.Dds.Publication.PublisherQos.GroupData"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.PublisherQos.EntityFactory">
            <summary>
            Gets the <see cref="P:Rti.Dds.Publication.PublisherQos.EntityFactory"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.PublisherQos.AsynchronousPublisher">
            <summary>
            Gets the <see cref="P:Rti.Dds.Publication.PublisherQos.AsynchronousPublisher"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.PublisherQos.ExclusiveArea">
            <summary>
            Gets the <see cref="P:Rti.Dds.Publication.PublisherQos.ExclusiveArea"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.PublisherQos.PublisherName">
            <summary>
            Gets the <see cref="T:Rti.Dds.Core.Policy.EntityName"/> policy.
            </summary>
        </member>
        <member name="M:Rti.Dds.Publication.PublisherQos.WithPresentation(Rti.Dds.Core.Policy.Presentation)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.PublisherQos.Presentation"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.PublisherQos.WithPresentation(System.Action{Rti.Dds.Core.Policy.PresentationBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.PublisherQos.Presentation"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.PublisherQos.WithPartition(Rti.Dds.Core.Policy.Partition)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.PublisherQos.Partition"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.PublisherQos.WithPartition(System.Action{System.Collections.Immutable.ImmutableList{System.String}.Builder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.PublisherQos.Partition"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.PublisherQos.WithGroupData(Rti.Dds.Core.Policy.GroupData)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.PublisherQos.GroupData"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.PublisherQos.WithGroupData(System.Action{System.Collections.Immutable.ImmutableList{System.Byte}.Builder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.PublisherQos.GroupData"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.PublisherQos.WithEntityFactory(Rti.Dds.Core.Policy.EntityFactory)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.PublisherQos.EntityFactory"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.PublisherQos.WithAsynchronousPublisher(Rti.Dds.Core.Policy.AsynchronousPublisher)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.PublisherQos.AsynchronousPublisher"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.PublisherQos.WithAsynchronousPublisher(System.Action{Rti.Dds.Core.Policy.AsynchronousPublisherBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.PublisherQos.AsynchronousPublisher"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.PublisherQos.WithExclusiveArea(Rti.Dds.Core.Policy.ExclusiveArea)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.PublisherQos.ExclusiveArea"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.PublisherQos.WithExclusiveArea(System.Action{Rti.Dds.Core.Policy.ExclusiveAreaBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.PublisherQos.ExclusiveArea"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.PublisherQos.WithPublisherName(Rti.Dds.Core.Policy.EntityName)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Publication.PublisherQos.PublisherName"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.PublisherQos.WithPublisherName(System.Action{Rti.Dds.Core.Policy.EntityNameBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Publication.PublisherQos.PublisherName"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Publication.PublisherQos.Equals(Rti.Dds.Publication.PublisherQos)">
            <summary>
            Compares all the policies for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Publication.PublisherQos.GetHashCode">
            <summary>
            Returns the hash code by combining that of each policy
            </summary>
        </member>
        <member name="M:Rti.Dds.Publication.PublisherQos.Equals(System.Object)">
            <summary>
            Compares all the policies for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Publication.PublisherQos.ToString">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <remarks>
            The output is formatted using the default values for the
            <see cref="T:Rti.Dds.Core.QosPrintFormat"/> and only QoS policies which differ
            from the documented default are included.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Publication.PublisherQos.ToString(Rti.Dds.Core.QosPrintFormat)">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <param name="format">The baseQos profile.</param>
            <remarks>
            This overload accepts a value for the baseQos. Only the differences
            between the <see cref="T:Rti.Dds.Publication.PublisherQos"/> object being printed and
            the baseQos are included in the output.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Publication.PublisherQos.ToString(Rti.Dds.Publication.PublisherQos,Rti.Dds.Core.QosPrintFormat)">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <param name="baseQos">The baseQos profile.</param>
            <param name="format">the format used to configure the output. If not
            supplied the output is formatted using the default format.</param>
            <remarks>
            This overload accepts a value for the baseQos. Only the differences
            between the <see cref="T:Rti.Dds.Publication.PublisherQos"/> object being printed and
            the baseQos are included in the output.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Publication.PublisherQos.ToString(Rti.Dds.Core.QosPrintAll,Rti.Dds.Core.QosPrintFormat)">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <param name="baseQos">Used to indicate that the entire QoS object
            should be included in the output. The only value which should
            be provided for this argument is QosPrintAll.Value</param>
            <param name="format">The format used to configure the output. If not
            supplied, the output is formatted using the default format.</param>
            <remarks>
            This overload accepts a parameter of type <see cref="T:Rti.Dds.Core.QosPrintAll"/>.
            Unlike the other ToString overloads, the entire QoS object will be
            included in the output.
            </remarks>
        </member>
        <member name="T:Rti.Dds.Publication.WriteParams">
            <summary>
            Additional parameters for the <see cref="T:Rti.Dds.Publication.DataWriter`1"/> operations that
            write data or dispose, register or unregister an instance.
            </summary>
        </member>
        <member name="P:Rti.Dds.Publication.WriteParams.ReplaceAuto">
            <summary>
            Allows retrieving the actual value of those fields that were automatic
            </summary>
            <remarks>@dref_details_WriteParams_replace_auto</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.WriteParams.Identity">
            <summary>
            Identity of the sample.
            </summary>
            <remarks>@dref_details_WriteParams_identity</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.WriteParams.RelatedSampleIdentity">
            <summary>
            The identity of another sample related to this one
            </summary>
            <remarks>@dref_details_WriteParams_related_sample_identity</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.WriteParams.SourceTimestamp">
            <summary>
            Source timestamp upon write
            </summary>
            <remarks>@dref_details_WriteParams_source_timestamp</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.WriteParams.Cookie">
            <summary>
            Octet sequence identifying written data sample
            </summary>
            <remarks>@dref_details_WriteParams_cookie</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.WriteParams.InstanceHandle">
            <summary>
            Instance handle
            </summary>
            <remarks>@dref_details_WriteParams_handle</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.WriteParams.Priority">
            <summary>
            Publication priority
            </summary>
            <remarks>
            <para>
            @see <see cref="T:Rti.Dds.Core.Priority"/> for special values
            </para>
            <para>
            @dref_details_WriteParams_priority
            </para>
            </remarks>
        </member>
        <member name="P:Rti.Dds.Publication.WriteParams.Flag">
            <summary>
            Flags associated with the sample.
            </summary>
            <remarks>@dref_details_WriteParams_flag</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.WriteParams.SourceGuid">
            <summary>
            Identifies the application logical data source associated with the sample being written.
            </summary>
            <remarks>@dref_details_WriteParams_source_guid</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.WriteParams.RelatedSourceGuid">
            <summary>
            Identifies the application logical data source that is related to the sample being written.
            </summary>
            <remarks>@dref_details_WriteParams_related_source_guid</remarks>
        </member>
        <member name="P:Rti.Dds.Publication.WriteParams.RelatedReaderGuid">
            <summary>
            Identifies a DataReader that is logically related to the sample that is being written.
            </summary>
            <remarks>@dref_details_WriteParams_related_reader_guid</remarks>
        </member>
        <member name="M:Rti.Dds.Publication.WriteParams.Equals(Rti.Dds.Publication.WriteParams)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Publication.WriteParams.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Publication.WriteParams.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="T:Rti.Dds.Subscription.AckResponseData">
            <summary>
            Data payload associated with an application-level acknowledgment.
            </summary>
            <remarks>@dref_details_AckResponseData_t</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.AckResponseData.Value">
            <summary>
            A sequence of bytes.
            </summary>
            <remarks>@dref_details_AckResponseData_t_value</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.AckResponseData.Empty">
            <summary>
            Creates a new empty AckResponseData instance.
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.AckResponseData.#ctor(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Creates a new AckResponseData instance with the bytes inside a container.
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.AckResponseData.#ctor(System.Collections.Immutable.ImmutableList{System.Byte})">
            <summary>
            Creates an AckResponseData object from a list of bytes.
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.AckResponseData.With(System.Action{System.Collections.Immutable.ImmutableList{System.Byte}.Builder})">
            <summary>
            Creates a new AckResponseData with a set of changes specified in an Action
            </summary>
            <param name="build">
            An Action (typically a lambda function) that receives a modifiable
            list with the current values of this object's <see cref="P:Rti.Dds.Subscription.AckResponseData.Value"/>.
            </param>
            <returns>A new AckResponseData with the changes applied by the Action</returns>
        </member>
        <member name="M:Rti.Dds.Subscription.AckResponseData.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.AckResponseData.Equals(System.Object)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.AckResponseData.Equals(Rti.Dds.Subscription.AckResponseData)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="T:Rti.Dds.Subscription.AnyDataReader">
            <summary>
            The base of a typed <see cref="T:Rti.Dds.Subscription.DataReader`1"/>. Provides type-independent
            methods and properties.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.AnyDataReader.Qos">
            <summary>
            Gets or sets the reader QoS.
            </summary>
            <remarks>@dref_details_DataReader_set_qos</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.AnyDataReader.Subscriber">
            <summary>
            Returns the Subscriber to which the DataReader belongs.
            </summary>
            <remarks>@dref_details_DataReader_get_subscriber</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.AnyDataReader.TopicDescription">
            <summary>
            Returns the TopicDescription associated with this DataReader.
            </summary>
            <remarks>@dref_details_DataReader_get_topicdescription</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.AnyDataReader.SubscriptionMatchedStatus">
            <summary>
            Retrieve the <see cref="F:Rti.Dds.Core.Status.StatusMask.SubscriptionMatched" />
            status.
            </summary>
            <remarks>@dref_details_DataReader_get_subscription_matched_status</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.AnyDataReader.LivelinessChangedStatus">
            <summary>
            Retrieve the <see cref="F:Rti.Dds.Core.Status.StatusMask.LivelinessChanged" />
            status.
            </summary>
            <remarks>@dref_details_DataReader_get_liveliness_changed_status</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.AnyDataReader.RequestedDeadlineMissedStatus">
            <summary>
            Retrieve the <see cref="F:Rti.Dds.Core.Status.StatusMask.RequestedDeadlineMissed" />
            status.
            </summary>
            <remarks>@dref_details_DataReader_get_requested_deadline_missed_status</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.AnyDataReader.RequestedIncompatibleQosStatus">
            <summary>
            Retrieve the <see cref="F:Rti.Dds.Core.Status.StatusMask.RequestedIncompatibleQos" />
            status.
            </summary>
            <remarks>@dref_details_DataReader_get_requested_incompatible_qos_status</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.AnyDataReader.SampleLostStatus">
            <summary>
            Retrieve the <see cref="F:Rti.Dds.Core.Status.StatusMask.SampleLost" />
            status.
            </summary>
            <remarks>@dref_details_DataReader_get_sample_lost_status</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.AnyDataReader.SampleRejectedStatus">
            <summary>
            Retrieve the <see cref="F:Rti.Dds.Core.Status.StatusMask.SampleRejected" />
            status.
            </summary>
            <remarks>@dref_details_DataReader_get_sample_rejected_status</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.AnyDataReader.DataReaderCacheStatus">
            <summary>
            Retrieve the <see cref="F:Rti.Dds.Core.Status.StatusMask.DataReaderCache" />
            status.
            </summary>
            <remarks>@dref_details_DataReader_get_datareader_cache_status</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.AnyDataReader.DataReaderProtocolStatus">
            <summary>
            Retrieve the <see cref="F:Rti.Dds.Core.Status.StatusMask.DataReaderProtocol" />
            status.
            </summary>
            <remarks>@dref_details_DataReader_get_datareader_protocol_status</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.AnyDataReader.MatchedPublications">
            <summary>
            Retrieves the list of publications currently "associated" with this
            DataReader.
            </summary>
            <remarks>@dref_details_DataReader_get_matched_publications</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.AnyDataReader.CreateReadCondition(Omg.Dds.Subscription.DataState)">
            <summary>
            Creates a ReadCondition.
            </summary>
            <remarks>@dref_details_DataReader_create_readcondition</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.AnyDataReader.CreateQueryCondition(Rti.Dds.Subscription.Filter,Omg.Dds.Subscription.DataState)">
            <summary>
            Creates a QueryCondition with a filter and a data state.
            </summary>
            <remarks>@dref_details_DataReader_create_querycondition</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.AnyDataReader.CreateQueryCondition(Rti.Dds.Subscription.Filter)">
            <summary>
            Creates a QueryCondition with <see cref="P:Omg.Dds.Subscription.DataState.Any" />.
            </summary>
            <remarks>@dref_details_DataReader_create_querycondition</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.AnyDataReader.GetMatchedPublicationData(Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Retrieves the information on a publication that is currently
            "associated" with this DataReader.
            </summary>
            <remarks>@dref_details_DataReader_get_matched_publication_data</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.AnyDataReader.GetMatchedPublicationData">
            <summary>
            Retrieves the information on all publications that are currently
            "associated" with this DataReader.
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.AnyDataReader.GetMatchedPublicationParticipantData(Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Retrieves the information on the discovered <see cref="T:Rti.Dds.Domain.DomainParticipant"/>
            associated with the publication that is currently matching with the <see cref="T:Rti.Dds.Subscription.DataReader`1"/>
            </summary>
            <remarks>@dref_details_DataReader_get_matched_publication_participant_data</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.AnyDataReader.AcknowledgeAll">
            <summary>
            @extension Acknowledges all previously accessed samples.
            </summary>
            <remarks>@dref_details_DataReader_acknowledge_all</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.AnyDataReader.AcknowledgeAll(Rti.Dds.Subscription.AckResponseData)">
            <summary>
            @extension Acknowledges all previously accessed samples with a response.
            </summary>
            <remarks>@dref_details_DataReader_acknowledge_all_w_response</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.AnyDataReader.AcknowledgeSample(Rti.Dds.Subscription.SampleInfo)">
            <summary>
            @extension Acknowledges a single sample explicitly.
            </summary>
            <remarks>@dref_details_DataReader_acknowledge_sample</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.AnyDataReader.AcknowledgeSample(Rti.Dds.Subscription.SampleInfo,Rti.Dds.Subscription.AckResponseData)">
            <summary>
            @extension Acknowledges a single sample explicitly with a response.
            </summary>
            <remarks>@dref_details_DataReader_acknowledge_sample_w_response</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.AnyDataReader.AcknowledgeSample(Rti.Dds.Core.SampleIdentity)">
            <summary>
            @extension Acknowledges a single sample explicitly.
            </summary>
            <remarks>
            The <see cref="T:Rti.Dds.Core.SampleIdentity"/> from a specific <see cref="T:Rti.Dds.Subscription.LoanedSample`1"/>
            can be obtained from its <see cref="T:Rti.Dds.Subscription.SampleInfo"/>.
            This method is equivalent to <see cref="M:Rti.Dds.Subscription.AnyDataReader.AcknowledgeSample(Rti.Dds.Subscription.SampleInfo)"/>,
            but can be used with a previously stored <see cref="T:Rti.Dds.Core.SampleIdentity"/> when the
            specific <see cref="T:Rti.Dds.Subscription.LoanedSample`1"/> has already been disposed.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.AnyDataReader.AcknowledgeSample(Rti.Dds.Core.SampleIdentity,Rti.Dds.Subscription.AckResponseData)">
            <summary>
            @extension Acknowledges a single sample explicitly with a response.
            </summary>
            <remarks>
            The <see cref="T:Rti.Dds.Core.SampleIdentity"/> from a specific <see cref="T:Rti.Dds.Subscription.LoanedSample`1"/>
            can be obtained from its <see cref="T:Rti.Dds.Subscription.SampleInfo"/>.
            This method is equivalent to <see cref="M:Rti.Dds.Subscription.AnyDataReader.AcknowledgeSample(Rti.Dds.Subscription.SampleInfo,Rti.Dds.Subscription.AckResponseData)"/>,
            but can be used with a previously stored <see cref="T:Rti.Dds.Core.SampleIdentity"/> when the
            specific <see cref="T:Rti.Dds.Subscription.LoanedSample`1"/> has already been disposed.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.AnyDataReader.GetMatchedPublicationDataReaderProtocolStatus(Rti.Dds.Core.InstanceHandle@)">
            <summary>
            @extension Gets the <see cref="P:Rti.Dds.Subscription.AnyDataReader.DataReaderProtocolStatus"/> for
            this reader, per matched publication identified by its <see cref="T:Rti.Dds.Core.InstanceHandle"/>.
            </summary>
            <remarks>@dref_details_DataReader_get_matched_publication_datareader_protocol_status</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.AnyDataReader.IsMatchedPublicationAlive(Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Check if a publication currently matched with this reader is alive.
            </summary>
            <remarks>@dref_details_DataReader_is_matched_publication_alive</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.AnyDataReader.WaitForHistoricalData(Omg.Dds.Core.Duration@)">
            <summary>
            Waits until all "historical" data is received if the reader
            was configured with a non-Volatile <see cref="T:Omg.Dds.Core.Policy.DurabilityKind"/>.
            </summary>
            <remarks>@dref_details_DataReader_wait_for_historical_data</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.AnyDataReader.ReadUntyped">
            <summary>
            Allows calling <see cref="M:Rti.Dds.Subscription.DataReader`1.Read"/> in a context where
            the type is not known.
            </summary>
            <returns>
            A collection equivalent to the one returned by
            <see cref="M:Rti.Dds.Subscription.DataReader`1.Read"/>, but one where the declared type
            of the data is object, instead of a concrete T.
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.AnyDataReader.TakeUntyped">
            <summary>
            Allows calling <see cref="M:Rti.Dds.Subscription.DataReader`1.Take"/> in a context where
            the type is not known.
            </summary>
            <returns>
            A collection equivalent to the one returned by
            <see cref="M:Rti.Dds.Subscription.DataReader`1.Take"/>, but one where the declared type
            of the data is object, instead of a concrete T.
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.AnyDataReader.LookupInstanceUntyped(System.Object)">
            <summary>
            Allows calling <see cref="M:Rti.Dds.Subscription.DataReader`1.LookupInstance(`0)"/> in a
            context where the type is not known.
            </summary>
            <returns>
            The <see cref="T:Rti.Dds.Core.InstanceHandle"/> corresponding to the provided keyholder.
            The runtime type of the keyholder must match that of the actual
            <see cref="T:Rti.Dds.Subscription.DataReader`1"/> otherwise this operation throws
            <see cref="T:System.InvalidCastException"/>.
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.AnyDataReader.GetKeyValueUntyped(System.Object,Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Allows calling <see cref="M:Rti.Dds.Subscription.DataReader`1.GetKeyValue(`0,Rti.Dds.Core.InstanceHandle@)"/> in a
            context where the type is not known.
            </summary>
            <returns>
            The key values corresponding to the provided instance handle.
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.AnyDataReader.SelectUntyped">
            <summary>
            Allows calling <see cref="M:Rti.Dds.Subscription.DataReader`1.Select"/> in a
            context where the type is not known.
            </summary>
            <returns>
            A <see cref="T:Rti.Dds.Subscription.Selector`1"/>, but one where the declared type of the
            data is object, instead of a concrete T.
            </returns>
        </member>
        <member name="E:Rti.Dds.Subscription.AnyDataReader.SubscriptionMatched">
            <summary>
            Event triggered when the <see cref="F:Rti.Dds.Core.Status.StatusMask.SubscriptionMatched" />
            status changes
            </summary>
        </member>
        <member name="E:Rti.Dds.Subscription.AnyDataReader.DataAvailable">
            <summary>
            Event triggered when the <see cref="F:Rti.Dds.Core.Status.StatusMask.DataAvailable" />
            status changes
            </summary>
        </member>
        <member name="E:Rti.Dds.Subscription.AnyDataReader.LivelinessChanged">
            <summary>
            Event triggered when the <see cref="F:Rti.Dds.Core.Status.StatusMask.LivelinessChanged"/>
            status changes
            </summary>
        </member>
        <member name="E:Rti.Dds.Subscription.AnyDataReader.RequestedDeadlineMissed">
            <summary>
            Event triggered when the <see cref="F:Rti.Dds.Core.Status.StatusMask.RequestedDeadlineMissed" />
            status changes
            </summary>
        </member>
        <member name="E:Rti.Dds.Subscription.AnyDataReader.RequestedIncompatibleQos">
            <summary>
            Event triggered when the <see cref="F:Rti.Dds.Core.Status.StatusMask.RequestedIncompatibleQos" />
            status changes
            </summary>
        </member>
        <member name="E:Rti.Dds.Subscription.AnyDataReader.SampleLost">
            <summary>
            Event triggered when the <see cref="F:Rti.Dds.Core.Status.StatusMask.SampleLost" />
            status changes
            </summary>
        </member>
        <member name="E:Rti.Dds.Subscription.AnyDataReader.SampleRejected">
            <summary>
            Event triggered when the <see cref="F:Rti.Dds.Core.Status.StatusMask.SampleRejected" />
            status changes
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.AnyDataReader.ResetEvents(Rti.Dds.Core.Status.StatusMask)">
            <summary>
            Stop notifying of certain events and remove their event handlers
            </summary>
            <param name="eventsToRemove">
            Selects which events will stop receiving notifications.
            Use StatusMask.All to remove all event handlers.
            </param>
        </member>
        <member name="M:Rti.Dds.Subscription.AnyDataReader.DisposeContainedEntities">
            <summary>
            Disposes all the entities that were created by this reader.
            </summary>
            <remarks>@dref_details_DataReader_delete_contained_entities</remarks>
        </member>
        <member name="T:Rti.Dds.Subscription.SubscriptionMatchedEventHandler">
            <summary>
            Delegate type of the handler for the
            <see cref="F:Rti.Dds.Core.Status.StatusMask.SubscriptionMatched"/> status.
            </summary>
            <remarks>@dref_details_DataReaderListener_on_subscription_matched</remarks>
        </member>
        <member name="T:Rti.Dds.Subscription.DataAvailableEventHandler">
            <summary>
            Delegate type of the handler for the
            <see cref="F:Rti.Dds.Core.Status.StatusMask.DataAvailable"/> status.
            </summary>
            <remarks>@dref_details_DataReaderListener_on_data_available</remarks>
        </member>
        <member name="T:Rti.Dds.Subscription.LivelinessChangedEventHandler">
            <summary>
            Delegate type of the handler for the
            <see cref="F:Rti.Dds.Core.Status.StatusMask.LivelinessChanged"/> status.
            </summary>
            <remarks>@dref_details_DataReaderListener_on_liveliness_changed</remarks>
        </member>
        <member name="T:Rti.Dds.Subscription.RequestedDeadlineMissedEventHandler">
            <summary>
            Delegate type of the handler for the
            <see cref="F:Rti.Dds.Core.Status.StatusMask.RequestedDeadlineMissed"/> status.
            </summary>
            <remarks>@dref_details_DataReaderListener_on_requested_deadline_missed</remarks>
        </member>
        <member name="T:Rti.Dds.Subscription.RequestedIncompatibleQosEventHandler">
            <summary>
            Delegate type of the handler for the
            <see cref="F:Rti.Dds.Core.Status.StatusMask.RequestedIncompatibleQos"/> status.
            </summary>
            <remarks>@dref_details_DataReaderListener_on_requested_incompatible_qos</remarks>
        </member>
        <member name="T:Rti.Dds.Subscription.SampleLostEventHandler">
            <summary>
            Delegate type of the handler for the
            <see cref="F:Rti.Dds.Core.Status.StatusMask.SampleLost"/> status.
            </summary>
            <remarks>@dref_details_DataReaderListener_on_sample_lost</remarks>
        </member>
        <member name="T:Rti.Dds.Subscription.SampleRejectedEventHandler">
            <summary>
            Delegate type of the handler for the
            <see cref="F:Rti.Dds.Core.Status.StatusMask.SampleRejected"/> status.
            </summary>
            <remarks>@dref_details_DataReaderListener_on_sample_rejected</remarks>
        </member>
        <member name="T:Rti.Dds.Subscription.DataReader`1">
            <summary>
            Allows the application to: (1) declare the data it wishes to receive
            (i.e. make a subscription) and (2) access the data received by the
            attached Subscriber.
            </summary>
            <remarks>@dref_details_DataReader</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReader`1.Subscriber">
            <summary>
            Returns the <see cref="P:Rti.Dds.Subscription.DataReader`1.Subscriber"/> to which the DataReader belongs.
            </summary>
            <remarks>@dref_details_DataReader_get_subscriber</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReader`1.TopicDescription">
            <summary>
            Returns the <see cref="P:Rti.Dds.Subscription.DataReader`1.TopicDescription"/> associated with the
            DataReader.
            </summary>
            <remarks>@dref_details_DataReader_get_topicdescription</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReader`1.Read">
            <summary>
            Access all data samples.
            </summary>
            <remarks>@dref_details_FooDataReader_read</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReader`1.ReadUntyped">
            <summary>
            Allows calling <see cref="M:Rti.Dds.Subscription.DataReader`1.Read"/> in a context where
            the type is not known, as an <see cref="T:Rti.Dds.Subscription.AnyDataReader"/>
            </summary>
            <returns>
            A collection equivalent to the one returned by
            <see cref="M:Rti.Dds.Subscription.DataReader`1.Read"/>, but one where the declared type
            of the data is object, instead of a concrete T.
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReader`1.TakeUntyped">
            <summary>
            Allows calling <see cref="M:Rti.Dds.Subscription.DataReader`1.Take"/> in a context where
            the type is not known, as an <see cref="T:Rti.Dds.Subscription.AnyDataReader"/>
            </summary>
            <returns>
            A collection equivalent to the one returned by
            <see cref="M:Rti.Dds.Subscription.DataReader`1.Take"/>, but one where the declared type
            of the data is object, instead of a concrete T.
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReader`1.Take">
            <summary>
            Access and remove all data samples.
            </summary>
            <remarks>
            <para>See also `Rti.Dds.Subscription.DataReaderAsyncExtensions.TakeAsync`.</para>
            <para>@dref_details_FooDataReader_take</para>
            </remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReader`1.Select">
            <summary>
            Access data samples according with certain selection criteria
            </summary>
            <returns>A selector that can be configured to specify which samples
            to read or take. </returns>
            <remarks>@dref_details_FooDataReader_take</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReader`1.SelectUntyped">
             <summary>
             Calls <see cref="M:Rti.Dds.Subscription.DataReader`1.Select"/>, but allows doing so as an
             <see cref="T:Rti.Dds.Subscription.AnyDataReader"/> in a context where T is not known.
             </summary>
             <returns>
             A selector that can be configured to specify which samples to read
             or take.
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReader`1.LookupInstance(`0)">
            <summary>
            Retrieves the instance handle that corresponds to a data sample
            containing the key values.
            </summary>
            <remarks>@dref_details_FooDataReader_lookup_instance</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReader`1.LookupInstanceUntyped(System.Object)">
            <summary>
            Calls <see cref="M:Rti.Dds.Subscription.DataReader`1.LookupInstance(`0)"/>, but allows doing so as an
            <see cref="T:Rti.Dds.Subscription.AnyDataReader"/> in a context where T is not known.
            </summary>
            <param name="keyHolder">
            The key fields of the instance to lookup.
            The runtime type of keyHolder must be T. Otherwise this
            operation throws <see cref="T:System.InvalidCastException"/>.
            </param>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReader`1.GetKeyValue(`0,Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Retrieve the instance key value that corresponds to an instance handle.
            </summary>
            <remarks>@dref_details_FooDataReader_get_key_value</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReader`1.GetKeyValueUntyped(System.Object,Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Calls <see cref="M:Rti.Dds.Subscription.DataReader`1.GetKeyValue(`0,Rti.Dds.Core.InstanceHandle@)"/>, but allows doing so
            as an <see cref="T:Rti.Dds.Subscription.AnyDataReader"/> in a context where T is not known.
            </summary>
            <param name="keyHolder">
            The obtained key values.
            </param>
            <param name="instanceHandle">
            The <see cref="T:Rti.Dds.Core.InstanceHandle"/> corresponding to the instance whose
            key values we want to obtain.
            The runtime type of keyHolder must be T. Otherwise this
            operation throws <see cref="T:System.InvalidCastException"/>.
            </param>
            <returns>
            The obtained key values.
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReader`1.ToString">
            <summary>
            Provides a readable summary of information about this DataWriter.
            </summary>
        </member>
        <member name="T:Rti.Dds.Subscription.DataReaderQos">
            <summary>
            Container of the QoS policies that a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> supports
            </summary>
            <remarks>@dref_details_DataReaderQos</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.Durability">
            <summary>
            Gets the <see cref="P:Rti.Dds.Subscription.DataReaderQos.Durability"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.Deadline">
            <summary>
            Gets the <see cref="P:Rti.Dds.Subscription.DataReaderQos.Deadline"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.LatencyBudget">
            <summary>
            Gets the <see cref="P:Rti.Dds.Subscription.DataReaderQos.LatencyBudget"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.Liveliness">
            <summary>
            Gets the <see cref="P:Rti.Dds.Subscription.DataReaderQos.Liveliness"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.Reliability">
            <summary>
            Gets the <see cref="P:Rti.Dds.Subscription.DataReaderQos.Reliability"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.DestinationOrder">
            <summary>
            Gets the <see cref="P:Rti.Dds.Subscription.DataReaderQos.DestinationOrder"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.History">
            <summary>
            Gets the <see cref="P:Rti.Dds.Subscription.DataReaderQos.History"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.ResourceLimits">
            <summary>
            Gets the <see cref="P:Rti.Dds.Subscription.DataReaderQos.ResourceLimits"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.UserData">
            <summary>
            Gets the <see cref="P:Rti.Dds.Subscription.DataReaderQos.UserData"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.Ownership">
            <summary>
            Gets the <see cref="P:Rti.Dds.Subscription.DataReaderQos.Ownership"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.TimeBasedFilter">
            <summary>
            Gets the <see cref="P:Rti.Dds.Subscription.DataReaderQos.TimeBasedFilter"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.ReaderDataLifecycle">
            <summary>
            Gets the <see cref="P:Rti.Dds.Subscription.DataReaderQos.ReaderDataLifecycle"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.Representation">
            <summary>
            Gets the <see cref="T:Rti.Dds.Core.Policy.DataRepresentation"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.TypeConsistency">
            <summary>
            Gets the <see cref="T:Rti.Dds.Core.Policy.TypeConsistencyEnforcement"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.DataTags">
            <summary>
            Gets the <see cref="T:Rti.Dds.Core.Policy.TypeConsistencyEnforcement"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.ReaderResourceLimits">
            <summary>
            @extension Gets the <see cref="T:Rti.Dds.Core.Policy.DataReaderResourceLimits"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.Protocol">
            <summary>
            @extension Gets the <see cref="T:Rti.Dds.Core.Policy.DataReaderProtocol"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.TransportSelection">
            <summary>
            @extension Gets the <see cref="P:Rti.Dds.Subscription.DataReaderQos.TransportSelection"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.Unicast">
            <summary>
            @extension Gets the <see cref="T:Rti.Dds.Core.Policy.TransportUnicast"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.Multicast">
            <summary>
            @extension Gets the <see cref="T:Rti.Dds.Core.Policy.TransportMulticast"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.Property">
            <summary>
            @extension Gets the <see cref="P:Rti.Dds.Subscription.DataReaderQos.Property"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.Service">
            <summary>
            @extension Gets the <see cref="P:Rti.Dds.Subscription.DataReaderQos.Service"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.Availability">
            <summary>
            @extension Gets the <see cref="P:Rti.Dds.Subscription.DataReaderQos.Availability"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.SubscriptionName">
            <summary>
            @extension Gets the <see cref="T:Rti.Dds.Core.Policy.EntityName"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.TransportPriority">
            <summary>
            @extension Gets the <see cref="P:Rti.Dds.Subscription.DataReaderQos.TransportPriority"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.TypeSupport">
            <summary>
            @extension Gets the <see cref="P:Rti.Dds.Subscription.DataReaderQos.TypeSupport"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.DataReaderQos.Default">
            <summary>
            Singleton containing the documented default value of a DataReaderQos
            </summary>
            <remarks>
            This is a static value containing the documented default values for each policy.
            Use <see cref="P:Rti.Dds.Domain.DomainParticipant.DefaultDataReaderQos"/> for the runtime
            default value that takes into consideration the current configuration.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithDurability(Rti.Dds.Core.Policy.Durability)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.Durability"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithDurability(System.Action{Rti.Dds.Core.Policy.DurabilityBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.Durability"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithDeadline(Rti.Dds.Core.Policy.Deadline)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.Deadline"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithDeadline(System.Action{Rti.Dds.Core.Policy.DeadlineBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.Deadline"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithLatencyBudget(Rti.Dds.Core.Policy.LatencyBudget)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.LatencyBudget"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithLatencyBudget(System.Action{Rti.Dds.Core.Policy.LatencyBudgetBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.LatencyBudget"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithLiveliness(Rti.Dds.Core.Policy.Liveliness)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.Liveliness"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithLiveliness(System.Action{Rti.Dds.Core.Policy.LivelinessBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.Liveliness"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithReliability(Rti.Dds.Core.Policy.Reliability)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.Reliability"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithReliability(System.Action{Rti.Dds.Core.Policy.ReliabilityBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.Reliability"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithDestinationOrder(Rti.Dds.Core.Policy.DestinationOrder)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.DestinationOrder"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithDestinationOrder(System.Action{Rti.Dds.Core.Policy.DestinationOrderBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.DestinationOrder"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithHistory(Rti.Dds.Core.Policy.History)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.History"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithHistory(System.Action{Rti.Dds.Core.Policy.HistoryBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.History"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithResourceLimits(Rti.Dds.Core.Policy.ResourceLimits)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.ResourceLimits"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithResourceLimits(System.Action{Rti.Dds.Core.Policy.ResourceLimitsBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.ResourceLimits"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithUserData(Rti.Dds.Core.Policy.UserData)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.UserData"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithUserData(System.Action{System.Collections.Immutable.ImmutableList{System.Byte}.Builder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.UserData"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithOwnership(Rti.Dds.Core.Policy.Ownership)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.Ownership"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithOwnership(System.Action{Rti.Dds.Core.Policy.OwnershipBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.Ownership"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithTimeBasedFilter(Rti.Dds.Core.Policy.TimeBasedFilter)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.TimeBasedFilter"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithTimeBasedFilter(System.Action{Rti.Dds.Core.Policy.TimeBasedFilterBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.TimeBasedFilter"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithReaderDataLifecycle(Rti.Dds.Core.Policy.ReaderDataLifecycle)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.ReaderDataLifecycle"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithReaderDataLifecycle(System.Action{Rti.Dds.Core.Policy.ReaderDataLifecycleBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.ReaderDataLifecycle"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithRepresentation(Rti.Dds.Core.Policy.DataRepresentation)">
            <summary>
            Creates an instance with a new <see cref="T:Rti.Dds.Core.Policy.DataRepresentation"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithRepresentation(System.Action{Rti.Dds.Core.Policy.DataRepresentationBuilder})">
            <summary>
            Creates a new instance with a new <see cref="T:Rti.Dds.Core.Policy.DataRepresentation"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithTypeConsistency(Rti.Dds.Core.Policy.TypeConsistencyEnforcement)">
            <summary>
            Creates an instance with a new <see cref="T:Rti.Dds.Core.Policy.TypeConsistencyEnforcement"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithTypeConsistency(System.Action{Rti.Dds.Core.Policy.TypeConsistencyEnforcementBuilder})">
            <summary>
            Creates a new instance with a new <see cref="T:Rti.Dds.Core.Policy.TypeConsistencyEnforcement"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithDataTags(Rti.Dds.Core.Policy.DataTags)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.DataTags"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithDataTags(System.Action{System.Collections.Immutable.ImmutableDictionary{System.String,System.String}.Builder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.DataTags"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithReaderResourceLimits(Rti.Dds.Core.Policy.DataReaderResourceLimits)">
            <summary>
            Creates an instance with a new <see cref="T:Rti.Dds.Core.Policy.DataReaderResourceLimits"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithReaderResourceLimits(System.Action{Rti.Dds.Core.Policy.DataReaderResourceLimitsBuilder})">
            <summary>
            Creates a new instance with a new <see cref="T:Rti.Dds.Core.Policy.DataReaderResourceLimits"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithProtocol(Rti.Dds.Core.Policy.DataReaderProtocol)">
            <summary>
            Creates an instance with a new <see cref="T:Rti.Dds.Core.Policy.DataReaderProtocol"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithProtocol(System.Action{Rti.Dds.Core.Policy.DataReaderProtocolBuilder})">
            <summary>
            Creates a new instance with a new <see cref="T:Rti.Dds.Core.Policy.DataReaderProtocol"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithTransportSelection(Rti.Dds.Core.Policy.TransportSelection)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.TransportSelection"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithTransportSelection(System.Action{Rti.Dds.Core.Policy.TransportSelectionBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.TransportSelection"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithUnicast(Rti.Dds.Core.Policy.TransportUnicast)">
            <summary>
            Creates an instance with a new <see cref="T:Rti.Dds.Core.Policy.TransportUnicast"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithUnicast(System.Action{System.Collections.Immutable.ImmutableList{Rti.Dds.Core.Policy.TransportUnicastSettings}.Builder})">
            <summary>
            Creates a new instance with a new <see cref="T:Rti.Dds.Core.Policy.TransportUnicast"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithMulticast(Rti.Dds.Core.Policy.TransportMulticast)">
            <summary>
            Creates an instance with a new <see cref="T:Rti.Dds.Core.Policy.TransportMulticast"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithMulticast(System.Action{Rti.Dds.Core.Policy.TransportMulticastBuilder})">
            <summary>
            Creates a new instance with a new <see cref="T:Rti.Dds.Core.Policy.TransportMulticast"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithProperty(Rti.Dds.Core.Policy.Property)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.Property"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithProperty(System.Action{System.Collections.Immutable.ImmutableDictionary{System.String,Rti.Dds.Core.Policy.Property.Entry}.Builder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.Property"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithService(Rti.Dds.Core.Policy.Service)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.Service"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithService(System.Action{Rti.Dds.Core.Policy.ServiceBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.Service"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithAvailability(Rti.Dds.Core.Policy.Availability)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.Availability"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithAvailability(System.Action{Rti.Dds.Core.Policy.AvailabilityBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.Availability"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithSubscriptionName(Rti.Dds.Core.Policy.EntityName)">
            <summary>
            Creates an instance with a new <see cref="T:Rti.Dds.Core.Policy.EntityName"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithSubscriptionName(System.Action{Rti.Dds.Core.Policy.EntityNameBuilder})">
            <summary>
            Creates a new instance with a new <see cref="T:Rti.Dds.Core.Policy.EntityName"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithTransportPriority(Rti.Dds.Core.Policy.TransportPriority)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.TransportPriority"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithTransportPriority(System.Action{Rti.Dds.Core.Policy.TransportPriorityBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.TransportPriority"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithTypeSupport(Rti.Dds.Core.Policy.TypeSupport)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.TypeSupport"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.WithTypeSupport(System.Action{Rti.Dds.Core.Policy.TypeSupportBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Subscription.DataReaderQos.TypeSupport"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.FromTopicQos(Rti.Dds.Topics.TopicQos)">
            <summary>
            Creates a DataReaderQos object with the policies of a TopicQos object.
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.Equals(Rti.Dds.Subscription.DataReaderQos)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.ToString">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <remarks>
            The output is formatted using the default values for the
            <see cref="T:Rti.Dds.Core.QosPrintFormat"/> and only QoS policies which differ
            from the documented default are included.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.ToString(Rti.Dds.Core.QosPrintFormat)">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <param name="format">The baseQos profile.</param>
            <remarks>
            This overload accepts a value for the baseQos. Only the differences
            between the <see cref="T:Rti.Dds.Subscription.DataReaderQos"/> object being printed and
            the baseQos are included in the output.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.ToString(Rti.Dds.Subscription.DataReaderQos,Rti.Dds.Core.QosPrintFormat)">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <param name="baseQos">The baseQos profile.</param>
            <param name="format">the format used to configure the output. If not
            supplied the output is formatted using the default format.</param>
            <remarks>
            This overload accepts a value for the baseQos. Only the differences
            between the <see cref="T:Rti.Dds.Subscription.DataReaderQos"/> object being printed and
            the baseQos are included in the output.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.DataReaderQos.ToString(Rti.Dds.Core.QosPrintAll,Rti.Dds.Core.QosPrintFormat)">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <param name="baseQos">Used to indicate that the entire QoS object
            should be included in the output. The only value which should
            be provided for this argument is QosPrintAll.Value</param>
            <param name="format">The format used to configure the output. If not
            supplied, the output is formatted using the default format.</param>
            <remarks>
            This overload accepts a parameter of type <see cref="T:Rti.Dds.Core.QosPrintAll"/>.
            Unlike the other ToString overloads, the entire QoS object will be
            included in the output.
            </remarks>
        </member>
        <member name="T:Rti.Dds.Subscription.Filter">
            <summary>
            Defines a filter to create a <see cref="T:Rti.Dds.Topics.ContentFilteredTopic`1"/>.
            </summary>
        </member>
        <member name="F:Rti.Dds.Subscription.Filter.SqlFilterName">
            <summary>
            Filter name that identifies the SQL filter
            </summary>
        </member>
        <member name="F:Rti.Dds.Subscription.Filter.StringMatchFilterName">
            <summary>
            Filter name that identifies the "string match" filter
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.Filter.#ctor(System.String)">
            <summary>
            Creates a filter with an expression with no parameters.
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.Filter.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a filter with an expression that contains parameters.
            </summary>
            <param name="expression">The filter expression</param>
            <param name="parameters">The values of the parameters used in the expression</param>
        </member>
        <member name="M:Rti.Dds.Subscription.Filter.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a filter with an expression containing parameters and a
            filter name.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.Filter.Expression">
            <summary>
            Gets the expression.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.Filter.Parameters">
            <summary>
            Gets the parameters.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.Filter.Name">
            <summary>
            Gets the filter name
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.Filter.Equals(Rti.Dds.Subscription.Filter)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.Filter.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.Filter.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.Filter.ToString">
            <summary>
            Converts to a string
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.Filter.WithParameters(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new Filter with the same expression as the existing filter
            but with new parameters
            </summary>
            <param name="parameters">The new parameters for the new filter</param>
            <returns>A new filter with the same expression and new parameters</returns>
        </member>
        <member name="M:Rti.Dds.Subscription.Filter.op_Implicit(System.String)~Rti.Dds.Subscription.Filter">
            <summary>
            Allows using a string wherever a no-parameter filter is expected
            </summary>
            <param name="expression">The string to implicitly convert to a
            Filter with an expression and no parameters</param>
        </member>
        <member name="T:Rti.Dds.Subscription.LoanedSample`1">
            <summary>
            Contains the data and the information associated with a sample, which
            are only valid until their <see cref="T:Rti.Dds.Subscription.LoanedSamples`1"/> container is
            Disposed
            </summary>
            <remarks>
            Any reference contained within a `LoanedSample` is only valid until the
            corresponding <see cref="T:Rti.Dds.Subscription.LoanedSamples`1"/> has been Disposed. Attempting
            to access any data within the sample after that is undefined behavior.
            </remarks>
            <typeparam name="T">The topic type of the data</typeparam>
        </member>
        <member name="P:Rti.Dds.Subscription.LoanedSample`1.Data">
            <summary>
            Gets the data
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.LoanedSample`1.Info">
            <summary>
            Gets the information about this sample
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.LoanedSample`1.Deconstruct(`0@,Rti.Dds.Subscription.SampleInfo@)">
            <summary>
            Allows deconstructing a LoanedSample into a tuple with the data
            and the info.
            </summary>
            <param name="data">Output parameter assigned this.Data</param>
            <param name="info">Output parameter assigned this.Info</param>
            <example>
            For example:
            <code>
            using var samples = reader.Take();
            foreach (var (data, info) in samples)
            {
                if (info.ValidData)
                {
                    Console.WriteLine(data);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Rti.Dds.Subscription.LoanedSample`1.ToString">
            <summary>
            Returns `Data.ToString()` when `Info.ValidData` is true; otherwise
            it returns a readable summary of the `Info`.
            </summary>
        </member>
        <member name="T:Rti.Dds.Subscription.LoanedSamples`1">
            <summary>
            Provides temporary access to a collection of samples (data and info).
            </summary>
            <typeparam name="T">
            The topic-type of the <see cref="T:Rti.Dds.Subscription.DataReader`1"/>
            </typeparam>
            <remarks>
            <para>
            This collection needs to be **explicitly disposed** when it is no longer
            needed (typically with a `using` statement). The underlying middleware
            resources it uses will not be released by the garbage collector.
            </para>
            <para>
            After disposing the collection, its elements and all their references
            are no longer valid and cannot be accessed. To keep the data around,
            you can copy it.
            </para>
            <para>@see \ref DDSSubscriptionExampleModule_read for code examples</para>
            </remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.LoanedSamples`1.GetEnumerator">
            <summary>
            Provides access to the samples
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.LoanedSamples`1.Dispose">
            <summary>
            Returns the loaned samples back to the DataReader.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.LoanedSamples`1.Count">
            <summary>
            Returns the number of samples
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.LoanedSamples`1.ValidData">
            <summary>
            Provides access only to the data samples with valid data, skipping
            samples such that <see cref="P:Rti.Dds.Subscription.SampleInfo.ValidData"/> is false.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.LoanedSamples`1.DataReader">
            <summary>
            Returns the reader that owns these samples.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.LoanedSamples`1.Item(System.UInt32)">
            <summary>
            Provides indexed access to the samples
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.LoanedSamples`1.GetDataAt(System.Int32)">
            <summary>
            Equivalent to `this[index].Data`
            </summary>
        </member>
        <member name="T:Rti.Dds.Subscription.QueryCondition">
            <summary>
            A specialized <see cref="T:Rti.Dds.Subscription.ReadCondition"/> that allows specifying a
            filter on the locally available data.
            </summary>
            <remarks>@dref_details_QueryCondition</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.QueryCondition.QueryExpression">
            <summary>
            Retrieves the query expression.
            </summary>
            <remarks>@dref_details_QueryCondition_get_query_expression</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.QueryCondition.QueryParameters">
            <summary>
            Retrieves or modifies the query parameters.
            </summary>
            <remarks>@dref_details_QueryCondition_set_query_parameters</remarks>
        </member>
        <member name="T:Rti.Dds.Subscription.ReadCondition">
            <summary>
            Conditions specifically dedicated to read operations and attached to one
            <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <remarks>
            <para>
            ReadConditions are created with <see cref="M:Rti.Dds.Subscription.AnyDataReader.CreateReadCondition(Omg.Dds.Subscription.DataState)"/>
            or <see cref="M:Rti.Dds.Subscription.AnyDataReader.CreateQueryCondition(Rti.Dds.Subscription.Filter,Omg.Dds.Subscription.DataState)"/>
            and should be explicitly disposed (by calling the Dispose method) when
            they're no longer used to avoid consuming resources unnecessarily.
            </para>
            <para>@dref_details_ReadCondition</para>
            </remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.ReadCondition.DataReader">
            <summary>
            Returns the <see cref="P:Rti.Dds.Subscription.ReadCondition.DataReader"/> associated with this
            condition.
            </summary>
            <remarks>@dref_details_ReadCondition_get_datareader</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.ReadCondition.StateFilter">
            <summary>
            Returns the state filter
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.ReadCondition.Dispose">
            <summary>
            Releases the native resources used by this condition
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.ReadCondition.Disposed">
            <summary>
            Indicates whether this object has been disposed
            </summary>
        </member>
        <member name="T:Rti.Dds.Subscription.SampleInfo">
            <summary>
            Information that accompanies each sample received by a DataReader
            </summary>
            <remarks>@dref_details_SampleInfo</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.SampleInfo.ValidData">
            <summary>
            Indicates whether the sample contains data or else it is only used
            to communicate a change in the instance state (this.State.InstanceState)
            </summary>
            <remarks>@dref_details_SampleInfo_valid_data</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.SampleInfo.State">
            <summary>
            Contains the sample, view and instance states
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.SampleInfo.GenerationCount">
            <summary>
            Keeps track of changes in the <see cref="T:Omg.Dds.Subscription.InstanceState"/>
            (<see cref="P:Rti.Dds.Subscription.SampleInfo.State"/>) for a given instance.
            </summary>
            <remarks>@dref_details_SampleInfo_disposed_generation_count</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.SampleInfo.Rank">
            <summary>
            Keeps track of the number of samples related to the same instance
            that follow in a <see cref="T:Rti.Dds.Subscription.LoanedSamples`1"/> collection.
            </summary>
            <remarks>@dref_details_SampleInfo_sample_rank</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.SampleInfo.InstanceHandle">
            <summary>
            Identifies locally the corresponding instance.
            </summary>
            <remarks>@dref_details_SampleInfo_instance_handle</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.SampleInfo.PublicationHandle">
            <summary>
            Identifies locally the DataWriter that modified the instance.
            </summary>
            <remarks>@dref_details_SampleInfo_publication_handle</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.SampleInfo.SourceTimestamp">
            <summary>
            The timestamp when the sample was written by a DataWriter.
            </summary>
            <remarks>@dref_details_SampleInfo_source_timestamp</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.SampleInfo.ReceptionTimestamp">
            <summary>
            The timestamp when the sample was received and added to the
            DataReader's queue.
            </summary>
            <remarks>@dref_details_SampleInfo_reception_timestamp</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.SampleInfo.PublicationSequenceNumber">
            <summary>
            @extension The publication sequence number.
            </summary>
            <remarks>@dref_details_SampleInfo_publication_sequence_number</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.SampleInfo.ReceptionSequenceNumber">
            <summary>
            @extension The reception sequence number when sample was committed by a DataReader
            </summary>
            <remarks>@dref_details_SampleInfo_reception_sequence_number</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.SampleInfo.PublicationVirtualSampleIdentity">
            <summary>
            @extension The original publication virtual sample identity.
            </summary>
            <remarks>@dref_details_SampleInfo_original_publication_virtual_guid</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.SampleInfo.OriginalPublicationVirtualSampleIdentity">
            <summary>
            @extension The original publication virtual identity.
            </summary>
            <remarks>@dref_details_SampleInfo_original_publication_virtual_guid</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.SampleInfo.RelatedOriginalPublicationVirtualSampleIdentity">
            <summary>
            @extension The original publication virtual identity of a related sample.
            </summary>
            <remarks>@dref_details_SampleInfo_related_original_publication_virtual_guid</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.SampleInfo.Flag">
            <summary>
            @extension Flags associated with the sample.
            </summary>
            <remarks>@dref_details_SampleInfo_flag</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.SampleInfo.SourceGuid">
            <summary>
            @extension The application logical data source associated with the sample.
            </summary>
            <remarks>@dref_details_SampleInfo_source_guid</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.SampleInfo.RelatedSourceGuid">
            <summary>
            @extension The application logical data source that is related to the sample.
            </summary>
            <remarks>@dref_details_SampleInfo_related_source_guid</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.SampleInfo.RelatedSubscriptionGuid">
            <summary>
            @extension The related_reader_guid associated with the sample.
            </summary>
            <remarks>@dref_details_SampleInfo_related_subscription_guid</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.SampleInfo.TopicQueryGuid">
            <summary>
            @extension The Guid of the TopicQuery that is related to the sample.
            </summary>
            <remarks>@dref_details_SampleInfo_topic_query_guid</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.SampleInfo.CoherentSetInfo">
            <summary>
            If this sample belongs to a coherent set, this property contains
            information about the coherent set.
            </summary>
            <value>
            A nonnull object if this sample belongs to a coherent or null if
            it doesn't.
            </value>
        </member>
        <member name="T:Rti.Dds.Subscription.SampleProcessor">
            <summary>
            A SampleProcessor automatically takes the data from the attached readers
            and provides each data sample to a user-defined handler function. The SampleProcessor
            uses a configurable thread pool to wait for the data and call the handlers.
            </summary>
            <remarks>
            Readers cannot be disposed while they're attached to a SampleProcessor.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.SampleProcessor.#ctor">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Subscription.SampleProcessor" /> with default configuration.
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.SampleProcessor.#ctor(Rti.Dds.Core.AsyncWaitSetProperty)">
            <summary>
            Creates a new <see cref="T:Rti.Dds.Subscription.SampleProcessor" /> with the specified
            configuration.
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.SampleProcessor.AttachDataReader``1(Rti.Dds.Subscription.DataReader{``0},System.Action{Rti.Dds.Subscription.LoanedSample{``0}})">
            <summary>
            Adds a handler to be called for each data sample received by a
            <see cref="T:Rti.Dds.Subscription.DataReader`1"/>.
            </summary>
            <param name="reader">
            The reader to read from. Important: the reader must not be Disposed while attached.
            </param>
            <param name="handler">
            A function that receives a <see cref="T:Rti.Dds.Subscription.LoanedSample`1"/>. Important: the sample
            is only valid inside the handler. It cannot be used after the handler returns.
            </param>
            <typeparam name="T">The reader's topic-type</typeparam>
        </member>
        <member name="M:Rti.Dds.Subscription.SampleProcessor.DetachDataReader(Rti.Dds.Subscription.AnyDataReader)">
            <summary>
            Detaches a reader. The SampleProcessor stops taking data from this reader.
            </summary>
            <param name="reader">The reader to detach.</param>
        </member>
        <member name="M:Rti.Dds.Subscription.SampleProcessor.Dispose">
            <summary>
            Releases the native resources used by this object. A finalizer is
            also provided, so it is not necessary to call Dispose.
            </summary>
        </member>
        <member name="T:Rti.Dds.Subscription.SelectorBase">
            <summary>
            Base class for the <see cref="T:Rti.Dds.Subscription.Selector`1"/> and <see cref="T:Rti.Dds.Subscription.SelectorUntyped"/>
            classes.
            </summary>
            <remarks>
            This class contains all of the methods shared between
            <see cref="T:Rti.Dds.Subscription.Selector`1"/> and <see cref="T:Rti.Dds.Subscription.SelectorUntyped"/>.
            </remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.SelectorBase.State">
            <summary>
            Get or set the data state
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.SelectorBase.MaxSamples">
            <summary>
            Get or set the maximum samples
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.SelectorBase.Instance">
            <summary>
            Get or set the instance handle
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.SelectorBase.NextInstance">
            <summary>
            Get or set the next instance
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.SelectorBase.Condition">
            <summary>
            Get or set the condition
            </summary>
        </member>
        <member name="T:Rti.Dds.Subscription.SelectorUntyped">
            <summary>
            Allows composing read and take operations. Selectors are returned by
            <see cref="M:Rti.Dds.Subscription.AnyDataReader.SelectUntyped"/>
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.SelectorUntyped.RelatedReader">
            <summary>
            The reader that created this selector
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.SelectorUntyped.Take">
            <summary>
            Access (and remove) the samples selected by this selector
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.SelectorUntyped.Read">
            <summary>
            Access (without removing) the samples selected by this selector
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.SelectorUntyped.WithState(Omg.Dds.Subscription.DataState)">
            <summary>
            Select a specific DataState
            </summary>
            <returns>This Selector</returns>
        </member>
        <member name="M:Rti.Dds.Subscription.SelectorUntyped.WithMaxSamples(System.Int32)">
            <summary>
            Choose to only read/take up to a maximum number of samples
            </summary>
            <returns>This Selector</returns>
        </member>
        <member name="M:Rti.Dds.Subscription.SelectorUntyped.WithInstance(Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Select a specific instance
            </summary>
            <returns>This Selector</returns>
        </member>
        <member name="M:Rti.Dds.Subscription.SelectorUntyped.WithNextInstance(Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Select the instance after a specific instance
            </summary>
            <returns>This Selector</returns>
        </member>
        <member name="M:Rti.Dds.Subscription.SelectorUntyped.WithCondition(Rti.Dds.Subscription.ReadCondition)">
            <summary>
            Select based on the state or content filter of a
            <see cref="T:Rti.Dds.Subscription.ReadCondition"/> or a <see cref="T:Rti.Dds.Subscription.QueryCondition"/>
            </summary>
            <returns>This Selector</returns>
        </member>
        <member name="T:Rti.Dds.Subscription.Selector`1">
            <summary>
            Allows composing read and take operations. Selectors are returned by
            <see cref="M:Rti.Dds.Subscription.DataReader`1.Select"/>
            </summary>
            <typeparam name="T">The topic-type of the associated reader</typeparam>
        </member>
        <member name="P:Rti.Dds.Subscription.Selector`1.RelatedReader">
            <summary>
            The reader that created this selector
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.Selector`1.WithState(Omg.Dds.Subscription.DataState)">
            <summary>
            Select a specific DataState
            </summary>
            <returns>This Selector</returns>
        </member>
        <member name="M:Rti.Dds.Subscription.Selector`1.WithMaxSamples(System.Int32)">
            <summary>
            Choose to only read/take up to a maximum number of samples
            </summary>
            <returns>This Selector</returns>
        </member>
        <member name="M:Rti.Dds.Subscription.Selector`1.WithInstance(Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Select a specific instance
            </summary>
            <returns>This Selector</returns>
        </member>
        <member name="M:Rti.Dds.Subscription.Selector`1.WithNextInstance(Rti.Dds.Core.InstanceHandle@)">
            <summary>
            Select the instance after a specific instance
            </summary>
            <returns>This Selector</returns>
        </member>
        <member name="M:Rti.Dds.Subscription.Selector`1.WithCondition(Rti.Dds.Subscription.ReadCondition)">
            <summary>
            Select based on the state or content filter of a
            <see cref="T:Rti.Dds.Subscription.ReadCondition"/> or a <see cref="T:Rti.Dds.Subscription.QueryCondition"/>
            </summary>
            <returns>This Selector</returns>
        </member>
        <member name="M:Rti.Dds.Subscription.Selector`1.Take">
            <summary>
            Access (and remove) the samples selected by this selector
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.Selector`1.Read">
            <summary>
            Access (without removing) the samples selected by this selector
            </summary>
        </member>
        <member name="T:Rti.Dds.Subscription.Subscriber">
            <summary>
            A subscriber is the object responsible for actually
            receiving data from a subscription.
            </summary>
        </member>
        <member name="F:Rti.Dds.Subscription.Subscriber.SubscriptionBuiltinTopicName">
            <summary>
            The topic name of the DataReader in <see cref="P:Rti.Dds.Domain.DomainParticipant.BuiltinSubscriber"/>
            that provides information about Subscriptions discovered by a participant.
            </summary>
            <remarks>
            See \ref DDSDiscoveryExampleModule
            </remarks>
        </member>
        <member name="F:Rti.Dds.Subscription.Subscriber.PublicationBuiltinTopicName">
            <summary>
            The topic name of the DataReader in <see cref="P:Rti.Dds.Domain.DomainParticipant.BuiltinSubscriber"/>
            that provides information about Publications discovered by a participant.
            </summary>
            <remarks>
            See \ref DDSDiscoveryExampleModule
            </remarks>
        </member>
        <member name="F:Rti.Dds.Subscription.Subscriber.TopicBuiltinTopicName">
            <summary>
            The topic name of the DataReader in <see cref="P:Rti.Dds.Domain.DomainParticipant.BuiltinSubscriber"/>
            that provides information about Topics discovered by a participant.
            </summary>
            <remarks>
            See \ref DDSDiscoveryExampleModule
            </remarks>
        </member>
        <member name="F:Rti.Dds.Subscription.Subscriber.ParticipantBuiltinTopicName">
            <summary>
            The topic name of the DataReader in <see cref="P:Rti.Dds.Domain.DomainParticipant.BuiltinSubscriber"/>
            that provides information about participants discovered by another
            participant.
            </summary>
            <remarks>
            See \ref DDSDiscoveryExampleModule
            </remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.Subscriber.DefaultDataReaderQos">
            <summary>
            Copies the default <see cref="T:Rti.Dds.Subscription.DataReaderQos"/> values into the provided <see cref="T:Rti.Dds.Subscription.DataReaderQos"/> instance.
            </summary>
            <remarks>@dref_details_Subscriber_get_default_datareader_qos</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.Subscriber.Qos">
            <summary>
            Gets or sets the subscriber QoS.
            </summary>
            <remarks>@dref_details_Subscriber_get_qos</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.Subscriber.DomainParticipant">
            <summary>
            Returns the DomainParticipant to which this Subscriber belongs.
            </summary>
            <remarks>@dref_details_Subscriber_get_participant</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.Subscriber.DataReaders">
            <summary>
            Retrieve all the DataReaders created from this Subscriber
            </summary>
            <remarks>@dref_details_Subscriber_get_all_datareaders</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.Subscriber.CreateDataReader``1(Rti.Dds.Topics.Topic{``0})">
            <summary>
            Creates a DataReader that will be attached and belong to this Subscriber,
            using default QoS.
            </summary>
            <param name="topic">The <see cref="T:Rti.Dds.Topics.Topic`1"/> that
            the DataReader will be associated with.
            </param>
            <remarks>@dref_details_Subscriber_create_datareader</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.Subscriber.CreateDataReader``1(Rti.Dds.Topics.Topic{``0},System.Action{Rti.Dds.Subscription.DataReader{``0}})">
            <summary>
            Creates a DataReader that will be attached and belong to this Subscriber,
            using default QoS.
            </summary>
            <param name="topic">The <see cref="T:Rti.Dds.Topics.Topic`1"/> that
            the DataReader will be associated with.
            </param>
            <param name="preEnableAction">An action that allows adding handlers
            to reader events before the reader is enabled.
            </param>
            <remarks>@dref_details_Subscriber_create_datareader</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.Subscriber.CreateDataReader``1(Rti.Dds.Topics.Topic{``0},Rti.Dds.Subscription.DataReaderQos,System.Action{Rti.Dds.Subscription.DataReader{``0}})">
            <summary>
            Creates a DataReader that will be attached and belong to this Subscriber.
            </summary>
            <param name="topic">The <see cref="T:Rti.Dds.Topics.Topic`1"/> that
            the DataReader will be associated with.
            </param>
            <param name="qos">The reader QoS.</param>
            <param name="preEnableAction">An action that allows adding handlers
            to reader events before the reader is enabled.
            </param>
            <remarks>@dref_details_Subscriber_create_datareader</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.Subscriber.CreateDataReader``1(Rti.Dds.Topics.ContentFilteredTopic{``0})">
            <summary>
            Creates a DataReader that will be attached and belong to this Subscriber,
            using default QoS.
            </summary>
            <param name="cft">The <see cref="T:Rti.Dds.Topics.ContentFilteredTopic`1"/> that
            the DataReader will be associated with
            </param>
            <remarks>@dref_details_Subscriber_create_datareader</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.Subscriber.CreateDataReader``1(Rti.Dds.Topics.ContentFilteredTopic{``0},System.Action{Rti.Dds.Subscription.DataReader{``0}})">
            <summary>
            Creates a DataReader that will be attached and belong to this Subscriber,
            using default QoS
            </summary>
            <param name="cft">The <see cref="T:Rti.Dds.Topics.ContentFilteredTopic`1"/> that
            the DataReader will be associated with.
            </param>
            <param name="preEnableAction">An action that allows adding handlers
            to reader events before the reader is enabled.</param>
            <remarks>@dref_details_Subscriber_create_datareader</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.Subscriber.CreateDataReader``1(Rti.Dds.Topics.ContentFilteredTopic{``0},Rti.Dds.Subscription.DataReaderQos,System.Action{Rti.Dds.Subscription.DataReader{``0}})">
            <summary>
            Creates a DataReader that will be attached and belong to this Subscriber,
            using default QoS
            </summary>
            <param name="cft">The <see cref="T:Rti.Dds.Topics.ContentFilteredTopic`1"/> that
            the DataReader will be associated with.
            </param>
            <param name="qos">The reader QoS.</param>
            <param name="preEnableAction">An action that allows adding handlers
            to reader events before the reader is enabled.</param>
            <remarks>@dref_details_Subscriber_create_datareader</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.Subscriber.CreateDataReader``1(Rti.Dds.Topics.Topic{``0},Rti.Dds.Subscription.DataReaderQos)">
            <summary>
            Creates a DataReader that will be attached and belong to this Subscriber,
            providing the QoS.
            </summary>
            <remarks>@dref_details_Subscriber_create_datareader</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.Subscriber.CreateDataReader``1(Rti.Dds.Topics.ContentFilteredTopic{``0},Rti.Dds.Subscription.DataReaderQos)">
            <summary>
            Creates a DataReader that will be attached and belong to this Subscriber,
            providing the QoS.
            </summary>
            <remarks>@dref_details_Subscriber_create_datareader</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.Subscriber.CreateDataReader(Rti.Dds.Topics.ITopicDescription)">
            <summary>
            Creates a DataReader that will be attached and belong to this Subscriber,
            without knowing the type at compile time, using default QoS.
            </summary>
            <remarks>@dref_details_Subscriber_create_datareader</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.Subscriber.CreateDataReader(Rti.Dds.Topics.ITopicDescription,Rti.Dds.Subscription.DataReaderQos)">
            <summary>
            Creates a DataReader that will be attached and belong to this Subscriber,
            without knowing the type at compile time, and providing the QoS.
            </summary>
            <remarks>@dref_details_Subscriber_create_datareader</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.Subscriber.CreateDataReader``1(Rti.Dds.Topics.ITopicDescription,System.Action{Rti.Dds.Subscription.DataReader{``0}})">
            <summary>
            Creates a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> that will be attached and belong
            to this subscriber.
            </summary>
            <param name="topicDescription">The <see cref="T:Rti.Dds.Topics.ITopicDescription"/> that
            the reader will be associated with.
            </param>
            <param name="preEnableAction">An action that allows adding handlers
            to reader events before the reader is enabled.
            </param>
        </member>
        <member name="M:Rti.Dds.Subscription.Subscriber.CreateDataReader``1(Rti.Dds.Topics.ITopicDescription,Rti.Dds.Subscription.DataReaderQos,System.Action{Rti.Dds.Subscription.DataReader{``0}})">
            <summary>
            Creates a <see cref="T:Rti.Dds.Subscription.DataReader`1"/> that will be attached and belong
            to this subscriber.
            </summary>
            <param name="topicDescription">The <see cref="T:Rti.Dds.Topics.ITopicDescription"/> that
            the reader will be associated with.
            </param>
            <param name="qos">The reader QoS</param>
            <param name="preEnableAction">An action that allows adding handlers
            to reader events before the reader is enabled.
            </param>
        </member>
        <member name="M:Rti.Dds.Subscription.Subscriber.LookupDataReader``1(System.String)">
            <summary>
            Retrieves a DataReader by looking it up by topic name
            </summary>
            <returns>A reader with that topic name or null if none exist</returns>
            <remarks>@dref_details_Subscriber_lookup_datareader</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.Subscriber.LookupDataReader(System.String)">
            <summary>
            Retrieves a DataReader by looking it up by topic name
            </summary>
            <returns>A reader with that topic name or null if none exist</returns>
            <remarks>@dref_details_Subscriber_lookup_datareader</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.Subscriber.LookupDataReaderByName(System.String)">
            <summary>
            @extension Retrieves a DataReader contained within this looking it up
            by the DataReader entity name.
            </summary>
            <returns>A reader with that entity name or null if none exist</returns>
            <remarks>@dref_details_Subscriber_lookup_datareader_by_name</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.Subscriber.BeginAccess">
            <summary>
            Indicates that the application is about to access the data samples
            in any of the <see cref="T:Rti.Dds.Subscription.DataReader`1"/> objects attached to
            this subscriber.
            </summary>
            <returns>An object whose disposal indicates the end of the coherent access</returns>
            <remarks>@dref_details_Subscriber_begin_access</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.Subscriber.EndAccess">
            <summary>
            Indicates that the application has finished accessing the data
            samples in <see cref="T:Rti.Dds.Subscription.DataReader`1"/> objects managed by this
            (alternative to <see cref="M:Rti.Dds.Subscription.CoherentAccess.Dispose"/>.)
            </summary>
            <remarks>@dref_details_Subscriber_end_access</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.Subscriber.GetDataReaders">
            <summary>
            Returns all readers (equivalent to the property
            <see cref="P:Rti.Dds.Subscription.Subscriber.DataReaders"/>).
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.Subscriber.GetDataReaders(Omg.Dds.Subscription.DataState)">
            <summary>
            Returns the <see cref="T:Rti.Dds.Subscription.DataReader`1"/> objects that contain data
            samples with the specified state.
            </summary>
            <remarks>@dref_details_Subscriber_get_datareaders</remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.Subscriber.NotifyDataReaders">
            <summary>
            When a subscriber handles the <see cref="E:Rti.Dds.Subscription.Subscriber.DataOnReaders"/> event,
            the <see cref="E:Rti.Dds.Subscription.AnyDataReader.DataAvailable"/> event is not
            triggered on its contained readers until this function is called.
            </summary>
            <remarks>@dref_details_Subscriber_notify_datareaders</remarks>
        </member>
        <member name="E:Rti.Dds.Subscription.Subscriber.DataOnReaders">
            <summary>
            Event triggered when the <see cref="F:Rti.Dds.Core.Status.StatusMask.DataOnReaders" />
            status changes
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.Subscriber.ResetEvents(Rti.Dds.Core.Status.StatusMask)">
            <summary>
            Stop notifying of events and remove their event handlers
            </summary>
            <param name="eventsToRemove">
            Selects which events will stop receiving notifications.
            Use StatusMask.All to remove all event handlers.
            </param>
        </member>
        <member name="M:Rti.Dds.Subscription.Subscriber.DisposeContainedEntities">
            <summary>
            Disposes all the entities that were created by this <see cref="T:Rti.Dds.Subscription.Subscriber"/>.
            </summary>
            <remarks>@dref_details_Subscriber_delete_contained_entities</remarks>
        </member>
        <member name="T:Rti.Dds.Subscription.DataOnReadersEventHandler">
            <summary>
            Delegate type of the handler for the
            <see cref="F:Rti.Dds.Core.Status.StatusMask.DataOnReaders"/> status.
            </summary>
            <remarks>@dref_details_SubscriberListener_on_data_on_readers</remarks>
        </member>
        <member name="T:Rti.Dds.Subscription.CoherentAccess">
            <summary>
            A disposable object returned when a coherent access begins with
            <see cref="M:Rti.Dds.Subscription.Subscriber.BeginAccess"/> and whose
            <see cref="M:Rti.Dds.Subscription.CoherentAccess.Dispose"/> method ends it.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.CoherentAccess.RelatedSubscriber">
            <summary>
            The subscriber that started a coherent access
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.CoherentAccess.Dispose">
            <summary>
            Ends this coherent set
            </summary>
        </member>
        <member name="T:Rti.Dds.Subscription.SubscriberQos">
            <summary>
            QoS policies supported by a <see cref="T:Rti.Dds.Subscription.Subscriber"/>.
            </summary>
            <remarks>@dref_details_SubscriberQos</remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.SubscriberQos.Default">
            <summary>
            Singleton containing the documented default value of a SubscriberQos
            </summary>
            <remarks>
            This is a static value containing the documented default values for each policy.
            Use <see cref="P:Rti.Dds.Domain.DomainParticipant.DefaultSubscriberQos"/> for the runtime
            default value that takes into consideration the current configuration.
            </remarks>
        </member>
        <member name="P:Rti.Dds.Subscription.SubscriberQos.Presentation">
            <summary>
            Gets the <see cref="P:Rti.Dds.Subscription.SubscriberQos.Presentation"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.SubscriberQos.Partition">
            <summary>
            Gets the <see cref="P:Rti.Dds.Subscription.SubscriberQos.Partition"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.SubscriberQos.GroupData">
            <summary>
            Gets the <see cref="P:Rti.Dds.Subscription.SubscriberQos.GroupData"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.SubscriberQos.EntityFactory">
            <summary>
            Gets the <see cref="P:Rti.Dds.Subscription.SubscriberQos.EntityFactory"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.SubscriberQos.ExclusiveArea">
            <summary>
            Gets the <see cref="P:Rti.Dds.Subscription.SubscriberQos.ExclusiveArea"/> policy.
            </summary>
        </member>
        <member name="P:Rti.Dds.Subscription.SubscriberQos.SubscriberName">
            <summary>
            Gets the <see cref="T:Rti.Dds.Core.Policy.EntityName"/> policy.
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.SubscriberQos.WithPresentation(Rti.Dds.Core.Policy.Presentation)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Subscription.SubscriberQos.Presentation"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.SubscriberQos.WithPresentation(System.Action{Rti.Dds.Core.Policy.PresentationBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Subscription.SubscriberQos.Presentation"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.SubscriberQos.WithPartition(Rti.Dds.Core.Policy.Partition)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Subscription.SubscriberQos.Partition"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.SubscriberQos.WithPartition(System.Action{System.Collections.Immutable.ImmutableList{System.String}.Builder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Subscription.SubscriberQos.Partition"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.SubscriberQos.WithGroupData(Rti.Dds.Core.Policy.GroupData)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Subscription.SubscriberQos.GroupData"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.SubscriberQos.WithGroupData(System.Action{System.Collections.Immutable.ImmutableList{System.Byte}.Builder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Subscription.SubscriberQos.GroupData"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.SubscriberQos.WithEntityFactory(Rti.Dds.Core.Policy.EntityFactory)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Subscription.SubscriberQos.EntityFactory"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.SubscriberQos.WithExclusiveArea(Rti.Dds.Core.Policy.ExclusiveArea)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Subscription.SubscriberQos.ExclusiveArea"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.SubscriberQos.WithExclusiveArea(System.Action{Rti.Dds.Core.Policy.ExclusiveAreaBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Subscription.SubscriberQos.ExclusiveArea"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.SubscriberQos.WithSubscriberName(Rti.Dds.Core.Policy.EntityName)">
            <summary>
            Creates an instance with a new <see cref="P:Rti.Dds.Subscription.SubscriberQos.SubscriberName"/> policy.
            </summary>
            <param name="policy">The new policy</param>
            <returns>
            A new instance with the same policies as the current instance, except
            for the one being set
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.SubscriberQos.WithSubscriberName(System.Action{Rti.Dds.Core.Policy.EntityNameBuilder})">
            <summary>
            Creates a new instance with a new <see cref="P:Rti.Dds.Subscription.SubscriberQos.SubscriberName"/> policy as
            configured by a build action
            </summary>
            <param name="build">A function receiving the current values of the
            policy as an argument. The changes performed by this build function
            will be used to create the new policy.
            </param>
            <returns>
            A new instance with the sames policies as the current instance,
            except for the policy being modified
            </returns>
        </member>
        <member name="M:Rti.Dds.Subscription.SubscriberQos.Equals(Rti.Dds.Subscription.SubscriberQos)">
            <summary>
            Compares all the policies for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.SubscriberQos.GetHashCode">
            <summary>
            Returns the hash code by combining that of each policy
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.SubscriberQos.Equals(System.Object)">
            <summary>
            Compares all the policies for equality
            </summary>
        </member>
        <member name="M:Rti.Dds.Subscription.SubscriberQos.ToString">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <remarks>
            The output is formatted using the default values for the
            <see cref="T:Rti.Dds.Core.QosPrintFormat"/> and only QoS policies which differ
            from the documented default are included.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.SubscriberQos.ToString(Rti.Dds.Core.QosPrintFormat)">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <param name="format">The baseQos profile.</param>
            <remarks>
            This overload accepts a value for the baseQos. Only the differences
            between the <see cref="T:Rti.Dds.Subscription.SubscriberQos"/> object being printed and
            the baseQos are included in the output.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.SubscriberQos.ToString(Rti.Dds.Subscription.SubscriberQos,Rti.Dds.Core.QosPrintFormat)">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <param name="baseQos">The baseQos profile.</param>
            <param name="format">the format used to configure the output. If not
            supplied the output is formatted using the default format.</param>
            <remarks>
            This overload accepts a value for the baseQos. Only the differences
            between the <see cref="T:Rti.Dds.Subscription.SubscriberQos"/> object being printed and
            the baseQos are included in the output.
            </remarks>
        </member>
        <member name="M:Rti.Dds.Subscription.SubscriberQos.ToString(Rti.Dds.Core.QosPrintAll,Rti.Dds.Core.QosPrintFormat)">
            <summary>
            Returns an XML representation of the QoS object.
            </summary>
            <param name="baseQos">Used to indicate that the entire QoS object
            should be included in the output. The only value which should
            be provided for this argument is QosPrintAll.Value</param>
            <param name="format">The format used to configure the output. If not
            supplied, the output is formatted using the default format.</param>
            <remarks>
            This overload accepts a parameter of type <see cref="T:Rti.Dds.Core.QosPrintAll"/>.
            Unlike the other ToString overloads, the entire QoS object will be
            included in the output.
            </remarks>
        </member>
        <member name="T:Rti.Dds.Subscription.TopicQuery">
            <summary>
            Unsupported in this release
            </summary>
            <remarks>
            @note Support for TopicQuery will be added in a future release
            </remarks>
        </member>
        <member name="T:Rti.Dds.NativeInterface.Ndds">
            <summary>
            Provides the name of the library used to import the native API with
             DllImport()
            </summary>
        </member>
        <member name="T:Rti.Dds.NativeInterface.Helpers.CString">
            <summary>
            Manages the creation and disposal of a native string from a C# string
            </summary>
        </member>
        <member name="P:Rti.Dds.NativeInterface.Helpers.CString.Ptr">
            <summary> The underlying pointer to the characters </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.Helpers.CString.#ctor(System.String)">
            <summary>Clones the string as an IntPtr wrapped in this class</summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.Helpers.CString.op_Implicit(Rti.Dds.NativeInterface.Helpers.CString)~System.IntPtr">
            <summary>Implicit conversion from CString to IntPtr</summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.Helpers.CString.op_Implicit(System.String)~Rti.Dds.NativeInterface.Helpers.CString">
            <summary>Implicit conversion from string to CString</summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.Helpers.CString.Dispose">
            <summary>Releases the native string</summary>
        </member>
        <member name="T:Rti.Dds.NativeInterface.Helpers.CStringUtf8">
            <summary>
            Manages the creation and disposal of a native string from a C# string
            </summary>
        </member>
        <member name="P:Rti.Dds.NativeInterface.Helpers.CStringUtf8.Ptr">
            <summary> The underlying pointer to the characters </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.Helpers.CStringUtf8.#ctor(System.String)">
            <summary>Clones the string as an IntPtr wrapped in this class</summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.Helpers.CStringUtf8.op_Implicit(Rti.Dds.NativeInterface.Helpers.CStringUtf8)~System.IntPtr">
            <summary>Implicit conversion from CString to IntPtr</summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.Helpers.CStringUtf8.op_Implicit(System.String)~Rti.Dds.NativeInterface.Helpers.CStringUtf8">
            <summary>Implicit conversion from string to CString</summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.Helpers.CStringUtf8.Dispose">
            <summary>Releases the native string</summary>
        </member>
        <member name="T:Rti.Dds.NativeInterface.Helpers.CStringSeq">
            <summary>
            Manages the creation and disposal of a native string sequence from a C#
            Enumerable
            </summary>
        </member>
        <member name="P:Rti.Dds.NativeInterface.Publication.NativeDataWriter.Handle">
            <summary>
            Gets the internal NativeDataWriter pointer handle.
            </summary>
            <value>The internal NativeDataWriter pointer handle.</value>
        </member>
        <member name="P:Rti.Dds.NativeInterface.Publication.NativePublisher.Handle">
            <summary>
            Gets the internal NativePublisher pointer handle.
            </summary>
            <value>The internal NativePublisher pointer handle.</value>
        </member>
        <member name="P:Rti.Dds.NativeInterface.Subscription.NativeDataReader.Handle">
            <summary>
            Gets the public NativeDataReader pointer handle.
            </summary>
            <value>The public NativeDataReader pointer handle.</value>
        </member>
        <member name="P:Rti.Dds.NativeInterface.Topics.NativeContentFilteredTopic.Handle">
            <summary>
            Gets the internal NativeContentFilteredTopic pointer handle.
            </summary>
            <value>The internal NativeContentFilteredTopic pointer handle.</value>
        </member>
        <member name="P:Rti.Dds.NativeInterface.Topics.NativeTopic.Handle">
            <summary>
            Gets the internal NativeTopic pointer handle.
            </summary>
            <value>The internal NativeTopic pointer handle.</value>
        </member>
        <member name="T:Rti.Dds.NativeInterface.TypePlugin.INativeTypePlugin">
            <summary>
            An interface declaring mirror methods for all the calbacks of a
            PRESTypePlugin
            </summary>
        </member>
        <member name="T:Rti.Dds.NativeInterface.TypePlugin.INativeTypeSupport">
            <summary>
            An interface declaring mirror methods for the native callbacks of a
            type support that creates and deletes a sample
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.InterpretedTypePlugin`2.Dispose">
            <summary>
            Deletes native resources
            </summary>
        </member>
        <member name="T:Rti.Dds.NativeInterface.TypePlugin.NativeUnmanagedArray">
            <summary>
            Wraps a C-style array. Used internally by rtiddsgen types to interface
            with the C type interpreter
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeUnmanagedArray.Initialize``1(System.Int32,System.Boolean)">
            <summary>
            Initialize a sequence of an unmanaged topic-type
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeUnmanagedArray.Destroy(System.Boolean)">
            <summary>
            Release native memory used by the array
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeUnmanagedArray.FromNative``1(``0[],System.Int32)">
            <summary>
            Copy the data from this object into a managed array
            (this method works for blittable types that don't use heap memory)
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeUnmanagedArray.FromNative``1(``0[0:,0:],System.Int32)">
            <summary>
            Copy the data from this object into a managed array
            (this method works for blittable types that don't use heap memory)
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeUnmanagedArray.FromNative``1(``0[0:,0:,0:],System.Int32)">
            <summary>
            Copy the data from this object into a managed array
            (this method works for blittable types that don't use heap memory)
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeUnmanagedArray.FromNative``1(``0[0:,0:,0:,0:],System.Int32)">
            <summary>
            Copy the data from this object into a managed array
            (this method works for blittable types that don't use heap memory)
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeUnmanagedArray.FromNative``1(``0[0:,0:,0:,0:,0:],System.Int32)">
            <summary>
            Copy the data from this object into a managed array
            (this method works for blittable types that don't use heap memory)
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeUnmanagedArray.FromNative``1(System.Array,System.Int32)">
            <summary>
            Unsupported arrays of rank larger than 5
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeUnmanagedArray.FromNativeUtf8(System.Char[],System.Int32)">
            <summary>
            Used to translate char arrays from UTF-8 byte arrays
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeUnmanagedArray.FromNativeUtf8(System.Array,System.Int32)">
            <summary>
            Used to translate char arrays from UTF-8 byte arrays
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeUnmanagedArray.ToNative``1(``0[],System.Int32)">
            <summary>
            Copy the data from a managed array into this object
            (this method works for blittable types that don't use heap memory)
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeUnmanagedArray.ToNative``1(``0[0:,0:],System.Int32)">
            <summary>
            Copy the data from a managed array into this object
            (this method works for blittable types that don't use heap memory)
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeUnmanagedArray.ToNative``1(``0[0:,0:,0:],System.Int32)">
            <summary>
            Copy the data from a managed array into this object
            (this method works for blittable types that don't use heap memory)
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeUnmanagedArray.ToNative``1(``0[0:,0:,0:,0:],System.Int32)">
            <summary>
            Copy the data from a managed array into this object
            (this method works for blittable types that don't use heap memory)
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeUnmanagedArray.ToNative``1(``0[0:,0:,0:,0:,0:],System.Int32)">
            <summary>
            Copy the data from a managed array into this object
            (this method works for blittable types that don't use heap memory)
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeUnmanagedArray.ToNative``1(System.Array,System.Int32)">
            <summary>
            Copy the data from a managed array into this object
            (this method works for blittable types that don't use heap memory)
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeUnmanagedArray.ToNativeUtf8(System.Array,System.Int32)">
            <summary>
            Used to translate char arrays to UTF-8 byte arrays
            </summary>
        </member>
        <member name="T:Rti.Dds.NativeInterface.TypePlugin.NativeManagedArray">
            <summary>
            Wraps a C-style array. Used internally by rtiddsgen types to interface
            with the C type interpreter
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeManagedArray.Initialize``2(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initialize an array of INativeTopicType
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeManagedArray.Destroy``2(System.Int32,System.Boolean)">
            <summary>
            Release native memory used by the array and elements
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeManagedArray.ToNative``2(System.Array,System.Boolean,System.Int32)">
            <summary>
            Copy the data from a managed array into this object (this method works
            for classes that require a translation to to/from INativeTopicType)
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeManagedArray.FromNative``2(System.Array,System.Boolean,System.Int32)">
            <summary>
            Copy the data from this object into a managed array (this method works
            for classes that require a translation to to/from INativeTopicType)
            </summary>
        </member>
        <member name="T:Rti.Dds.NativeInterface.TypePlugin.NativeManagedOptional">
            <summary>
            Support for optional member support used internally by rtiddsgen types to interface with the C
            type interpreter
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeManagedOptional.Initialize``2(System.Boolean,System.Boolean)">
            <summary>
            Initialize an optional member for a managed topic-type
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeManagedOptional.Destroy``2(System.Boolean)">
            <summary>
            Destroy an optional member of a managed topic-type
            Note that optionalsOnly is discarded since, by definition, everything
            within NativeManagedOptional is optional.
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeManagedOptional.FromNative``2(``0@)">
            <summary>
            FromNative implementation for optional members of unmanaged
            topic-types
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeManagedOptional.ToNative``2(``0)">
            <summary>
            ToNative implementation for optional members of managed topic-types
            </summary>
        </member>
        <member name="T:Rti.Dds.NativeInterface.TypePlugin.NativeSeq">
            <summary>
            Sequence used internally by rtiddsgen types to interface with the C
            type interpreter
            </summary>
        </member>
        <member name="P:Rti.Dds.NativeInterface.TypePlugin.NativeSeq.Count">
            <summary>
            Get the number of elements
            </summary>
        </member>
        <member name="P:Rti.Dds.NativeInterface.TypePlugin.NativeSeq.Max">
            <summary>
            Get the current capacity
            </summary>
        </member>
        <member name="P:Rti.Dds.NativeInterface.TypePlugin.NativeSeq.AbsoluteMax">
            <summary>
            Get the absolute maximum number of elements (above which
            <see cref="P:Rti.Dds.NativeInterface.TypePlugin.NativeSeq.Max"/> can't grow)
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeSeq.GetElement``1(System.Int32)">
            <summary>
            Gets a reference to an element
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeSeq.Initialize``2(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initialize a sequence of INativeTopicType
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeSeq.Destroy``2(System.Boolean)">
            <summary>
            Release native memory used by the sequence and elements
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeSeq.Destroy(System.Boolean)">
            <summary>
            Release native memory used by the sequence (element type doesn't use
            heap memory)
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeSeq.ToNative``1(``0[])">
            <summary>
            Copy the data from a managed array into this object (this method works
            for blittable types that don't use heap memory)
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeSeq.FromNative``1(``0[])">
            <summary>
            Copy the data from this object into a managed array
            (this method works for blittable types that don't use heap memory)
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeSeq.ToNative``1(Rti.Types.Sequence{``0})">
            <summary>
            Copy the data from a managed array into this object (this method works
            for blittable types that don't use heap memory)
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeSeq.ToNativeUtf8(System.Char[],System.Int32)">
            <summary>
            Used to translate char array to UTF-8 byte sequences
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeSeq.ToNativeUtf8(Rti.Types.Sequence{System.Char})">
            <summary>
            Used to translate char sequences to UTF-8 byte sequences
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeSeq.FromNativeUtf8(System.Char[],System.Int32)">
            <summary>
            Used to translate char array from UTF-8 byte sequences
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeSeq.FromNativeUtf8(Rti.Types.Sequence{System.Char})">
            <summary>
            Used to translate char sequences to UTF-8 byte sequences
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeSeq.FromNative``1(Rti.Types.Sequence{``0})">
            <summary>
            Copy the data from this object into a managed array
            (this method works for blittable types that don't use heap memory)
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeSeq.ToNative``2(System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>
            Copy the data from a managed list into this object (this method works
            for classes that require a translation to to/from INativeTopicType)
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeSeq.FromNative``2(Omg.Types.ISequence{``0},System.Boolean)">
            <summary>
            Copy the data from this object into a managed list (this method works
            for classes that require a translation to to/from INativeTopicType)
            </summary>
        </member>
        <member name="T:Rti.Dds.NativeInterface.TypePlugin.NativeString">
            <summary>
            Wraps a C-style string. Used internally by rtiddsgen types to interface
            with the C type interpreter
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeString.Initialize(System.Int32,System.Boolean)">
            <summary>
            Initialize a string
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeString.Destroy">
            <summary>
            Release native memory used by the string
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeString.FromNative">
            <summary>
            Copy data from this NativeString object into the managed string
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeString.FromNativeOptional">
            <summary>
            Copy data from this optional NativeString object into the managed optional string.
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeString.ToNative(System.String,System.Int32)">
            <summary>
            Copy the data from a managed string into this NativeString object
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeString.ToNativeOptional(System.String,System.Int32)">
            <summary>
            Copy the data from an optional managed string into this optional NativeString object
            </summary>
        </member>
        <member name="T:Rti.Dds.NativeInterface.TypePlugin.NativeStringArray">
            <summary>
            Array of Strings used internally by rtiddsgen types to interface with
            the C type interpreter
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeStringArray.Initialize(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Initialize an array of NativeString
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeStringArray.Destroy(System.UInt32)">
            <summary>
            Release native memory used by the array and elements
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeStringArray.ToNative(System.Array,System.Int32,System.Int32)">
            <summary>
            Copy the data from a managed array into this object
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeStringArray.FromNative(System.String[],System.Int32)">
            <summary>
            Copy the data from this object into a managed array
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeStringArray.FromNative(System.Array,System.Int32)">
            <summary>
            Copy the data from this object into a managed array
            </summary>
        </member>
        <member name="T:Rti.Dds.NativeInterface.TypePlugin.NativeStringSeq">
            <summary>
            Sequence of strings used internally by rtiddsgen types to interface with
            the C type interpreter
            </summary>
        </member>
        <member name="P:Rti.Dds.NativeInterface.TypePlugin.NativeStringSeq.Count">
            <summary>
            Get the number of elements
            </summary>
        </member>
        <member name="P:Rti.Dds.NativeInterface.TypePlugin.NativeStringSeq.Max">
            <summary>
            Get the current capacity of the sequence
            </summary>
        </member>
        <member name="P:Rti.Dds.NativeInterface.TypePlugin.NativeStringSeq.AbsoluteMax">
            <summary>
            Get the absolute maximum number of elements (above which
            <see cref="P:Rti.Dds.NativeInterface.TypePlugin.NativeStringSeq.Max"/> can't grow)
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeStringSeq.GetElement(System.Int32)">
            <summary>
            Gets a reference to an element
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeStringSeq.Initialize(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initialize an sequence of NativeString
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeStringSeq.Destroy">
            <summary>
            Release native memory used by the sequence and elements
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeStringSeq.ToNative(Omg.Types.ISequence{System.String},System.Int32)">
            <summary>
            Copy the data from a managed list into this object
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeStringSeq.FromNative(Omg.Types.ISequence{System.String})">
            <summary>
            Copy the data from this object into a managed list
            </summary>
        </member>
        <member name="T:Rti.Dds.NativeInterface.TypePlugin.NativeUnmanagedOptional">
            <summary>
            Support for optional member used internally by rtiddsgen types to interface with the C
            type interpreter
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeUnmanagedOptional.Initialize(System.Boolean,System.Boolean)">
            <summary>
            Initialize an optional member for an unmanaged topic-type
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeUnmanagedOptional.Destroy(System.Boolean)">
            <summary>
            Destroy an optional member of an unmanaged topic-type.
            Note that optionalsOnly is discarded since, by definition, T cannot
            have any optional members because T can only be a primitive type or
            a blittable struct.
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeUnmanagedOptional.FromNative``1">
            <summary>
            FromNative implementation for optional members of unmanaged
            topic-types
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeUnmanagedOptional.ToNative``1(System.Nullable{``0})">
            <summary>
            ToNative implementation for optional members of unmanaged topic-types
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeUnmanagedOptional.ToNativeChar(System.Nullable{System.Char})">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeUnmanagedOptional.FromNativeChar">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="T:Rti.Dds.NativeInterface.TypePlugin.NativeWstring">
            <summary>
            Wraps a C-style wide string. Used internally by rtiddsgen types to
            interface with the C type interpreter
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeWstring.Initialize(System.Int32,System.Boolean)">
            <summary>
            Initialize a string
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeWstring.Destroy">
            <summary>
            Release native memory used by the string
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeWstring.FromNative">
            <summary>
            Copy data from this NativeWString object into the managed string
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeWstring.FromNativeOptional">
            <summary>
            Copy data from this optional NativeWstring object into the managed optional string.
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeWstring.ToNative(System.String,System.Int32)">
            <summary>
            Copy the data from a managed string into this NativeWstring object
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeWstring.ToNativeOptional(System.String,System.Int32)">
            <summary>
            Copy the data from an optional managed string into this optional NativeWstring object
            </summary>
        </member>
        <member name="T:Rti.Dds.NativeInterface.TypePlugin.NativeWstringArray">
            <summary>
            Array of Strings used internally by rtiddsgen types to interface with
            the C type interpreter
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeWstringArray.Initialize(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Initialize an array of NativeWstring
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeWstringArray.Destroy(System.UInt32)">
            <summary>
            Release native memory used by the array and elements
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeWstringArray.ToNative(System.Array,System.Int32,System.Int32)">
            <summary>
            Copy the data from a managed array into this object
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeWstringArray.FromNative(System.String[],System.Int32)">
            <summary>
            Copy the data from this object into a managed array
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeWstringArray.FromNative(System.Array,System.Int32)">
            <summary>
            Copy the data from this object into a managed array
            </summary>
        </member>
        <member name="T:Rti.Dds.NativeInterface.TypePlugin.NativeWstringSeq">
            <summary>
            Sequence of strings used internally by rtiddsgen types to interface with
            the C type interpreter
            </summary>
        </member>
        <member name="P:Rti.Dds.NativeInterface.TypePlugin.NativeWstringSeq.Count">
            <summary>
            Get the number of elements
            </summary>
        </member>
        <member name="P:Rti.Dds.NativeInterface.TypePlugin.NativeWstringSeq.Max">
            <summary>
            Get the current capacity of the sequence
            </summary>
        </member>
        <member name="P:Rti.Dds.NativeInterface.TypePlugin.NativeWstringSeq.AbsoluteMax">
            <summary>
            Get the absolute maximum number of elements (above which
            <see cref="P:Rti.Dds.NativeInterface.TypePlugin.NativeWstringSeq.Max"/> can't grow)
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeWstringSeq.GetElement(System.Int32)">
            <summary>
            Gets a reference to an element
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeWstringSeq.Initialize(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initialize an sequence of NativeWstring
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeWstringSeq.Destroy">
            <summary>
            Release native memory used by the sequence and elements
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeWstringSeq.ToNative(Omg.Types.ISequence{System.String},System.Int32)">
            <summary>
            Copy the data from a managed list into this object
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.NativeWstringSeq.FromNative(Omg.Types.ISequence{System.String})">
            <summary>
            Copy the data from this object into a managed list
            </summary>
        </member>
        <member name="T:Rti.Dds.NativeInterface.TypePlugin.TypePluginForwarder">
            <summary>
            Forwards callbacks coming from the C PRESTypePlugin and forwards them
            to an INativeTypePlugin
            </summary>
        </member>
        <member name="T:Rti.Dds.NativeInterface.TypePlugin.TypeSupportFactory">
            <summary>
            (For internal use only) Manages the creation of TypeSupport and
            SampleAccessInfo for IDL-generated types
            </summary>
        </member>
        <member name="P:Rti.Dds.NativeInterface.TypePlugin.TypeSupportFactory.Disposed">
            <summary>
            Indicates whether this object has already been disposed
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.TypeSupportFactory.CreateTypeWithAccessInfo``1(Rti.Types.Dynamic.StructBuilder)">
            <summary>
            Creates a StructType from a pre-populated builder and adds
            the necessary SampleAccessInfo for the blittable type T
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.TypeSupportFactory.CreateTypeWithAccessInfo``1(Rti.Types.Dynamic.UnionBuilder)">
            <summary>
            Creates a UnionType from a pre-populated builder and adds
            the necessary SampleAccessInfo for the blittable type T
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.TypeSupportFactory.CreateAliasWithAccessInfo``1(Rti.Types.Dynamic.DynamicTypeFactory,System.String,Rti.Types.Dynamic.DynamicType,System.Boolean)">
            <summary>
            Creates an AliasType from a pre-populated builder and adds
            the necessary SampleAccessInfo for the blittable type T
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.TypeSupportFactory.CreateSequenceWithAccessInfo(Rti.Types.Dynamic.DynamicTypeFactory,Rti.Types.Dynamic.DynamicType,System.UInt32)">
            <summary>
            Creates a SequenceType with the appropriate sample access info
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.TypeSupportFactory.CreateArrayWithAccessInfo``1(Rti.Types.Dynamic.DynamicTypeFactory,Rti.Types.Dynamic.DynamicType,System.UInt32)">
            <summary>
            Creates an ArrayType with the appropriate sample access info
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.TypeSupportFactory.CreateArrayWithAccessInfo``1(Rti.Types.Dynamic.DynamicTypeFactory,Rti.Types.Dynamic.DynamicType,System.UInt32[])">
            <summary>
            Creates an ArrayType with the appropriate sample access info
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.TypeSupportFactory.CreateTypeSupport``2">
            <summary>
            Creates a TypeSupport object
            </summary>
        </member>
        <member name="M:Rti.Dds.NativeInterface.TypePlugin.TypeSupportFactory.Dispose">
            <summary>
            Releases the native resources used by the objects created by
            this factory
            </summary>
        </member>
        <member name="T:Rti.Types.Dynamic.AliasType">
            <summary>
            Represents an IDL alias type (typedef)
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.AliasType.IsExternal">
            <summary>
            Whether the aliased type is marked \@external
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.AliasType.RelatedType">
            <summary>
            Gets the aliased type
            </summary>
        </member>
        <member name="T:Rti.Types.Dynamic.ArrayType">
            <summary>
            Represents an IDL array.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.ArrayType.DimensionCount">
            <summary>
            This function returns the number of dimensions of an array type.
            </summary>
            <remarks>@dref_details_TypeCode_array_dimension_count</remarks>
        </member>
        <member name="P:Rti.Types.Dynamic.ArrayType.TotalElementCount">
            <summary>
            The number of elements in an array.
            </summary>
            <remarks>@dref_details_TypeCode_element_count</remarks>
        </member>
        <member name="P:Rti.Types.Dynamic.ArrayType.ContentType">
            <summary>
            Returns the type of the members of the array.
            </summary>
            <remarks>@dref_details_TypeCode_content_type</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.ArrayType.GetDimension(System.UInt32)">
            <summary>
            Returns the index-th dimension of an array type.
            </summary>
            <remarks>@dref_details_TypeCode_array_dimension</remarks>
        </member>
        <member name="T:Rti.Types.Dynamic.DynamicData">
            <summary>
            A data sample of any complex data type, which can be inspected and
            manipulated reflectively.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.DynamicData.Disposed">
            <summary>
            Indicates whether this object has been disposed
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.#ctor(Rti.Types.Dynamic.DynamicType)">
            <summary>
            Create a new DynamicData object for a given type
            </summary>
            <param name="type">The type definition for this data sample</param>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.#ctor(Rti.Types.Dynamic.DynamicType,Rti.Types.Dynamic.DynamicDataProperty)">
            <summary>
            Create a new DynamicData object for a given type and custom configuration
            </summary>
            <param name="type">The type definition for this data sample</param>
            <param name="property">Configures this object's behavior</param>
        </member>
        <member name="P:Rti.Types.Dynamic.DynamicData.Type">
            <summary>
            Get the data type, of which this DynamicData represents an instance.
            </summary>
            <remarks>@dref_details_DynamicData_get_type</remarks>
        </member>
        <member name="P:Rti.Types.Dynamic.DynamicData.TypeKind">
            <summary>
            Get the kind of this object's data type.
            </summary>
            <remarks>@dref_details_DynamicData_get_type_kind</remarks>
        </member>
        <member name="P:Rti.Types.Dynamic.DynamicData.MemberCount">
            <summary>
            The number of data members in this DynamicData sample.
            </summary>
            <remarks>@dref_details_DynamicDataInfo_member_count</remarks>
        </member>
        <member name="P:Rti.Types.Dynamic.DynamicData.Info">
            <summary>
            Gets information about this DynamicData sample.
            </summary>
            <remarks>@dref_details_DynamicData_get_info</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.Clone">
            <summary>
            Creates a deep copy of this object
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.CopyFrom(Rti.Types.Dynamic.DynamicData)">
            <summary>
            Copies the sample into this one, overwritting it.
            Both samples must have the same type.
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.GetValue``1(System.String)">
            <summary>
            Gets value of type <typeparamref name="T"/> using the name of the member.
            </summary>
            <typeparam name="T">The type of the value to retrieve. Supported types are:
            byte, short, ushort, int, uint, float, double, LongDouble, decimal, bool, char, long,
            ulong,string, DynamicData, byte[], short[], ushort[], int[], uint[],
            float[], double[], LongDouble[], bool[], char[], long[], ulong[].</typeparam>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.GetValue``1(System.Int32)">
            <summary>
            Gets value of type <typeparamref name="T"/> using the id of the member.
            </summary>
            <typeparam name="T">The type of the value to retrieve. Supported types are:
            byte, short, ushort, int, uint, float, double, LongDouble, decimal, bool, char, long,
            ulong,string, DynamicData, byte[], short[], ushort[], int[], uint[],
            float[], double[], LongDouble[], bool[], char[], long[], ulong[].
            </typeparam>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.SetValue``1(System.String,``0)">
            <summary>
            Sets value of type <typeparamref name="T"/> using the name of the member.
            </summary>
            <typeparam name="T">The type of the value to retrieve. Supported types are:
            byte, short, ushort, int, uint, float, double, LongDouble, decimal, bool, char, long,
            ulong,string, DynamicData, byte[], short[], ushort[], int[], uint[],
            float[], double[], LongDouble[], bool[], char[], long[], ulong[].
            </typeparam>
            <remarks>
            The type of the value, `T`, must coincide with the declared type of the member.
            `T` is `string` for both regular IDL string and IDL wstring.
            If the member is an aggregation or a collection, `T` is
            <see cref="T:Rti.Types.Dynamic.DynamicData"/>. <see cref="M:Rti.Types.Dynamic.DynamicData.SetAnyValue(System.String,System.Object)"/>
            can be used to perform conversion from `T` to the declared type of
            the member.
            </remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.SetValue``1(System.Int32,``0)">
            <summary>
            Sets value of type <typeparamref name="T"/> using the id of the member.
            </summary>
            <typeparam name="T">The type of the value to retrieve. Supported types are:
            byte, short, ushort, int, uint, float, double, LongDouble, decimal, bool, char, long,
            ulong, string, DynamicData, byte[], short[], ushort[], int[], uint[],
            float[], double[], LongDouble[], bool[], char[], long[], ulong[]. </typeparam>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.SetAnyValue(System.String,System.Object)">
            <summary>
            Sets a member value from any object
            </summary>
            <param name="memberName">The name of the member to set</param>
            <param name="value">
            The value to set. This method will try to convert it to the type of
            the member
            </param>
            <remarks>
            <para>
            This method allows setting a member value without knowing the type
            of the value at compilation time. If the runtime type of `value`
            doesn't coincide with the type of the member type, this method uses
            System.Convert to attempt to convert it. If the conversion is not
            possible, any of the exceptions thrown by System.Convert may be
            thrown by this method as well.
            </para>
            <para>
            This method provides great flexibility, but is less efficient than
            the concrete setters.
            </para>
            <example>
            The following example shows how to set an integer from a string:
            <code>
            sample.SetAnyValue("my_int", "45");
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.SetAnyValue(System.Int32,System.Object)">
            <summary>
            Sets a member value from an object
            </summary>
            <param name="memberId">The id of the member to set</param>
            <param name="value">
            The value to set. This method will try to convert it to the type of
            the member
            </param>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.GetAnyValue(System.String)">
            <summary>
            Gets a member value without specifying its expected type at
            compilation time
            </summary>
            <param name="memberName">The name of the member to set</param>
            <returns>The value of that member as an object</returns>
            <remarks>
            This function allows getting the value of member without knowing
            its type at compilation time. If the type is known, use the specific
            getter, such as GetValue&lt;int&gt; for ints.
            </remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.GetAnyValue(System.Int32)">
            <summary>
            Gets a member value without specifying its expected type at
            compilation time
            </summary>
            <param name="memberId">The id of the member to set</param>
            <returns>The value of that member as an object</returns>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.GetDiscriminatorValue">
            <summary>
            Obtains the value of the union discriminator (only for unions)
            </summary>
            <returns>
            The union discriminator. That is, the value that identifies
            which of the union members is valid
            </returns>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.LoanValue(System.String)">
            <summary>
            Returns a loaned object to provide access to a complex field of this DynamicData object.
            </summary>
            <remarks>@dref_details_DynamicData_bind_complex_member</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.LoanValue(System.Int32)">
            <summary>
            Returns a loaned object to provide access to a complex field of this DynamicData object.
            </summary>
            <remarks>@dref_details_DynamicData_bind_complex_member</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.ClearAllMembers">
            <summary>
            Clear the contents of all data members of this object.
            </summary>
            <remarks>@dref_details_DynamicData_clear_all_members</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.ClearMember(System.String)">
            <summary>
            Clear the contents of a single data member of this object.
            </summary>
            <remarks>@dref_details_DynamicData_clear_member</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.ClearMember(System.Int32)">
            <summary>
            Clear the contents of a single data member of this object.
            </summary>
            <remarks>@dref_details_DynamicData_clear_member</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.ClearOptionalMember(System.String)">
            <summary>
            Clear the contents of a single optional data member of this object.
            </summary>
            <remarks>@dref_details_DynamicData_clear_optional_member</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.ClearOptionalMember(System.Int32)">
            <summary>
            Clear the contents of a single optional data member of this object.
            </summary>
            <remarks>@dref_details_DynamicData_clear_optional_member</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.MemberExists(System.String)">
            <summary>
            Indicates whether a member exists in this sample
            </summary>
            <remarks>@dref_details_DynamicData_member_exists</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.MemberExists(System.Int32)">
            <summary>
            Indicates whether a member exists in this sample
            </summary>
            <remarks>@dref_details_DynamicData_member_exists</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.MemberExistsInType(System.String)">
            <summary>
            Indicates whether a member is defined in this data sample's type.
            </summary>
            <remarks>@dref_details_DynamicData_member_exists_in_type</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.MemberExistsInType(System.Int32)">
            <summary>
            Indicates whether a member is defined in this data sample's type.
            </summary>
            <remarks>@dref_details_DynamicData_member_exists_in_type</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.IsMemberKey(System.String)">
            <summary>
            Indicates whether a given member forms part of the key of this sample's data type.
            </summary>
            <remarks>@dref_details_DynamicData_is_member_key</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.IsMemberKey(System.Int32)">
            <summary>
            Indicates whether a given member forms part of the key of this sample's data type.
            </summary>
            <remarks>@dref_details_DynamicData_is_member_key</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.GetMemberInfo(System.String)">
            <summary>
            Gets information about a member of this DynamicData sample.
            </summary>
            <remarks>@dref_details_DynamicData_get_member_info</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.GetMemberInfo(System.Int32)">
            <summary>
            Gets information about a member of this DynamicData sample.
            </summary>
            <remarks>@dref_details_DynamicData_get_member_info</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.GetMemberInfoByIndex(System.UInt32)">
            <summary>
            Gets information about a member (identified by its position) of this DynamicData sample.
            </summary>
            <remarks>@dref_details_DynamicData_get_member_info</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.Dispose">
            <summary>
            Releases the native resources (a finalizer is provided as well)
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.ToCdrBuffer">
            <summary>
            Serializes a DynamicData as a CDR buffer of octets into a new array.
            </summary>
            <returns>A new array with the serialized data</returns>
            <remarks>@dref_details_DynamicData_to_cdr_buffer</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.ToCdrBuffer(System.Byte[])">
            <summary>
            Serializes a DynamicData as a CDR buffer of octets into an existing array
            </summary>
            <param name="buffer">
            An existing buffer where to write the serialized data. It needs to have enough space
            to include the data or the operation will fail. You can use
            <see cref="M:Rti.Types.Dynamic.StructType.GetCdrSerializedSampleMaxSize(System.Int16)"/> to get the max possible size
            </param>
            <returns>The number of bytes that were written into the buffer</returns>
            <remarks>@dref_details_DynamicData_to_cdr_buffer</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.FromCdrBuffer(System.Byte[])">
            <summary>
            Populates this DynamicData object from the serialized CDR data in a buffer
            </summary>
            <param name="buffer">Contains the serialized data</param>
            <remarks>@dref_details_DynamicData_from_cdr_buffer</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.GetHashCode">
            <summary>
            Returns a simple hash code.
            </summary>
            <remarks>
            @warning This method currently returns 0 always. If you
            need an efficient hash, implement one for each specific data type
            </remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.ToString(Rti.Dds.Topics.PrintFormatProperty)">
            <summary>
            Get a string representation of a DynamicData object.
            </summary>
            <param name="format">Allows changing the print format</param>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.ToString">
            <summary>
            Get a string representation of a DynamicData object with the default format
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.Equals(System.Object)">
            <summary>
            Indicate whether two data samples are equal
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicData.Equals(Rti.Types.Dynamic.DynamicData)">
            <summary>
            Indicate whether two data samples are equal
            </summary>
        </member>
        <member name="T:Rti.Types.Dynamic.DynamicDataInfo">
            <summary>
            A descriptor for a <see cref="T:Rti.Types.Dynamic.DynamicData"/> object.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.DynamicDataInfo.MemberCount">
            <summary>
            The number of data members in this <see cref="T:Rti.Types.Dynamic.DynamicData"/> sample.
            </summary>
            <remarks>@dref_details_DynamicDataInfo_member_count</remarks>
        </member>
        <member name="P:Rti.Types.Dynamic.DynamicDataInfo.StoredSize">
            <summary>
            The number of bytes currently used to store the data of this <see cref="T:Rti.Types.Dynamic.DynamicData"/> sample.
            </summary>
            <remarks>@dref_details_DynamicDataInfo_stored_size</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicDataInfo.Equals(System.Object)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicDataInfo.GetHashCode">
            <summary>
            Gets the hashcode.
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicDataInfo.Equals(Rti.Types.Dynamic.DynamicDataInfo)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="T:Rti.Types.Dynamic.DynamicDataProperty">
            <summary>
            A collection of attributes used to optionally configure a
            <see cref="T:Rti.Types.Dynamic.DynamicData"/> object in its constructor.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.DynamicDataProperty.BufferInitialSize">
            <summary>
            The initial amount of memory used by the underlying <see cref="T:Rti.Types.Dynamic.DynamicData"/> buffer, in bytes.
            </summary>
            <remarks>@dref_details_DynamicDataProperty_t_buffer_initial_size</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicDataProperty.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicDataProperty.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicDataProperty.Equals(Rti.Types.Dynamic.DynamicDataProperty)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Types.Dynamic.DynamicType">
            <summary>
            The definition of a data type, which can be used to inspect DDS types,
            and to dynamically create new types and <see cref="T:Rti.Types.Dynamic.DynamicData"/>
            samples.
            </summary>
            <remarks>
            <para>The <see cref="T:Rti.Types.Dynamic.DynamicTypeFactory"/> allows creating DynamicType objects.</para>
            <para>@dref_details_TypeCode</para>
            </remarks>
        </member>
        <member name="P:Rti.Types.Dynamic.DynamicType.Name">
            <summary>
            The type name.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.DynamicType.Kind">
            <summary>
            The type kind.
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicType.Equals(System.Object)">
            <summary>
            Checks if both types definitions are identical.
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicType.GetHashCode">
            <summary>
            A simple hash code function.
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicType.ToString">
            <summary>
            Prints the IDL definition of this type
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicType.Equals(Rti.Types.Dynamic.DynamicType)">
            <summary>
            Checks if both types definitions are identical.
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicType.Dispose">
            <summary>
            Deletes the native resources used by this object. Calling Dispose()
            for a DynamicType is optional.
            </summary>
        </member>
        <member name="T:Rti.Types.Dynamic.DynamicTypeFactory">
            <summary>
            A factory for creating DynamicTypes.
            </summary>
            <remarks>@dref_details_TypeCodeFactory</remarks>
        </member>
        <member name="P:Rti.Types.Dynamic.DynamicTypeFactory.Instance">
            <summary>
            A singleton for the factory.
            </summary>
        </member>
        <member name="T:Rti.Types.Dynamic.DynamicTypeFactory.WideCharType">
            <summary>
            An empty struct used only as a type argument to <see cref="M:Rti.Types.Dynamic.DynamicTypeFactory.GetPrimitiveType``1"/>
            to disambiguate between IDL `char` (UTF-8 character) and
            IDL `wchar` (UTF-16 character).
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicTypeFactory.GetPrimitiveType``1">
            <summary>
            Gets the DynamicType that represents a primitive type.
            </summary>
            <typeparam name="T">The primitive type to obtain, such as int</typeparam>
            <remarks>See also <see cref="M:Rti.Types.Dynamic.DynamicTypeFactory.GetPrimitiveType(Omg.Types.Dynamic.TypeKind)"/></remarks>
            <exception cref="T:System.ArgumentException">
            When `T` is not a valid primitive type.
            </exception>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicTypeFactory.GetPrimitiveType(Omg.Types.Dynamic.TypeKind)">
            <summary>
            Gets the DynamicType that represents a primitive type.
            </summary>
            <param name="primitiveKind">
            A type kind represneting a primitive type, such as
            <see cref="F:Omg.Types.Dynamic.TypeKind.Int32"/>.
            </param>
            <exception cref="T:System.ArgumentException">
            When primitiveKind is not a primitive TypeKind
            </exception>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicTypeFactory.BuildStruct">
            <summary>
            Returns a <see cref="T:Rti.Types.Dynamic.StructBuilder"/> that allows creating an <see cref="T:Rti.Types.Dynamic.StructType"/>.
            </summary>
            <returns>A new empty builder to create a new <see cref="T:Rti.Types.Dynamic.StructType"/>.</returns>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicTypeFactory.BuildStruct(Rti.Types.Dynamic.StructType)">
            <summary>
            Returns a builder that allows creating a new <see cref="T:Rti.Types.Dynamic.StructType"/>
            from an existing <see cref="T:Rti.Types.Dynamic.StructType"/>.
            </summary>
            <param name="structType">The type to duplicate</param>
            <returns>
            A builder that contains the information about the input <see cref="T:Rti.Types.Dynamic.StructType"/>.
            Use this builder to update its properties, add or remove members, etc.
            </returns>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicTypeFactory.BuildUnion">
            <summary>
            Returns a <see cref="T:Rti.Types.Dynamic.UnionBuilder"/> that allows creating an <see cref="T:Rti.Types.Dynamic.UnionType"/>.
            </summary>
            <returns>A new empty builder to create a new <see cref="T:Rti.Types.Dynamic.UnionType"/>.</returns>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicTypeFactory.BuildUnion(Rti.Types.Dynamic.UnionType)">
            <summary>
            Returns a builder that allows creating a new <see cref="T:Rti.Types.Dynamic.UnionType"/>
            from an existing <see cref="T:Rti.Types.Dynamic.UnionType"/>.
            </summary>
            <param name="unionType">The type to duplicate</param>
            <returns>
            A builder that contains the information about the input <see cref="T:Rti.Types.Dynamic.UnionType"/>.
            Use this builder to update its properties, add or remove members, etc.
            </returns>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicTypeFactory.BuildEnum">
            <summary>
            Returns an <see cref="T:Rti.Types.Dynamic.EnumBuilder"/> that allows creating an <see cref="T:Rti.Types.Dynamic.EnumType"/>.
            </summary>
            <returns>A new empty builder to create a new <see cref="T:Rti.Types.Dynamic.EnumType"/>.</returns>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicTypeFactory.BuildEnum(Rti.Types.Dynamic.EnumType)">
            <summary>
            Returns a builder that allows creating a new <see cref="T:Rti.Types.Dynamic.EnumType"/>
            from an existing <see cref="T:Rti.Types.Dynamic.EnumType"/>.
            </summary>
            <param name="enumType">The type to duplicate</param>
            <returns>
            A builder that contains the information about the input <see cref="T:Rti.Types.Dynamic.EnumType"/>.
            Use this builder to update its properties, add or remove members, etc.
            </returns>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicTypeFactory.CreateString(System.UInt32)">
            <summary>
            Creates a <see cref="T:Rti.Types.Dynamic.StringType"/> with the given bounds.
            </summary>
            <param name="bounds">
            The bounds for a string <see cref="P:Rti.Types.Dynamic.StringType.Bounds"/>. For unlimited
            bounds, use <see cref="F:Rti.Types.Dynamic.StringType.Unbounded"/>.
            </param>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicTypeFactory.CreateWideString(System.UInt32)">
            <summary>
            Creates a <see cref="T:Rti.Types.Dynamic.WideStringType"/> with the given bounds.
            </summary>
            <param name="bounds">
            The bounds for a wide string <see cref="P:Rti.Types.Dynamic.WideStringType.Bounds"/>. For unlimited
            bounds, use <see cref="F:Rti.Types.Dynamic.WideStringType.Unbounded"/>.
            </param>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicTypeFactory.CreateSequence(Rti.Types.Dynamic.DynamicType,System.UInt32)">
            <summary>
            Creates a <see cref="T:Rti.Types.Dynamic.SequenceType"/> of a certain type and bounds.
            </summary>
            <param name="elementType">
            The <see cref="T:Rti.Types.Dynamic.DynamicType"/> of the elements contained in the sequence.
            </param>
            <param name="bounds">
            The bounds for a sequence <see cref="P:Rti.Types.Dynamic.SequenceType.Bounds"/>. For unlimited
            bounds, use <see cref="F:Rti.Types.Dynamic.SequenceType.Unbounded"/>.
            </param>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicTypeFactory.CreateArray(Rti.Types.Dynamic.DynamicType,System.UInt32)">
            <summary>
            Creates a single-dimension <see cref="T:Rti.Types.Dynamic.ArrayType"/> of a certain type and size.
            </summary>
            <param name="elementType">
            The <see cref="T:Rti.Types.Dynamic.DynamicType"/> of the elements contained in the array.
            </param>
            <param name="singleDimension">
            The size of the array.
            </param>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicTypeFactory.CreateArray(Rti.Types.Dynamic.DynamicType,System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            Creates an <see cref="T:Rti.Types.Dynamic.ArrayType"/> of a certain type and specified dimensions.
            </summary>
            <param name="elementType">
            The <see cref="T:Rti.Types.Dynamic.DynamicType"/> of the elements contained in the array.
            </param>
            <param name="dimensions">
            Size for each of the dimensions in the array.
            </param>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicTypeFactory.CreateAlias(System.String,Rti.Types.Dynamic.DynamicType,System.Boolean)">
            <summary>
            Creates an <see cref="T:Rti.Types.Dynamic.AliasType"/>.
            </summary>
            <param name="name">The type name</param>
            <param name="relatedType">The aliased type</param>
            <param name="isExternal">Whether the aliased type is external</param>
        </member>
        <member name="M:Rti.Types.Dynamic.DynamicTypeFactory.Dispose">
            <summary>
            Disposes the <see cref="T:Rti.Types.Dynamic.DynamicTypeFactory"/>.
            </summary>
            <remarks>
            Note: it is not necessary to manually dispose this object.
            </remarks>
        </member>
        <member name="T:Rti.Types.Dynamic.EnumBuilder">
            <summary>
            Allows creating a new <see cref="T:Rti.Types.Dynamic.EnumType"/> via
            <see cref="M:Rti.Types.Dynamic.DynamicTypeFactory.BuildEnum"/>.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.EnumBuilder.Name">
            <summary>
            The enum name.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.EnumBuilder.ExtensibilityKind">
            <summary>
            The value for the IDL extensibility kind.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.EnumBuilder.Members">
            <summary>
            The enum members.
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.EnumBuilder.WithName(System.String)">
            <summary>
            Returns the same <see cref="T:Rti.Types.Dynamic.EnumBuilder"/> instance with a
            modified <see cref="P:Rti.Types.Dynamic.EnumBuilder.Name"/>.
            </summary>
            <param name="name">The new <see cref="P:Rti.Types.Dynamic.EnumBuilder.Name"/> to be set.</param>
        </member>
        <member name="M:Rti.Types.Dynamic.EnumBuilder.WithExtensibility(Omg.Types.ExtensibilityKind)">
            <summary>
            Returns the same <see cref="T:Rti.Types.Dynamic.EnumBuilder"/> instance with a
            modified <see cref="P:Rti.Types.Dynamic.EnumBuilder.ExtensibilityKind"/>.
            </summary>
            <param name="kind">The new <see cref="P:Rti.Types.Dynamic.EnumBuilder.ExtensibilityKind"/> to be set.</param>
        </member>
        <member name="M:Rti.Types.Dynamic.EnumBuilder.AddMember(Rti.Types.Dynamic.EnumMember)">
            <summary>
            Returns the same <see cref="T:Rti.Types.Dynamic.EnumBuilder"/> instance with a
            new <see cref="T:Rti.Types.Dynamic.EnumMember"/> added to <see cref="P:Rti.Types.Dynamic.EnumBuilder.Members"/>.
            </summary>
            <param name="member">The <see cref="T:Rti.Types.Dynamic.EnumMember"/> to be added.</param>
        </member>
        <member name="M:Rti.Types.Dynamic.EnumBuilder.AddMembers(Rti.Types.Dynamic.EnumMember[])">
            <summary>
            Returns the same <see cref="T:Rti.Types.Dynamic.EnumBuilder"/> instance with a number
            of new <see cref="T:Rti.Types.Dynamic.EnumMember"/> added to <see cref="P:Rti.Types.Dynamic.EnumBuilder.Members"/>.
            </summary>
            <param name="members">The array of <see cref="T:Rti.Types.Dynamic.EnumMember"/> to be added.</param>
        </member>
        <member name="M:Rti.Types.Dynamic.EnumBuilder.AddMembers(System.Collections.Generic.IEnumerable{Rti.Types.Dynamic.EnumMember})">
            <summary>
            Returns the same <see cref="T:Rti.Types.Dynamic.EnumBuilder"/> instance with a number
            of new <see cref="T:Rti.Types.Dynamic.EnumMember"/> added to <see cref="P:Rti.Types.Dynamic.EnumBuilder.Members"/>.
            </summary>
            <param name="members">The enumerable object of <see cref="T:Rti.Types.Dynamic.EnumMember"/> to be added.</param>
        </member>
        <member name="M:Rti.Types.Dynamic.EnumBuilder.Create">
            <summary>
            Creates a new <see cref="T:Rti.Types.Dynamic.EnumType"/> object using the current properties
            of the <see cref="T:Rti.Types.Dynamic.EnumBuilder"/> instance.
            </summary>
        </member>
        <member name="T:Rti.Types.Dynamic.EnumMember">
            <summary>
            Represents an enumerator in an <see cref="T:Rti.Types.Dynamic.EnumType"/>.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.EnumMember.Name">
            <summary>
            The member name.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.EnumMember.Ordinal">
            <summary>
            The integer value for this member in the enumeration.
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.EnumMember.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new <see cref="T:Rti.Types.Dynamic.EnumMember"/>.
            </summary>
            <param name="name">The name</param>
            <param name="ordinal">The integer value for the member</param>
        </member>
        <member name="M:Rti.Types.Dynamic.EnumMember.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.EnumMember.GetHashCode">
            <summary>
            Calculates a hash code
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.EnumMember.Equals(Rti.Types.Dynamic.EnumMember)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.EnumMember.ToString">
            <summary>
            Returns the member name
            </summary>
        </member>
        <member name="T:Rti.Types.Dynamic.EnumType">
            <summary>
            Represents an IDL enum.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.EnumType.ExtensibilityKind">
            <summary>
            The value for the IDL extensibility kind.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.EnumType.Members">
            <summary>
            The enumerators.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.EnumType.MemberCount">
            <summary>
            The number of enumerators.
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.EnumType.GetMember(System.UInt32)">
            <summary>
            Returns a member by its position in the type
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            If `index >= MemberCount`.
            </exception>
            <returns>
            The member if the index is valid, or null if the index is <see cref="F:Rti.Types.Dynamic.EnumType.InvalidMemberIndex"/>
            </returns>
        </member>
        <member name="M:Rti.Types.Dynamic.EnumType.GetMember(System.String)">
            <summary>
            Finds a member by its name
            </summary>
            <returns>
            The member if the name exists, or null if the name doesn't exist
            </returns>
        </member>
        <member name="M:Rti.Types.Dynamic.EnumType.FindMemberByName(System.String)">
            <summary>
            Finds the index for a member name, which can be used as the argument
            for <see cref="M:Rti.Types.Dynamic.EnumType.GetMember(System.UInt32)"/>.
            </summary>
            <returns>
            The member index, if the name exists or
            <see cref="F:Rti.Types.Dynamic.EnumType.InvalidMemberIndex"/> if it doesn't.
            </returns>
        </member>
        <member name="M:Rti.Types.Dynamic.EnumType.FindMemberById(System.Int32)">
            <summary>
            Finds the member index given a member ID (`@id` IDL annotation)
            </summary>
            <returns>
            The member index, if the ID exists or
            <see cref="F:Rti.Types.Dynamic.EnumType.InvalidMemberIndex"/> if it doesn't.
            </returns>
            <remarks>@dref_details_TypeCode_find_member_by_id</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.EnumType.GetCdrSerializedSampleMaxSize(System.Int16)">
            <summary>
            Gets the maximum serialized size of samples of this type using
            a certain <see cref="T:Rti.Dds.Core.Policy.DataRepresentation"/>.
            </summary>
            <remarks>@dref_details_TypeCode_cdr_serialized_sample_max_size</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.EnumType.GetCdrSerializedSampleMinSize(System.Int16)">
            <summary>
            Gets the minimum serialized size of samples of this type using
            a certain <see cref="T:Rti.Dds.Core.Policy.DataRepresentation"/>.
            </summary>
            <remarks>@dref_details_TypeCode_cdr_serialized_sample_min_size</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.EnumType.GetCdrSerializedSampleKeyMaxSize(System.Int16)">
            <summary>
            Gets the maximum serialized size of the data type's key using
            a certain <see cref="T:Rti.Dds.Core.Policy.DataRepresentation"/>.
            </summary>
            <remarks>@dref_details_TypeCode_cdr_serialized_sample_key_max_size</remarks>
        </member>
        <member name="T:Rti.Types.Dynamic.LoanedDynamicData">
            <summary>
            Gives temporary access to a member of another <see cref="T:Rti.Types.Dynamic.DynamicData"/> object.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.LoanedDynamicData.Data">
            <summary>
            Gets the loaned data sample.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.LoanedDynamicData.Parent">
            <summary>
            Gets the sample where <see cref="P:Rti.Types.Dynamic.LoanedDynamicData.Data"/> is loaned from.
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.LoanedDynamicData.Dispose">
            <summary>
            Returns the loan.
            </summary>
        </member>
        <member name="T:Rti.Types.Dynamic.MemberInfo">
            <summary>
            A descriptor for a field of a dynamically defined data type.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.MemberInfo.MemberId">
            <summary>
            An integer that uniquely identifies the data member within this <see cref="T:Rti.Types.Dynamic.DynamicData"/> sample's type.
            </summary>
            <remarks>@dref_details_DynamicDataMemberInfo_member_id</remarks>
        </member>
        <member name="P:Rti.Types.Dynamic.MemberInfo.MemberName">
            <summary>
            The name of the data member.
            </summary>
            <remarks>@dref_details_DynamicDataMemberInfo_member_name</remarks>
        </member>
        <member name="P:Rti.Types.Dynamic.MemberInfo.MemberExists">
            <summary>
            Indicates whether the member exists in this sample
            </summary>
            <remarks>@dref_details_DynamicDataMemberInfo_member_exists</remarks>
        </member>
        <member name="P:Rti.Types.Dynamic.MemberInfo.MemberKind">
            <summary>
            The kind of type of this data member (e.g., integer, structure, etc.).
            </summary>
            <remarks>@dref_details_DynamicDataMemberInfo_member_kind</remarks>
        </member>
        <member name="P:Rti.Types.Dynamic.MemberInfo.RepresentationCount">
            <summary>
            The number of defined representations for this data member.
            </summary>
            <remarks>@dref_details_DynamicDataMemberInfo_representation_count</remarks>
        </member>
        <member name="P:Rti.Types.Dynamic.MemberInfo.ElementCount">
            <summary>
            The number of elements within this data member (applies to collection types only).
            </summary>
            <remarks>@dref_details_DynamicDataMemberInfo_element_count</remarks>
        </member>
        <member name="P:Rti.Types.Dynamic.MemberInfo.ElementKind">
            <summary>
            The kind of type of the elements within this data member (applies to collection types only).
            </summary>
            <remarks>@dref_details_DynamicDataMemberInfo_element_kind</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.MemberInfo.Equals(System.Object)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.MemberInfo.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.MemberInfo.Equals(Rti.Types.Dynamic.MemberInfo)">
            <summary>
            Compares for equality.
            </summary>
        </member>
        <member name="T:Rti.Types.Dynamic.PrimitiveType`1">
            <summary>
            Represents an IDL primitive type. Use <see cref="M:Rti.Types.Dynamic.DynamicTypeFactory.GetPrimitiveType``1"/>.
            </summary>
            <typeparam name="T">The primitive type</typeparam>
        </member>
        <member name="T:Rti.Types.Dynamic.SequenceType">
            <summary>
            Represents an IDL sequence.
            </summary>
        </member>
        <member name="F:Rti.Types.Dynamic.SequenceType.Unbounded">
            <summary>
            Special value for <see cref="P:Rti.Types.Dynamic.SequenceType.Bounds"/> that indicates that the sequence is unbounded.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.SequenceType.Bounds">
            <summary>
            The maximum number of elements, or <see cref="F:Rti.Types.Dynamic.SequenceType.Unbounded"/>
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.SequenceType.ContentType">
            <summary>
            The type of the sequence elements.
            </summary>
        </member>
        <member name="T:Rti.Types.Dynamic.StringType">
            <summary>
            Represents an IDL string.
            </summary>
        </member>
        <member name="F:Rti.Types.Dynamic.StringType.Unbounded">
            <summary>
            Special value for <see cref="P:Rti.Types.Dynamic.StringType.Bounds"/> that indicates that the string is unbounded.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.StringType.Bounds">
            <summary>
            The maximum number of characters, or <see cref="F:Rti.Types.Dynamic.StringType.Unbounded"/>
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.StringType.ContentType">
            <summary>
            The type of the string characters.
            </summary>
        </member>
        <member name="T:Rti.Types.Dynamic.StructBuilder">
            <summary>
            Allows creating a new <see cref="T:Rti.Types.Dynamic.StructType"/> via
            <see cref="M:Rti.Types.Dynamic.DynamicTypeFactory.BuildStruct"/>.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.StructBuilder.Name">
            <summary>
            The type name.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.StructBuilder.Parent">
            <summary>
            The base type or null if the struct doesn't have one.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.StructBuilder.ExtensibilityKind">
            <summary>
            The value for the IDL extensibility kind.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.StructBuilder.Members">
            <summary>
            The data members.
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.StructBuilder.WithName(System.String)">
            <summary>
            Returns the same <see cref="T:Rti.Types.Dynamic.StructBuilder"/> instance with a
            modified <see cref="P:Rti.Types.Dynamic.StructBuilder.Name"/>.
            </summary>
            <param name="name">The new <see cref="P:Rti.Types.Dynamic.StructBuilder.Name"/> to be set.</param>
        </member>
        <member name="M:Rti.Types.Dynamic.StructBuilder.WithParent(Rti.Types.Dynamic.StructType)">
            <summary>
            Returns the same <see cref="T:Rti.Types.Dynamic.StructBuilder"/> instance with a
            modified <see cref="P:Rti.Types.Dynamic.StructBuilder.Parent"/>.
            </summary>
            <param name="parent">The new <see cref="P:Rti.Types.Dynamic.StructBuilder.Parent"/> to be set.</param>
        </member>
        <member name="M:Rti.Types.Dynamic.StructBuilder.WithExtensibility(Omg.Types.ExtensibilityKind)">
            <summary>
            Returns the same <see cref="T:Rti.Types.Dynamic.StructBuilder"/> instance with a
            modified <see cref="P:Rti.Types.Dynamic.StructBuilder.ExtensibilityKind"/>.
            </summary>
            <param name="kind">The new <see cref="P:Rti.Types.Dynamic.StructBuilder.ExtensibilityKind"/> to be set.</param>
        </member>
        <member name="M:Rti.Types.Dynamic.StructBuilder.AddMember(Rti.Types.Dynamic.StructMember)">
            <summary>
            Returns the same <see cref="T:Rti.Types.Dynamic.StructBuilder"/> instance with a
            new <see cref="T:Rti.Types.Dynamic.StructMember"/> added to <see cref="P:Rti.Types.Dynamic.StructBuilder.Members"/>.
            </summary>
            <param name="member">The <see cref="T:Rti.Types.Dynamic.StructMember"/> to be added.</param>
        </member>
        <member name="M:Rti.Types.Dynamic.StructBuilder.AddMembers(Rti.Types.Dynamic.StructMember[])">
            <summary>
            Returns the same <see cref="T:Rti.Types.Dynamic.StructBuilder"/> instance with a number
            of new <see cref="T:Rti.Types.Dynamic.StructMember"/> added to <see cref="P:Rti.Types.Dynamic.StructBuilder.Members"/>.
            </summary>
            <param name="members">The array of <see cref="T:Rti.Types.Dynamic.StructMember"/> to be added.</param>
        </member>
        <member name="M:Rti.Types.Dynamic.StructBuilder.AddMembers(System.Collections.Generic.IEnumerable{Rti.Types.Dynamic.StructMember})">
            <summary>
            Returns the same <see cref="T:Rti.Types.Dynamic.StructBuilder"/> instance with a number
            of new <see cref="T:Rti.Types.Dynamic.StructMember"/> added to <see cref="P:Rti.Types.Dynamic.StructBuilder.Members"/>.
            </summary>
            <param name="members">The enumerable object of <see cref="T:Rti.Types.Dynamic.StructMember"/> to be added.</param>
        </member>
        <member name="M:Rti.Types.Dynamic.StructBuilder.Create">
            <summary>
            Creates a new <see cref="T:Rti.Types.Dynamic.StructType"/> object using the current properties
            of the <see cref="T:Rti.Types.Dynamic.StructBuilder"/> instance.
            </summary>
        </member>
        <member name="T:Rti.Types.Dynamic.StructMember">
            <summary>
            Represents a data member in a <see cref="T:Rti.Types.Dynamic.StructType"/>.
            </summary>
        </member>
        <member name="F:Rti.Types.Dynamic.StructMember.InvalidMemberId">
            <summary>
            The default value for a member id.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.StructMember.Name">
            <summary>
            The member name.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.StructMember.Type">
            <summary>
            The member type.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.StructMember.IsExternal">
            <summary>
            Whether this member is annotated as `@external`.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.StructMember.Id">
            <summary>
            The member IDL (value of the `@id` annotation).
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.StructMember.IsKey">
            <summary>
            Whether this member is annotated as `@key`.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.StructMember.IsOptional">
            <summary>
            Whether this member is annotated as `@optional`.
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.StructMember.#ctor(System.String,Rti.Types.Dynamic.DynamicType,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Rti.Types.Dynamic.StructMember"/>.
            </summary>
            <param name="name">The name (required)</param>
            <param name="type">The type (required)</param>
            <param name="id">An explicit member ID (optional, automatically assigned by default)</param>
            <param name="isExternal">Whether to set \@external (optional, false by default)</param>
            <param name="isKey">Whether to set \@key (optional, false by default)</param>
            <param name="isOptional">Whether to set \@optional (optional, false by default)</param>
        </member>
        <member name="M:Rti.Types.Dynamic.StructMember.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.StructMember.GetHashCode">
            <summary>
            Calculates a hash code
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.StructMember.Equals(Rti.Types.Dynamic.StructMember)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.StructMember.ToString">
            <summary>
            Returns the member type and name
            </summary>
        </member>
        <member name="T:Rti.Types.Dynamic.StructType">
            <summary>
            Represents an IDL struct.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.StructType.Parent">
            <summary>
            The base type or null if this struct doesn't have one.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.StructType.ExtensibilityKind">
            <summary>
            The value for the IDL extensibility kind.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.StructType.Members">
            <summary>
            The data members.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.StructType.MemberCount">
            <summary>
            The number of data members.
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.StructType.GetMember(System.UInt32)">
            <summary>
            Returns a member by its position in the type
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            If `index >= MemberCount`.
            </exception>
            <returns>
            The member if the index is valid, or null if the index is <see cref="F:Rti.Types.Dynamic.StructType.InvalidMemberIndex"/>
            </returns>
        </member>
        <member name="M:Rti.Types.Dynamic.StructType.GetMember(System.String)">
            <summary>
            Finds a member by its name
            </summary>
            <returns>
            The member if the name exists, or null if the name doesn't exist
            </returns>
        </member>
        <member name="M:Rti.Types.Dynamic.StructType.FindMemberByName(System.String)">
            <summary>
            Finds the index for a member name, which can be used as the argument
            for <see cref="M:Rti.Types.Dynamic.StructType.GetMember(System.UInt32)"/>.
            </summary>
            <returns>
            The member index, if the name exists or
            <see cref="F:Rti.Types.Dynamic.StructType.InvalidMemberIndex"/> if it doesn't.
            </returns>
        </member>
        <member name="M:Rti.Types.Dynamic.StructType.FindMemberById(System.Int32)">
            <summary>
            Finds the member index given a member ID (`@id` IDL annotation)
            </summary>
            <returns>
            The member index, if the ID exists or
            <see cref="F:Rti.Types.Dynamic.StructType.InvalidMemberIndex"/> if it doesn't.
            </returns>
            <remarks>@dref_details_TypeCode_find_member_by_id</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.StructType.GetCdrSerializedSampleMaxSize(System.Int16)">
            <summary>
            Gets the maximum serialized size of samples of this type using
            a certain <see cref="T:Rti.Dds.Core.Policy.DataRepresentation"/>.
            </summary>
            <remarks>@dref_details_TypeCode_cdr_serialized_sample_max_size</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.StructType.GetCdrSerializedSampleMinSize(System.Int16)">
            <summary>
            Gets the minimum serialized size of samples of this type using
            a certain <see cref="T:Rti.Dds.Core.Policy.DataRepresentation"/>.
            </summary>
            <remarks>@dref_details_TypeCode_cdr_serialized_sample_min_size</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.StructType.GetCdrSerializedSampleKeyMaxSize(System.Int16)">
            <summary>
            Gets the maximum serialized size of the data type's key using
            a certain <see cref="T:Rti.Dds.Core.Policy.DataRepresentation"/>.
            </summary>
            <remarks>@dref_details_TypeCode_cdr_serialized_sample_key_max_size</remarks>
        </member>
        <member name="T:Rti.Types.Dynamic.TypeSerializationProperty">
            <summary>
            Properties that govern how data of a certain type will be
            serialized on the network.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.TypeSerializationProperty.TrimToSize">
            <summary>
            Controls the growth of the buffer in a DynamicData object.
            </summary>
            <remarks>@dref_details_DynamicDataTypeSerializationProperty_t_trim_to_size</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.TypeSerializationProperty.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.TypeSerializationProperty.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.TypeSerializationProperty.Equals(Rti.Types.Dynamic.TypeSerializationProperty)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Types.Dynamic.UnionBuilder">
            <summary>
            Allows creating a new <see cref="T:Rti.Types.Dynamic.UnionType"/> via
            <see cref="M:Rti.Types.Dynamic.DynamicTypeFactory.BuildUnion"/>.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.UnionBuilder.Name">
            <summary>
            The union name.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.UnionBuilder.ExtensibilityKind">
            <summary>
            The value for the IDL extensibility kind.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.UnionBuilder.Discriminator">
            <summary>
            The discriminator.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.UnionBuilder.Members">
            <summary>
            The union members.
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.UnionBuilder.WithName(System.String)">
            <summary>
            Returns the same <see cref="T:Rti.Types.Dynamic.UnionBuilder"/> instance with a
            modified <see cref="P:Rti.Types.Dynamic.UnionBuilder.Name"/>.
            </summary>
            <param name="name">The new <see cref="P:Rti.Types.Dynamic.UnionBuilder.Name"/> to be set.</param>
        </member>
        <member name="M:Rti.Types.Dynamic.UnionBuilder.WithExtensibility(Omg.Types.ExtensibilityKind)">
            <summary>
            Returns the same <see cref="T:Rti.Types.Dynamic.UnionBuilder"/> instance with a
            modified <see cref="P:Rti.Types.Dynamic.UnionBuilder.ExtensibilityKind"/>.
            </summary>
            <param name="kind">The new <see cref="P:Rti.Types.Dynamic.UnionBuilder.ExtensibilityKind"/> to be set.</param>
        </member>
        <member name="M:Rti.Types.Dynamic.UnionBuilder.WithDiscriminator(Rti.Types.Dynamic.DynamicType)">
            <summary>
            Returns the same <see cref="T:Rti.Types.Dynamic.UnionBuilder"/> instance with a
            modified <see cref="P:Rti.Types.Dynamic.UnionBuilder.Discriminator"/>.
            </summary>
            <param name="discriminator">The new <see cref="P:Rti.Types.Dynamic.UnionBuilder.Discriminator"/> to be set.</param>
        </member>
        <member name="M:Rti.Types.Dynamic.UnionBuilder.AddMember(Rti.Types.Dynamic.UnionMember)">
            <summary>
            Returns the same <see cref="T:Rti.Types.Dynamic.UnionBuilder"/> instance with a
            new <see cref="T:Rti.Types.Dynamic.UnionMember"/> added to <see cref="P:Rti.Types.Dynamic.UnionBuilder.Members"/>.
            </summary>
            <param name="member">The <see cref="T:Rti.Types.Dynamic.UnionMember"/> to be added.</param>
        </member>
        <member name="M:Rti.Types.Dynamic.UnionBuilder.AddMembers(Rti.Types.Dynamic.UnionMember[])">
            <summary>
            Returns the same <see cref="T:Rti.Types.Dynamic.UnionBuilder"/> instance with a number
            of new <see cref="T:Rti.Types.Dynamic.UnionMember"/> added to <see cref="P:Rti.Types.Dynamic.UnionBuilder.Members"/>.
            </summary>
            <param name="members">The array of <see cref="T:Rti.Types.Dynamic.UnionMember"/> to be added.</param>
        </member>
        <member name="M:Rti.Types.Dynamic.UnionBuilder.AddMembers(System.Collections.Generic.IEnumerable{Rti.Types.Dynamic.UnionMember})">
            <summary>
            Returns the same <see cref="T:Rti.Types.Dynamic.UnionBuilder"/> instance with a number
            of new <see cref="T:Rti.Types.Dynamic.UnionMember"/> added to <see cref="P:Rti.Types.Dynamic.UnionBuilder.Members"/>.
            </summary>
            <param name="members">The enumerable object of <see cref="T:Rti.Types.Dynamic.UnionMember"/> to be added.</param>
        </member>
        <member name="M:Rti.Types.Dynamic.UnionBuilder.Create">
            <summary>
            Creates a new <see cref="T:Rti.Types.Dynamic.UnionType"/> object using the current properties
            of the <see cref="T:Rti.Types.Dynamic.UnionBuilder"/> instance.
            </summary>
        </member>
        <member name="T:Rti.Types.Dynamic.UnionMember">
            <summary>
            Represents a union member in a <see cref="T:Rti.Types.Dynamic.UnionType"/>.
            </summary>
        </member>
        <member name="F:Rti.Types.Dynamic.UnionMember.InvalidMemberId">
            <summary>
            The default value for a member id.
            </summary>
        </member>
        <member name="F:Rti.Types.Dynamic.UnionMember.DefaultLabel">
            <summary>
            A special integer used by <see cref="P:Rti.Types.Dynamic.UnionMember.Labels"/> to indicate that
            a union member is selected by the `default:` label.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.UnionMember.Name">
            <summary>
            The member name.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.UnionMember.Type">
            <summary>
            The member type.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.UnionMember.IsExternal">
            <summary>
            Whether this member is annotated as `@external`.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.UnionMember.Id">
            <summary>
            The member IDL (value of the `@id` annotation).
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.UnionMember.Labels">
            <summary>
            The labels that select this union member.
            </summary>
            <remarks>
            <para>
            When the union's discriminator is not of type `int`, the elements
            in this collection are cast to `int`.
            </para>
            <para>
            The special value <see cref="F:Rti.Types.Dynamic.UnionMember.DefaultLabel"/> refers to the
            `default:` label.
            </para>
            <para>@dref_details_UnionMember_labels</para>
            </remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.UnionMember.#ctor(System.String,Rti.Types.Dynamic.DynamicType,System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Rti.Types.Dynamic.UnionMember"/>.
            </summary>
            <param name="name">The name (required)</param>
            <param name="type">The type (required)</param>
            <param name="labels">The labels that select this member (required)</param>
            <param name="id">An explicit member ID (optional, automatically assigned by default)</param>
            <param name="isExternal">Whether to set \@external (optional, false by default)</param>
        </member>
        <member name="M:Rti.Types.Dynamic.UnionMember.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.UnionMember.GetHashCode">
            <summary>
            Calculates a hash code
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.UnionMember.Equals(Rti.Types.Dynamic.UnionMember)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.UnionMember.ToString">
            <summary>
            Returns the member type and name
            </summary>
        </member>
        <member name="T:Rti.Types.Dynamic.UnionType">
            <summary>
            Represents an IDL union.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.UnionType.ExtensibilityKind">
            <summary>
            The value for the IDL extensibility kind.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.UnionType.Members">
            <summary>
            The union members.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.UnionType.Discriminator">
            <summary>
            The type of the union discriminator
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.UnionType.MemberCount">
            <summary>
            The number of union members.
            </summary>
        </member>
        <member name="M:Rti.Types.Dynamic.UnionType.GetMember(System.UInt32)">
            <summary>
            Returns a member by its position in the type
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            When `index >= MemberCount`.
            </exception>
            <returns>
            The member if the index is valid, or null if the index is <see cref="F:Rti.Types.Dynamic.UnionType.InvalidMemberIndex"/>
            </returns>
        </member>
        <member name="M:Rti.Types.Dynamic.UnionType.GetMember(System.String)">
            <summary>
            Finds a member by its name
            </summary>
            <returns>
            The member if the name exists, or null if the name doesn't exist
            </returns>
        </member>
        <member name="M:Rti.Types.Dynamic.UnionType.FindMemberByName(System.String)">
            <summary>
            Finds the index for a member name, which can be used as the argument
            for <see cref="M:Rti.Types.Dynamic.UnionType.GetMember(System.UInt32)"/>.
            </summary>
            <returns>
            The member index, if the name exists or
            <see cref="F:Rti.Types.Dynamic.UnionType.InvalidMemberIndex"/> if it doesn't.
            </returns>
        </member>
        <member name="M:Rti.Types.Dynamic.UnionType.FindMemberById(System.Int32)">
            <summary>
            Finds the member index given a member ID (`@id` IDL annotation)
            </summary>
            <returns>
            The member index, if the ID exists or
            <see cref="F:Rti.Types.Dynamic.UnionType.InvalidMemberIndex"/> if it doesn't.
            </returns>
            <remarks>@dref_details_TypeCode_find_member_by_id</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.UnionType.FindMemberByLabel(System.Int32)">
            <summary>
            Finds the member index given the value of the union discriminator
            (label) that selects that member.
            </summary>
            <returns>
            The member index, if the label selects a member, or
            <see cref="F:Rti.Types.Dynamic.UnionType.InvalidMemberIndex"/> if it doesn't.
            </returns>
        </member>
        <member name="M:Rti.Types.Dynamic.UnionType.GetCdrSerializedSampleMaxSize(System.Int16)">
            <summary>
            Gets the maximum serialized size of samples of this type using
            a certain <see cref="T:Rti.Dds.Core.Policy.DataRepresentation"/>.
            </summary>
            <remarks>@dref_details_TypeCode_cdr_serialized_sample_max_size</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.UnionType.GetCdrSerializedSampleMinSize(System.Int16)">
            <summary>
            Gets the minimum serialized size of samples of this type using
            a certain <see cref="T:Rti.Dds.Core.Policy.DataRepresentation"/>.
            </summary>
            <remarks>@dref_details_TypeCode_cdr_serialized_sample_min_size</remarks>
        </member>
        <member name="M:Rti.Types.Dynamic.UnionType.GetCdrSerializedSampleKeyMaxSize(System.Int16)">
            <summary>
            Gets the maximum serialized size of the data type's key using
            a certain <see cref="T:Rti.Dds.Core.Policy.DataRepresentation"/>.
            </summary>
            <remarks>@dref_details_TypeCode_cdr_serialized_sample_key_max_size</remarks>
        </member>
        <member name="T:Rti.Types.Dynamic.WideStringType">
            <summary>
            Represents an IDL wstring.
            </summary>
        </member>
        <member name="F:Rti.Types.Dynamic.WideStringType.Unbounded">
            <summary>
            Special value for <see cref="P:Rti.Types.Dynamic.WideStringType.Bounds"/> that indicates that the string is unbounded.
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.WideStringType.Bounds">
            <summary>
            The maximum number of characters, or <see cref="F:Rti.Types.Dynamic.WideStringType.Unbounded"/>
            </summary>
        </member>
        <member name="P:Rti.Types.Dynamic.WideStringType.ContentType">
            <summary>
            The type of the string characters.
            </summary>
        </member>
        <member name="T:Rti.Types.Builtin.KeyedOctetsTopicType">
             <summary>
             A keyed topic-type containing a string (the key) and a sequence
             of bytes. This type can be used to instantiate a
             <see cref="T:Rti.Dds.Topics.Topic`1"/>.
             </summary>
             <remarks>
             This type is equivalent to the following IDL type:
             <code>
             struct KeyedOctetsTopicType {
                 @key string&lt;1024&gt; key;
                 sequence&lt;octet, 2048&gt; value;
             };
             </code>
            
             </remarks>
        </member>
        <member name="P:Rti.Types.Builtin.KeyedOctetsTopicType.Key">
            <summary>
            The key (its maximum size is 1024 bytes in UTF-8 format)
            </summary>
        </member>
        <member name="P:Rti.Types.Builtin.KeyedOctetsTopicType.Value">
            <summary>
            The sequence of octets (its maximum size is 2048)
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.KeyedOctetsTopicType.#ctor">
            <summary>
            Creates an instance with an empty key and an empty sequence.
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.KeyedOctetsTopicType.#ctor(System.String,Omg.Types.ISequence{System.Byte})">
            <summary>
            Creates an instance with the given key and sequence of bytes.
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.KeyedOctetsTopicType.#ctor(Rti.Types.Builtin.KeyedOctetsTopicType)">
            <summary>
            Creates an instance with a copy of another instance (the sequence
            elements are also copied).
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.KeyedOctetsTopicType.GetHashCode">
            <summary>
            Gets a simple hashcode based on the key and the number of elements.
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.KeyedOctetsTopicType.Equals(Rti.Types.Builtin.KeyedOctetsTopicType)">
            <summary>
            Compares the key and the full sequence
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.KeyedOctetsTopicType.Equals(System.Object)">
            <summary>
            Compares the key and the full sequence
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.KeyedOctetsTopicType.ToString">
            <summary>
            Converts to string
            </summary>
        </member>
        <member name="T:Rti.Types.Builtin.KeyedOctetsTopicTypeSupport">
            <summary>
            The type support for <see cref="T:Rti.Types.Builtin.KeyedOctetsTopicType"/>.
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.KeyedOctetsTopicTypeSupport.#ctor">
            <summary>
            For internal use only. Use <see cref="P:Rti.Types.Builtin.KeyedOctetsTopicTypeSupport.Instance"/> instead.
            </summary>
        </member>
        <member name="P:Rti.Types.Builtin.KeyedOctetsTopicTypeSupport.Instance">
            <summary>
            Gets the singleton
            </summary>
        </member>
        <member name="T:Rti.Types.Builtin.KeyedStringTopicType">
             <summary>
             An keyed topic-type containing two strings: a key and a value. This
             type can be used to instantiate a <see cref="T:Rti.Dds.Topics.Topic`1"/>.
             </summary>
             <remarks>
             This type is equivalent to the following IDL type:
             <code>
             struct KeyedStringTopicType {
                 @key string&lt;1024&gt; key;
                 string&lt;1024&gt; value;
             };
             </code>
            
             <para>
             Note that the maximum size maximum size of each string is 1024 bytes
             in UTF-8 format.
             </para>
             </remarks>
        </member>
        <member name="P:Rti.Types.Builtin.KeyedStringTopicType.Key">
            <summary>
            The key (its maximum size is 1024 bytes in UTF-8 format)
            </summary>
        </member>
        <member name="P:Rti.Types.Builtin.KeyedStringTopicType.Value">
            <summary>
            The value (its maximum size is 1024 bytes in UTF-8 format)
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.KeyedStringTopicType.#ctor">
            <summary>
            Creates an instance with two empty strings
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.KeyedStringTopicType.#ctor(System.String,System.String)">
            <summary>
            Creates an instance with the given key and value
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.KeyedStringTopicType.#ctor(Rti.Types.Builtin.KeyedStringTopicType)">
            <summary>
            Creates an instance with the same strings as another instance
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.KeyedStringTopicType.GetHashCode">
            <summary>
            Gets the hashcode
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.KeyedStringTopicType.Equals(Rti.Types.Builtin.KeyedStringTopicType)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.KeyedStringTopicType.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.KeyedStringTopicType.ToString">
            <summary>
            Converts to string
            </summary>
        </member>
        <member name="T:Rti.Types.Builtin.KeyedStringTopicTypeSupport">
            <summary>
            The type support for <see cref="T:Rti.Types.Builtin.KeyedStringTopicType"/>.
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.KeyedStringTopicTypeSupport.#ctor">
            <summary>
            For internal use only. Use <see cref="P:Rti.Types.Builtin.KeyedStringTopicTypeSupport.Instance"/> instead.
            </summary>
        </member>
        <member name="P:Rti.Types.Builtin.KeyedStringTopicTypeSupport.Instance">
            <summary>
            Gets the singleton
            </summary>
        </member>
        <member name="T:Rti.Types.Builtin.OctetsTopicType">
             <summary>
             An un-keyed topic-type consisting of a sequence of bytes.
             This type can be used to instantiate a <see cref="T:Rti.Dds.Topics.Topic`1"/>.
             </summary>
             <remarks>
             This type is equivalent to the following IDL type:
             <code>
             struct OctetsTopicType {
                 sequence&lt;octet, 2048&gt; value;
             };
             </code>
            
             <para>
             Note that the maximum sequence size that can be published with this type
             is 2048 bytes.
             </para>
             </remarks>
        </member>
        <member name="M:Rti.Types.Builtin.OctetsTopicType.#ctor">
            <summary>
            Creates an empty sequence
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.OctetsTopicType.#ctor(Rti.Types.Sequence{System.Byte})">
            <summary>
            Creates an object that shares the sequence
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.OctetsTopicType.#ctor(Rti.Types.Builtin.OctetsTopicType)">
            <summary>
            Creates an object with a copy of the elements of another object
            </summary>
        </member>
        <member name="P:Rti.Types.Builtin.OctetsTopicType.Value">
            <summary>
            The sequence of bytes
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.OctetsTopicType.Equals(Rti.Types.Builtin.OctetsTopicType)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.OctetsTopicType.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.OctetsTopicType.ToString">
            <summary>
            Displays the sequence of bytes
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.OctetsTopicType.GetHashCode">
            <summary>
            Calculates a simple hash code
            </summary>
            <returns>A hash code based on the length and the first and last bytes</returns>
        </member>
        <member name="T:Rti.Types.Builtin.StringTopicType">
             <summary>
             An un-keyed topic-type containing a single string. This type can be used
             to instantiate a <see cref="T:Rti.Dds.Topics.Topic`1"/>.
             </summary>
             <remarks>
             This type is equivalent to the following IDL type:
             <code>
             struct StringTopicType {
                 string&lt;1024&gt; value;
             };
             </code>
            
             <para>
             Note that the maximum size of the string that can be published with
             this type is 1024 bytes in UTF-8 format.
             </para>
             <para>
             It is also possible to use `string` as the type argument for `Topic`,
             with the same effect as `StringTopicType`.
             </para>
             </remarks>
        </member>
        <member name="P:Rti.Types.Builtin.StringTopicType.Value">
            <summary>
            The string (its maximum size is 1024 bytes in UTF-8 format)
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.StringTopicType.ToString">
            <summary>
            Returns <see cref="P:Rti.Types.Builtin.StringTopicType.Value"/>.
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.StringTopicType.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.StringTopicType.Equals(Rti.Types.Builtin.StringTopicType)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.StringTopicType.Equals(System.String)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.StringTopicType.GetHashCode">
            <summary>
            Returns Value.GetHashCode()
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.StringTopicType.op_Implicit(System.String)~Rti.Types.Builtin.StringTopicType">
            <summary>
            Implicit conversion from string to StringTopicType
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.StringTopicType.op_Implicit(Rti.Types.Builtin.StringTopicType)~System.String">
            <summary>
            Implicit conversion from StringTopicType to string.
            </summary>
        </member>
        <member name="T:Rti.Types.Builtin.StringTopicTypeSupport">
            <summary>
            The type support for <see cref="T:Rti.Types.Builtin.StringTopicType"/>.
            </summary>
        </member>
        <member name="M:Rti.Types.Builtin.StringTopicTypeSupport.#ctor">
            <summary>
            For internal use only. Use <see cref="P:Rti.Types.Builtin.StringTopicTypeSupport.Instance"/> instead.
            </summary>
        </member>
        <member name="P:Rti.Types.Builtin.StringTopicTypeSupport.Instance">
            <summary>
            Gets the singleton
            </summary>
        </member>
        <member name="T:Rti.Types.LongDouble">
            <summary>
            IDL 128-bit floating-point type.
            </summary>
            <remarks>
            <para>
            This type is used by DDS to represent the IDL `long double` type and can
            be used among platforms for which there isn't a standard definition
            for a 128-bit floating-point type.
            </para>
            <para>
            LongDouble can be converted to and from `decimal`, but this doesn't
            ensure interoperability with C, C++ or other applications for which a
            long double can have different representations. If a distributed system
            uses different long double representations, the applications are
            responsible for manually interpreting the individual bytes (provided as
            <see cref="P:Rti.Types.LongDouble.Int0"/> to <see cref="P:Rti.Types.LongDouble.Int3"/>).
            </para>
            </remarks>
        </member>
        <member name="P:Rti.Types.LongDouble.Int0">
            <summary>
            Bytes 1 to 4 of this long double
            </summary>
        </member>
        <member name="P:Rti.Types.LongDouble.Int1">
            <summary>
            Bytes 5 to 8 of this long double
            </summary>
        </member>
        <member name="P:Rti.Types.LongDouble.Int2">
            <summary>
            Bytes 9 to 12 of this long double
            </summary>
        </member>
        <member name="P:Rti.Types.LongDouble.Int3">
            <summary>
            Bytes 13 to 16 of this long double
            </summary>
        </member>
        <member name="M:Rti.Types.LongDouble.#ctor(System.Int32[])">
            <summary>
            Creates a LongDouble from its 32 bytes, as 4 ints
            </summary>
        </member>
        <member name="M:Rti.Types.LongDouble.#ctor(System.Decimal)">
            <summary>
            Creates a LongDouble from a decimal
            </summary>
        </member>
        <member name="M:Rti.Types.LongDouble.#ctor(System.Double)">
            <summary>
            Creates a LongDouble from a double
            </summary>
        </member>
        <member name="M:Rti.Types.LongDouble.#ctor(System.Int32)">
            <summary>
            Creates a LongDouble from an int
            </summary>
        </member>
        <member name="M:Rti.Types.LongDouble.GetBits">
            <summary>
            Gets the bits in an array of 4 integers
            </summary>
        </member>
        <member name="M:Rti.Types.LongDouble.ToDecimal">
            <summary>
            Converts from LongDouble to decimal
            </summary>
            <remarks>
            Note that the encoding of this LongDouble is not guaranteed to
            be compatible with a .NET decimal type.
            </remarks>
        </member>
        <member name="M:Rti.Types.LongDouble.op_Explicit(Rti.Types.LongDouble)~System.Decimal">
            <summary>
            Converts from LongDouble to decimal
            </summary>
            <remarks>
            Note that the encoding of this LongDouble is not guaranteed to
            be compatible with a .NET decimal type.
            </remarks>
        </member>
        <member name="M:Rti.Types.LongDouble.op_Explicit(System.Decimal)~Rti.Types.LongDouble">
            <summary>
            Converts from decimal to LongDouble
            </summary>
        </member>
        <member name="M:Rti.Types.LongDouble.ToString">
            <summary>
            Returns <see cref="M:Rti.Types.LongDouble.ToDecimal"/>.ToString().
            </summary>
        </member>
        <member name="M:Rti.Types.LongDouble.Equals(Rti.Types.LongDouble)">
            <summary>
            Compares with another LongDouble
            </summary>
        </member>
        <member name="M:Rti.Types.LongDouble.CompareTo(Rti.Types.LongDouble)">
            <summary>
            Compares the result of converting <see cref="M:Rti.Types.LongDouble.ToDecimal"/>.
            </summary>
        </member>
        <member name="T:Rti.Types.Sequence`1">
            <summary>
            IDL sequences map to this type.
            </summary>
            <remarks>
            This class provides the same methods and properties as
            `System.Collections.Generic.List`
            (https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=netcore-3.1).
            </remarks>
        </member>
        <member name="T:Rti.Utility.HeapMonitor">
            <summary>
            Utility that tracks native heap memory usage by RTI Connext DDS
            </summary>
        </member>
        <member name="P:Rti.Utility.HeapMonitor.Instance">
            <summary>
            Accesses the singleton that allows taking snapshots.
            <see cref="M:Rti.Utility.HeapMonitor.Enable"/> must be called before.
            </summary>
        </member>
        <member name="M:Rti.Utility.HeapMonitor.Enable">
            <summary>
            Enables heap memory tracking. Heap monitoring must be explicitly
            enabled before any other RTI Connext DDS operation.
            </summary>
            <remarks>@dref_details_HeapMonitoring_enable</remarks>
        </member>
        <member name="M:Rti.Utility.HeapMonitor.Dispose">
            <summary>
            Disables heap memory tracking.
            </summary>
            <remarks>@dref_details_HeapMonitoring_disable</remarks>
        </member>
        <member name="M:Rti.Utility.HeapMonitor.TakeSnapshot">
            <summary>
            Takes a snapshot
            </summary>
            <returns>An object with information about heap usage</returns>
            <remarks>@dref_details_HeapMonitoring_take_heap_snapshot</remarks>
        </member>
        <member name="M:Rti.Utility.HeapMonitor.TakeSnapshot(System.String,System.Boolean)">
            <summary>
            Takes a snapshot and saves the details into a file
            </summary>
            <returns>An object with information about heap usage</returns>
            <remarks>@dref_details_HeapMonitoring_take_heap_snapshot</remarks>
        </member>
        <member name="M:Rti.Utility.HeapMonitor.Pause">
            <summary>
            Pauses heap memory tracking
            </summary>
            <remarks>@dref_details_HeapMonitoring_pause</remarks>
        </member>
        <member name="M:Rti.Utility.HeapMonitor.Resume">
            <summary>
            Resumes tracking after <see cref="M:Rti.Utility.HeapMonitor.Pause"/>.
            </summary>
            <remarks>@dref_details_HeapMonitoring_resume</remarks>
        </member>
        <member name="T:Rti.Utility.HeapMonitor.Snapshot">
            <summary>
            Contains information about memory usage
            </summary>
        </member>
        <member name="P:Rti.Utility.HeapMonitor.Snapshot.CurrentHeapUsage">
            <summary>
            The number bytes of native heap memory currently in use.
            </summary>
        </member>
        <member name="M:Rti.Utility.HeapMonitor.Snapshot.CompareTo(Rti.Utility.HeapMonitor.Snapshot)">
            <summary>
            Compares <see cref="P:Rti.Utility.HeapMonitor.Snapshot.CurrentHeapUsage"/> in two snapshots
            </summary>
        </member>
        <member name="M:Rti.Utility.HeapMonitor.Snapshot.Equals(Rti.Utility.HeapMonitor.Snapshot)">
            <summary>
            Compares <see cref="P:Rti.Utility.HeapMonitor.Snapshot.CurrentHeapUsage"/> in two snapshots for equality
            </summary>
        </member>
        <member name="M:Rti.Utility.HeapMonitor.Snapshot.ToString">
            <summary>
            Displays <see cref="P:Rti.Utility.HeapMonitor.Snapshot.CurrentHeapUsage"/>.
            </summary>
        </member>
        <member name="M:Rti.Utility.HeapMonitor.Snapshot.GetHashCode">
            <summary>
            Returns <see cref="P:Rti.Utility.HeapMonitor.Snapshot.CurrentHeapUsage"/>, cast to int.
            </summary>
        </member>
        <member name="T:Rti.Utility.NetworkCapture">
            <summary>
            Allows capturing the network traffic that one or more
            DomainParticipants send or receive into a pcap file.
            </summary>
            <remarks>@dref_details_NetworkCapture</remarks>
        </member>
        <member name="M:Rti.Utility.NetworkCapture.Enable">
            <summary>
            Enable Network Capture. To enable, this function must be called
            before Start and before the creation of any <see cref="T:Rti.Dds.Domain.DomainParticipant"/>
            for which you want to capture traffic.
            </summary>
            <remarks>@dref_details_NetworkCapture_enable</remarks>
        </member>
        <member name="M:Rti.Utility.NetworkCapture.Disable">
            <summary>
            Disable Network Capture.
            </summary>
            <remarks>@dref_details_NetworkCapture_disable</remarks>
        </member>
        <member name="M:Rti.Utility.NetworkCapture.SetDefaultParams(Rti.Utility.NetworkCaptureParams)">
            <summary>
            Set the default NetworkCaptureParams to be used when the parameters
            are not specified in Start().
            </summary>
        </member>
        <member name="M:Rti.Utility.NetworkCapture.Start(System.String)">
            <summary>
            Start capturing traffic for all DomainParticipants, with the default
            parameters. The method <see cref="M:Rti.Utility.NetworkCapture.Enable"/> must be called before this.
            </summary>
            <returns>An object that allows pausing or stoping the capture</returns>
            <remarks>@dref_details_NetworkCapture_start</remarks>
        </member>
        <member name="M:Rti.Utility.NetworkCapture.Start(Rti.Dds.Domain.DomainParticipant,System.String)">
            <summary>
            Start capturing traffic for a DomainParticipant, with the default parameters.
            The method <see cref="M:Rti.Utility.NetworkCapture.Enable"/> must be called before this.
            </summary>
            <returns>An object that allows pausing or stoping the capture</returns>
            <remarks>@dref_details_NetworkCapture_start_for_participant</remarks>
        </member>
        <member name="M:Rti.Utility.NetworkCapture.Start(System.String,Rti.Utility.NetworkCaptureParams)">
            <summary>
            Start capturing traffic for all DomainParticipants, with specific
            parameters. The method <see cref="M:Rti.Utility.NetworkCapture.Enable"/> must be called before this.
            </summary>
            <returns>An object that allows pausing or stoping the capture</returns>
            <remarks>@dref_details_NetworkCapture_start</remarks>
        </member>
        <member name="M:Rti.Utility.NetworkCapture.Start(Rti.Dds.Domain.DomainParticipant,System.String,Rti.Utility.NetworkCaptureParams)">
            <summary>
            Start capturing traffic for a DomainParticipant, with specific parameters.
            The method <see cref="M:Rti.Utility.NetworkCapture.Enable"/> must be called before this.
            </summary>
            <returns>An object that allows pausing or stoping the capture</returns>
            <remarks>@dref_details_NetworkCapture_start_for_participant</remarks>
        </member>
        <member name="M:Rti.Utility.NetworkCapture.Dispose">
            <summary>
            Stop capturing traffic.
            </summary>
            <remarks>@dref_details_NetworkCapture_stop</remarks>
        </member>
        <member name="M:Rti.Utility.NetworkCapture.Pause">
            <summary>
            Pause capturing traffic.
            </summary>
            <remarks>@dref_details_NetworkCapture_pause</remarks>
        </member>
        <member name="M:Rti.Utility.NetworkCapture.Resume">
            <summary>
            Resume capturing traffic.
            </summary>
            <remarks>@dref_details_NetworkCapture_pause</remarks>
        </member>
        <member name="T:Rti.Utility.NetworkCaptureParams">
            <summary>
            Configures the options of a <see cref="T:Rti.Utility.NetworkCapture"/>.
            </summary>
        </member>
        <member name="P:Rti.Utility.NetworkCaptureParams.Transports">
            <summary>
            List of transports to capture
            </summary>
            <remarks>@dref_details_NetworkCaptureParams_transports</remarks>
        </member>
        <member name="P:Rti.Utility.NetworkCaptureParams.DroppedContent">
            <summary>
            Exclude contents from the capture file.
            </summary>
            <remarks>@dref_details_NetworkCaptureParams_dropped_content</remarks>
        </member>
        <member name="P:Rti.Utility.NetworkCaptureParams.Traffic">
            <summary>
            Traffic direction to capture
            </summary>
            <remarks>@dref_details_NetworkCaptureParams_traffic</remarks>
        </member>
        <member name="P:Rti.Utility.NetworkCaptureParams.ParseEncryptedContent">
            <summary>
            If secure traffic should be decrypted or not.
            </summary>
            <remarks>@dref_details_NetworkCaptureParams_parse_encrypted_content</remarks>
        </member>
        <member name="P:Rti.Utility.NetworkCaptureParams.CheckpointThreadSettings">
            <summary>
            The properties of the checkpoint thread.
            </summary>
            <remarks>@dref_details_NetworkCaptureParams_checkpoint_thread_settings</remarks>
        </member>
        <member name="P:Rti.Utility.NetworkCaptureParams.FrameQueueSize">
            <summary>
            Size of the frame queue (Bytes).
            </summary>
            <remarks>@dref_details_NetworkCaptureParams_frame_queue_size</remarks>
        </member>
        <member name="M:Rti.Utility.NetworkCaptureParams.#ctor">
            <summary>
            Creates a new instance with the default parameters
            </summary>
        </member>
        <member name="M:Rti.Utility.NetworkCaptureParams.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
        </member>
        <member name="M:Rti.Utility.NetworkCaptureParams.Equals(System.Object)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="M:Rti.Utility.NetworkCaptureParams.Equals(Rti.Utility.NetworkCaptureParams)">
            <summary>
            Compares for equality
            </summary>
        </member>
        <member name="T:Rti.Utility.NetworkCaptureParams.TrafficKind">
            <summary>
            Indicates the traffic direction in <see cref="P:Rti.Utility.NetworkCaptureParams.Traffic"/>
            </summary>
        </member>
        <member name="F:Rti.Utility.NetworkCaptureParams.TrafficKind.None">
            <summary>None</summary>
        </member>
        <member name="F:Rti.Utility.NetworkCaptureParams.TrafficKind.Out">
            <summary>Output traffic</summary>
        </member>
        <member name="F:Rti.Utility.NetworkCaptureParams.TrafficKind.In">
            <summary>Input traffic</summary>
        </member>
        <member name="F:Rti.Utility.NetworkCaptureParams.TrafficKind.Default">
            <summary>Default configuration (All)</summary>
        </member>
        <member name="F:Rti.Utility.NetworkCaptureParams.TrafficKind.All">
            <summary>Input and output traffic</summary>
        </member>
        <member name="T:Rti.Utility.NetworkCaptureParams.ContentKind">
            <summary>
            Indicates the kind of content in <see cref="P:Rti.Utility.NetworkCaptureParams.DroppedContent"/>
            </summary>
        </member>
        <member name="F:Rti.Utility.NetworkCaptureParams.ContentKind.None">
            <summary>None</summary>
        </member>
        <member name="F:Rti.Utility.NetworkCaptureParams.ContentKind.Default">
            <summary>Default configuration (None)</summary>
        </member>
        <member name="F:Rti.Utility.NetworkCaptureParams.ContentKind.User">
            <summary>User content</summary>
        </member>
        <member name="F:Rti.Utility.NetworkCaptureParams.ContentKind.Encrypted">
            <summary>Encrypted content</summary>
        </member>
        <member name="F:Rti.Utility.NetworkCaptureParams.ContentKind.All">
            <summary>All content</summary>
        </member>
        <member name="T:Rti.Utility.MaybeNullAttribute">
            <summary>
            Indicates that a method or property may return a null value
            (elements without this annotation never return null)
            </summary>
        </member>
        <member name="T:Rti.Utility.AllowNullAttribute">
            <summary>
            Indicates that a method or property accepts null as a valid input
            (elements without this attribute don't accept null inputs)
            </summary>
        </member>
    </members>
</doc>
